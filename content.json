{"meta":{"title":"神楽の魂的博客","subtitle":"","description":"吾魂兮无求乎永生,竭尽兮人事之所","author":"神楽の魂","url":"http://example.com","root":"/"},"pages":[{"title":"archives","date":"2021-11-27T05:33:58.000Z","updated":"2022-04-30T12:32:40.368Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"说说","date":"2022-04-30T00:52:55.000Z","updated":"2022-04-30T12:21:15.133Z","comments":false,"path":"artitalk/index.html","permalink":"http://example.com/artitalk/index.html","excerpt":"","text":"new Artitalk({ appId: 'uglz6tnJasD6sm9qHMVU1oJk-MdYXbMMI', appKey: 'UYbIjFxE6uFOHkNjLCUxHf6R' })"},{"title":"link","date":"2022-02-16T16:04:18.000Z","updated":"2022-04-19T14:10:30.578Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"categories |分类 |归档","date":"2021-11-27T05:46:32.000Z","updated":"2022-04-29T15:51:52.679Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2021-12-07T16:06:22.000Z","updated":"2022-06-18T01:46:33.521Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"1111 我是北京信息科技大学计科的学生，我喜欢开源文化，"},{"title":"标签","date":"2021-11-27T05:46:37.000Z","updated":"2022-04-30T12:22:11.827Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"我的相册","date":"2022-05-07T03:01:32.134Z","updated":"2022-05-07T03:01:32.134Z","comments":true,"path":"gallery/index.html","permalink":"http://example.com/gallery/index.html","excerpt":"","text":"我的世界 和老朋友联机1.18截的风景... 我的世界 和老朋友联机1.18截的风景..."},{"title":"gallery","date":"2022-05-07T01:31:46.804Z","updated":"2022-05-07T01:31:46.804Z","comments":true,"path":"gallery/gallery/marvel/marvel.html","permalink":"http://example.com/gallery/gallery/marvel/marvel.html","excerpt":"","text":""},{"title":"gallery","date":"2022-05-07T02:56:02.804Z","updated":"2022-05-07T02:56:02.804Z","comments":true,"path":"gallery/2022/wdsj/index.html","permalink":"http://example.com/gallery/2022/wdsj/index.html","excerpt":"","text":"废旧矿洞的冒险 世界最高峰! 雨林小家 雪山冒险 被追杀后，转角遇到了最美风景"}],"posts":[{"title":"ZeroBasisLeetcode","slug":"ZeroBasisLeetcode","date":"2022-06-17T14:50:00.000Z","updated":"2022-06-17T17:20:33.998Z","comments":true,"path":"2022/06/17/ZeroBasisLeetcode/","link":"","permalink":"http://example.com/2022/06/17/ZeroBasisLeetcode/","excerpt":"","text":"九天零基础力扣 第一天函数输入和输出一般的在线评测系统中，我们要手写输入输出函数，而在lc中只要实现函数就可以了 刷题步骤 第 1 步：阅读题目； 第 2 步：参考示例； 第 4 步：根据题意，实现函数的功能； 第 5 步：本地数据测试； 第 6 步：提交； 函数定义 调用函数的一方不需要了解函数的具体实现，对于它来说，这部分是一个 \"黑盒子\"，从而使得程序结构更加清晰。 C语言在设计中考虑了函数的 高效性 和 易用性 两个原则。函数的实现应该尽量简短，因为函数可以套函数，一个程序应该尽量由许多小的函数组成，而不是由少量较大函数组成。 题目分析整数乘法371. 两整数之和 - 力扣（LeetCode） 给你两个整数 a 和 b ，不使用 运算符 + 和 - ，计算并返回两整数之和。 实现一个函数multiply，不使用 * 运算符， 实现两个正整数的相乘。可以使用加号、减号、位移，但要吝啬一些。 ​ (1) 这里int是C/C++中的一种类型，代表整数，即 Integer，传入参数是两个整数； 题目要求返回两个整数的乘积，并且要求不能用*，那如果我用了会怎么样？答案是并不会怎么样，因为平台不会去对它做语法分析，只是调用了你的函数，提供一些输入数据，如果输出数据和它给定的相同，就算通过。作为你接触算法的第一道题，其实这些条件都无所谓的，能过就行，他只检测输入输出，不检测你实际代码。 ​ (2) 对于新人来说，把问题过掉比问题本身更重要，题数的增加，是信心的增加，信心比什么都重要，有了信心，你才能继续往下走，只要你能往下推进，你就能继续学习，继续学习你迟早会学到相应的算法。好了，过了这题以后，把这道题放入你的重刷列表，等你对算法有一定理解以后再来用题目要求的方法来过了它。 整数除法 给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。 返回被除数 dividend 除以除数 divisor 得到的商。 整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2 示例 1: 输入: dividend = 10, divisor = 3输出: 3解释: 10/3 = truncate(3.33333..) = truncate(3) = 3示例 2: 输入: dividend = 7, divisor = -3输出: -2解释: 7/-3 = truncate(-2.33333..) = -2 提示： 被除数和除数均为 32 位有符号整数。除数不为 0。假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。 次幂函数开方函数最值函数","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"刷题","slug":"算法/刷题","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://example.com/tags/Algorithm/"}]},{"title":"六月集训","slug":"text","date":"2022-05-31T05:22:47.000Z","updated":"2022-06-02T16:59:35.710Z","comments":true,"path":"2022/05/31/text/","link":"","permalink":"http://example.com/2022/05/31/text/","excerpt":"","text":"文章目录[TOC] 一、概念1、顺序存储 顺序存储结构，是指用一段地址连续的存储单元依次存储线性表的数据元素。 2、存储方式 在编程语言中，用一维数组来实现顺序存储结构，在C语言中，把第一个数据元素存储到下标为 0 的位置中，把第 2 个数据元素存储到下标为 1 的位置中，以此类推。 3、长度和容量 数组的长度指的是数组当前有多少个元素，数组的容量指的是数组最大能够存放多少个元素。如果数组元素大于最大能存储的范围，在程序上是不允许的，可能会产生意想不到的问题，实现上是需要规避的。 如上图所示，数组的长度为 5，即红色部分；容量为 8，即红色 加 蓝色部分。 4、数据结构定义12345678#define MAXN 1024#define DataType int // (1)struct SeqList &#123; DataType data[MAXN]; // (2) int length; // (3)&#125;; 1234567 ( 1 ) (1)(1) 数组类型为DataType，定义为int； ( 2 ) (2)(2) SeqList定义的就是一个最多存放MAXN个元素的数组，MAXN代表数组容量； ( 3 ) (3)(3) length代表数组长度，即当前的元素个数。 二、常用接口实现1、只读接口1）索引 索引 就是通过 数组下标 寻找 数组元素 的过程。C语言实现如下： 1234DataType SeqListIndex(struct SeqList *sq, int i) &#123; return sq-&gt;data[i]; // (1)&#125;123 ( 1 ) (1)(1) 调用方需要注意 i ii 的取值必须为非负整数，且小于数组最大长度。否则有可能导致异常，引发崩溃。 索引的算法时间复杂度为 O ( 1 ) O(1)O(1)。 2）查找 查找 就是通过 数组元素 寻找 数组下标 的过程，是索引的逆过程。 对于有序数组，可以采用 二分 进行查找，时间复杂度为 O ( l o g 2 n ) O(log_2n)O(log2​n)；对于无序数组，只能通过遍历比较，由于元素可能不在数组中，可能遍历全表，所以查找的最坏时间复杂度为 O ( n ) O(n)O(n)。 简单介绍一个线性查找的例子，实现如下： 12345678910DataType SeqListFind(struct SeqList *sq, DataType dt) &#123; int i; for(i = 0; i &lt; sq-&gt;length; ++i) &#123; // (1) if(sq-&gt;data[i] == dt) &#123; return i; // (2) &#125; &#125; return -1; // (3)&#125;123456789 ( 1 ) (1)(1) 遍历数组元素； ( 2 ) (2)(2) 对数组元素 和 传入的数据进行判等，一旦发现相等就返回对应数据的下标； ( 3 ) (3)(3) 当数组遍历完还是找不到，说明这个数据肯定是不存在的，直接返回 − 1 -1−1。 3）获取长度 获取 数组的长度 指的是查询当前有多少元素。可以直接用结构体的内部变量。C语言代码实现如下： 1234DataType SeqListGetLength(struct SeqList *sq) &#123; return sq-&gt;length; &#125;123 2、可写接口1）插入 插入接口定义为：在数组的第 k kk 个元素前插入一个数 v vv。由于数组是连续存储的，那么从 k kk 个元素往后的元素都必须往后移动一位，当 k = 0 k=0k=0 时，所有元素都必须移动，所以最坏时间复杂度为 O ( n ) O(n)O(n)。C语言代码实现如下： 12345678910111213int SeqListInsert(struct SeqList *sq, int k, DataType v) &#123; int i; if(sq-&gt;length == MAXN) &#123; return 0; // (1) &#125; for(i = sq-&gt;length; i &gt; k; --i) &#123; sq-&gt;data[i] = sq-&gt;data[i-1]; // (2) &#125; sq-&gt;data[k] = v; // (3) sq-&gt;length ++; // (4) return 1; // (5) &#125;123456789101112 ( 1 ) (1)(1) 当元素个数已满时，返回 0 00 代表插入失败； ( 2 ) (2)(2) 从第 k kk 个数开始，每个数往后移动一个位置，注意必须逆序； ( 3 ) (3)(3) 将第 k kk 个数变成 v vv； ( 4 ) (4)(4) 插入了一个数，数组长度加一； ( 5 ) (5)(5) 返回 1 11 代表插入成功； 2）删除 删除接口定义为：将数组的第 k kk 个元素删除。由于数组是连续存储的，那么第 k kk 个元素删除，往后的元素势必要往前移动一位，当 k = 0 k=0k=0 时，所有元素都必须移动，所以最坏时间复杂度为 O ( n ) O(n)O(n)。C语言代码实现如下： 123456789101112int SeqListDelete(struct SeqList *sq, int k) &#123; int i; if(sq-&gt;length == 0) &#123; return 0; // (1) &#125; for(i = k; i &lt; sq-&gt;length - 1; ++i) &#123; sq-&gt;data[i] = sq-&gt;data[i+1]; // (2) &#125; sq-&gt;length --; // (3) return 1; // (4) &#125;1234567891011 ( 1 ) (1)(1) 返回0代表删除失败； ( 2 ) (2)(2) 从前往后； ( 3 ) (3)(3) 数组长度减一； ( 4 ) (4)(4) 返回1代表删除成功； 三、优缺点1、优点 1）无须为表示表中元素逻辑关系而增加额外的存储空间； 2）随机存取元素时可以达到 O ( 1 ) O(1)O(1)，效率高； 2、缺点 1）插入和删除时需要移动大量元素； 2）必须一开始就确定存储空间的容量； 四、数组相关算法1、线性枚举1）问题描述 给定一个长度为 n ( 1 ≤ n ≤ 1 0 5 ) n(1 \\le n \\le 10^5)n(1≤n≤105) 的整型数组，求所有数组元素中的其中的最小值。 2）动图演示 3）示例说明 蓝色的数据代表的是数组数据，红色的数据代表当前枚举到的数据，这样就可以遍历所有的数据进行逻辑处理了。 4）算法描述 遍历数组，进行条件判断，条件满足则执行逻辑。这里的条件就是 枚举到的数 是否小于 当前最小值，执行逻辑为 将 当前枚举到的数 赋值给 当前最小值； 5）源码详解12345678910int findMin(int* nums, int numsSize)&#123; int i, min = 100000; for(i = 0; i &lt; numsSize; ++i) &#123; // (1) if(nums[i] &lt; min) &#123; // (2) min = nums[i]; &#125; &#125; return min; // (3)&#125;123456789 ( 1 ) (1)(1) 遍历数组中所有的数； ( 2 ) (2)(2) 如果 当前枚举到的数 比记录的变量min小，则将它赋值给min；否则，不做任何处理； ( 3 ) (3)(3) 最后，min中存储的就是整个数组的最小值。 2、前缀和差分1）问题描述 给定一个 n ( n ≤ 1 0 5 ) n (n \\le 10^5)n(n≤105) 个元素的整型数组 a i aia**i，再给出 m ( m ≤ 1 0 5 ) m(m \\le 10^5)m(m≤105) 次询问，每次询问是一个区间 [ l , r ] [l, r][l,r]，求 h ( l , r ) = ∑ k = l r a k h(l,r) = \\sum{k=l}^r a_kh(l,r)=∑k=lra**k 2）动图演示 3）样例分析 如上图所示，只需要记录一个前缀和，然后就可以通过一次减法将区间的值计算出来。时间复杂度 O ( 1 ) O(1)O(1)。这种就是差分的思想。 4）算法描述 第一个枚举，利用一个数组sum，存储前 i ii 个元素的和。 第二个枚举，读入 m mm 组数据 l , r l, rl,r，对每组数据，通过 O ( 1 ) O(1)O(1) 获取答案，即 s u m r − s u m l − 1 sumr - sum{l-1}sum**r​−sum**l−1​。 5）源码详解123456789101112131415161718int sum[maxn];int* prefixSum(int* nums, int numsSize, int m, int *l, int *r)&#123; int i; int *ret; for(i = 0; i &lt; numsSize; ++i) &#123; sum[i] = nums[i]; if(i) sum[i] += sum[i-1]; // (1) &#125; ret = (int *) malloc( m * sizeof(int) ); // (2) for(i = 0; i &lt; m; ++i) &#123; int leftsum = l[i]==0? 0 : sum[l[i]-1]; // (3) int rightsum = sum[r[i]]; ret[i] = rightsum - leftsum; // (4) &#125; return ret;&#125;1234567891011121314151617 ( 1 ) (1)(1) 计算前缀和； ( 2 ) (2)(2) 需要返回的数组； ( 3 ) (3)(3) 这里是为了防止数组下标越界； ( 4 ) (4)(4) 核心 O ( 1 ) O(1)O(1) 的差分计算； 3、双指针1）问题描述 给定一个长度为 n ( 1 ≤ n ≤ 1 0 7 ) n (1 \\le n \\le 10^7)n(1≤n≤107) 的字符串 s ss，求一个最长的满足所有字符不重复的子串。 2）动图演示 3）样例说明 维护两个指针 i ii 和 j jj，区间 [ i , j ] [i, j][i,j] 内的子串，应该时刻保持其中所有字符不重复，一旦发现重复字符，就需要自增 i ii（即执行 i = i + 1 i = i + 1i=i+1）；否则，执行 j = j + 1 j = j + 1j=j+1，直到 j jj 不能再增加为止。 过程中，记录合法情况下 j − i + 1 j - i + 1j−i+1 的最大值。 4）算法描述 如上文所述，这种利用问题特性，通过两个指针，不断调整区间，从而求出问题最优解的算法就叫 “尺取法”，由于利用的是两个指针，所以又叫 “双指针” 算法。 这里 “尺” 的含义，主要还是因为这类问题，最终要求解的都是连续的序列（子串），就好比一把尺子一样，故而得名。 算法描述如下： 1）初始化 i = 0 i=0i=0, j = i − 1 j=i-1j=i−1，代表一开始 “尺子” 的长度为 0； 2）增加 “尺子” 的长度，即 j = j + 1 j = j +1j=j+1； 3）判断当前这把 “尺子” [ i , j ] [i, j][i,j] 是否满足题目给出的条件： 3.a）如果不满足，则减小 “尺子” 长度，即 i = i + 1 i = i + 1i=i+1，回到 3）； 3.b）如果满足，记录最优解，回到 2）； 上面这段文字描述的比较官方，其实这个算法的核心，只有一句话：满足条件时， j jj++；不满足条件时， i ii++； 如图所示，当区间 [ i , j ] [i, j][i,j] 满足条件时，用蓝色表示，此时 j jj 自增；反之闪红，此时 i ii 自增。 5）源码详解12345678910111213141516int getmaxlen(int n, char *str, int&amp; l, int&amp; r) &#123; int ans = 0, i = 0, j = -1, len; // 1) memset(h, 0, sizeof(h)); // 2) while (j++ &lt; n - 1) &#123; // 3) ++h[ str[j] ]; // 4) while (h[ str[j] ] &gt; 1) &#123; // 5) --h[ str[i] ]; ++i; &#125; len = j - i + 1; if(len &gt; ans) // 6) ans = len, l = i, r = j; &#125; return ans;&#125;123456789101112131415 1）初始化 i = 0, j = -1，代表 s [ i : j ] s[i:j]s[i:j] 为一个空串，从空串开始枚举； 2）需要维护一个哈希表，哈希表记录的是当前枚举的区间 s [ i : j ] s[i:j]s[i:j] 中每个字符的个数； 3）只推进子串的右端点； 4）在哈希表中记录字符的个数； 5）当 h[ str[j] ] &gt; 1满足时，代表出现了重复字符str[j]，这时候左端点 i ii 推进，直到没有重复字符为止； 6）记录当前最优解的长度 j - i + 1，更新； 这个算法执行完毕，我们就可以得到最长不重复子串的长度为 a n s ansans，并且 i ii 和 j jj 这两个指针分别只自增 n nn 次，两者自增相互独立，是一个相加而非相乘的关系，所以这个算法的时间复杂度为 O ( n ) O(n)O(n) 。 4、二分枚举1）问题描述 给定一个 n ( n ≤ 1 0 6 ) n(n \\le 10^6)n(n≤106) 个元素的有序整型数组和一个 t a r g e t targettarge**t 值，求在 O ( l o g 2 n ) O(log_2n)O(log2n) 的时间内找到值为 t a r g e t targettarge**t 的整型的数组下标，不存在则返回 -1。 2）动图演示 3）样例说明 需要找值为 5 55 的这个元素。 黄色箭头 代表都是左区间端点 l ll，红色箭头 代表右区间端点 r rr。蓝色的数据为数组数据，绿色的数字代表的是数组下标，初始化 l = 0 l = 0l=0，r = 7 r = 7r=7，由于数组有序，则可以直接折半，令 m i d = ( l + r ) / 2 = 3 mid = (l + r) / 2 = 3mid=(l+r)/2=3，则 5 55 一定落入区间 [ 0 , 3 ] [0, 3][0,3]，这时候令 r = 3 r = 3r=3，继续执行，直到 l &gt; r l &gt; rl&gt;r 结束迭代。 最后，当 m i d = 2 mid=2mid=2 时，找到数据 5。 4）算法描述 a）令初始情况下，数组下标从 0 开始，且数组长度为 n nn，则定义一个区间，它的左端点是 l = 0 l=0l=0，右端点是 r = n − 1 r = n-1r=n−1； b）生成一个区间中点 m i d = ( l + r ) / 2 mid = (l + r) / 2mid=(l+r)/2，并且判断 m i d midmid 对应的数组元素和给定的目标值的大小关系，主要有三种： b.1）目标值 等于 数组元素，直接返回 m i d midmid； b.2）目标值 大于 数组元素，则代表目标值应该出现在区间 [ m i d + 1 , r ] [mid+1, r][mid+1,r]，迭代左区间端点：l = m i d + 1 l = mid + 1l=mid+1； b.3）目标值 小于 数组元素，则代表目标值应该出现在区间 [ l , m i d − 1 ] [l, mid-1][l,mid−1]，迭代右区间端点：r = m i d − 1 r = mid - 1r=mid−1； c）如果这时候 l &gt; r l &gt; rl&gt;r，则说明没有找到目标值，返回 − 1 -1−1；否则，回到 b）继续迭代。 5）源码详解123456789101112131415int search(int *nums, int numsSize, int target) &#123; int l = 0, r = numsSize - 1; // (1) while(l &lt;= r) &#123; // (2) int mid = (l + r) &gt;&gt; 1; // (3) if(nums[mid] == target) &#123; return mid; // (4) &#125;else if(target &gt; nums[mid]) &#123; l = mid + 1; // (5) &#125;else if(target &lt; nums[mid]) &#123; r = mid - 1; // (6) &#125; &#125; return -1; // (7)&#125;1234567891011121314 ( 1 ) (1)(1) 初始化区间左右端点； ( 2 ) (2)(2) 一直迭代左右区间的端点，直到 左端点 大于 右端点 结束； ( 3 ) (3)(3) &gt;&gt; 1等价于除 2，也就是这里mid代表的是l和r的中点； ( 4 ) (4)(4) nums[mid] == target表示正好找到了这个数，则直接返回下标mid； ( 5 ) (5)(5) target &gt; nums[mid]表示target这个数在区间 [ m i d + 1 , r ] [mid+1, r][mid+1,r] 中，所以才有左区间赋值如下：l = mid + 1; ( 6 ) (6)(6) target &lt; nums[mid]表示target这个数在区间 [ l , m i d − 1 ] [l, mid - 1][l,mid−1] 中，所以才有右区间赋值如下：r = mid - 1; ( 7 ) (7)(7) 这一步呼应了 ( 2 ) (2)(2)，表示这不到给定的数，直接返回 -1； 5、三分枚举 三分枚举 类似 二分枚举 的思想，也是将区间一下子砍掉一块基本完全不可能的块，从而减小算法的时间复杂度。只不过 二分枚举 解决的是 单调性 问题。而 三分枚举 解决的是 极值问题。 6、插入排序1）问题描述 给定一个 n nn 个元素的数组，数组下标从 0 00 开始，采用「 插入排序 」将数组按照 「升序」排列。 2）动图演示 3）样例说明 图示 含义 ■ 的柱形 代表尚未排好序的数 ■ 的柱形 代表正在执行 比较 和 移动 的数 ■ 的柱形 代表已经排好序的数 ■ 的柱形 代表待执行插入的数 我们看到，首先需要将 「第二个元素」 和 「第一个元素」 进行 「比较」，如果 前者 小于等于 后者，则将 后者 进行向后 「移动」，前者 则执行插入； 然后，进行第二轮「比较」，即 「第三个元素」 和 「第二个元素」、「第一个元素」 进行 「比较」， 直到 「前三个元素」 保持有序 。 最后，经过一定轮次的「比较」 和 「移动」之后，一定可以保证所有元素都是 「升序」 排列的。 4）算法描述 整个算法的执行过程分以下几步： 1） 循环迭代变量 i = 1 → n − 1 i = 1 \\to n-1i=1→n−1； 2） 每次迭代，令 x = a [ i ] x = a[i]x=a[i]，j = i − 1 j = i-1j=i−1，循环执行比较 x xx 和 a [ j ] a[j]a[j]，如果产生 x ≤ a [ j ] x \\le a[j]x≤a[j] 则执行 a [ j + 1 ] = a [ j ] a[j+1] = a[j]a[j+1]=a[j]。然后执行 j = j + 1 j = j + 1j=j+1，继续执行 2）；否则，跳出循环，回到 1）。 5）源码详解12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;stdio.h&gt;int a[1010];void Input(int n, int *a) &#123; for(int i = 0; i &lt; n; ++i) &#123; scanf(&quot;%d&quot;, &amp;a[i]); &#125;&#125;void Output(int n, int *a) &#123; for(int i = 0; i &lt; n; ++i) &#123; if(i) printf(&quot; &quot;); printf(&quot;%d&quot;, a[i]); &#125; puts(&quot;&quot;);&#125;void InsertSort(int n, int *a) &#123; // (1) int i, j; for(i = 1; i &lt; n; ++i) &#123; int x = a[i]; // (2) for(j = i-1; j &gt;= 0; --j) &#123; // (3) if(x &lt;= a[j]) &#123; // (4) a[j+1] = a[j]; // (5) &#125;else break; // (6) &#125; a[j+1] = x; // (7) &#125;&#125; int main() &#123; int n; while(scanf(&quot;%d&quot;, &amp;n) != EOF) &#123; Input(n, a); InsertSort(n, a); Output(n, a); &#125; return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142 ( 1 ) (1)(1) void InsertSort(int n, int *a)为 插入排序 的实现，代表对a[]数组进行升序排序。 ( 2 ) (2)(2) 此时a[i]前面的 i-1个数都认为是排好序的，令x = a[i]； ( 3 ) (3)(3) 逆序的枚举所有的已经排好序的数； ( 4 ) (4)(4) 如果枚举到的数a[j]比需要插入的数x大，则当前数往后挪一个位置； ( 5 ) (5)(5) 执行挪位置的 O ( 1 ) O(1)O(1) 操作； ( 6 ) (6)(6) 否则，跳出循环； ( 7 ) (7)(7) 将x插入到合适位置； 7、选择排序1）问题描述 给定一个 n nn 个元素的数组，数组下标从 0 00 开始，采用「 选择排序 」将数组按照 「升序」排列。 2）动图演示 3）样例说明 图示 含义 ■ 的柱形 代表尚未排好序的数 ■ 的柱形 代表正在执行 比较 的数 ■ 的柱形 代表已经排好序的数 ■ 的柱形 有两种：1、记录最小元素 2、执行交换的元素 我们发现，首先从 「第一个元素」 到 「最后一个元素」 中选择出一个 「最小的元素」，和 「第一个元素」 进行 「交换」； 然后，从 「第二个元素」 到 「最后一个元素」 中选择出一个 「最小的元素」，和 「第二个元素」 进行 「交换」。 最后，一定可以保证所有元素都是 「升序」 排列的。 4）算法描述 整个算法的执行过程分以下几步： 1） 循环迭代变量 i = 0 → n − 1 i = 0 \\to n-1i=0→n−1； 2） 每次迭代，令 m i n = i min = imin=i，j = i + 1 j = i+1j=i+1； 3） 循环执行比较 a [ j ] a[j]a[j] 和 a [ m i n ] a[min]a[min]，如果产生 a [ j ] &lt; a [ m i n ] a[j] \\lt a[min]a[j]&lt;a[min] 则执行 m i n = j min = jmin=j。执行 j = j + 1 j = j + 1j=j+1，继续执行这一步，直到 j = = n j == nj==n； 4） 交换 a [ i ] a[i]a[i] 和 a [ m i n ] a[min]a[min]，回到 1）。 5）源码详解12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;stdio.h&gt;int a[1010];void Input(int n, int *a) &#123; for(int i = 0; i &lt; n; ++i) &#123; scanf(&quot;%d&quot;, &amp;a[i]); &#125;&#125;void Output(int n, int *a) &#123; for(int i = 0; i &lt; n; ++i) &#123; if(i) printf(&quot; &quot;); printf(&quot;%d&quot;, a[i]); &#125; puts(&quot;&quot;);&#125;void Swap(int *a, int *b) &#123; int tmp = *a; *a = *b; *b = tmp;&#125;void SelectionSort(int n, int *a) &#123; // (1) int i, j; for(i = 0; i &lt; n - 1; ++i) &#123; // (2) int min = i; // (3) for(j = i+1; j &lt; n; ++j) &#123; // (4) if(a[j] &lt; a[min]) &#123; min = j; // (5) &#125; &#125; Swap(&amp;a[i], &amp;a[min]); // (6) &#125;&#125;int main() &#123; int n; while(scanf(&quot;%d&quot;, &amp;n) != EOF) &#123; Input(n, a); SelectionSort(n, a); Output(n, a); &#125; return 0;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 ( 1 ) (1)(1) void SelectionSort(int n, int *a)为选择排序的实现，代表对a[]数组进行升序排序。 ( 2 ) (2)(2) 从首元素个元素开始进行 n − 1 n-1n−1 次跌迭代。 ( 3 ) (3)(3) 首先，记录min代表当前第 i ii 轮迭代的最小元素的下标为 i ii。 ( 4 ) (4)(4) 然后，迭代枚举第 i + 1 i+1i+1 个元素到 最后的元素。 ( 5 ) (5)(5) 选择一个最小的元素，并且存储下标到min中。 ( 6 ) (6)(6) 将 第 i ii 个元素 和 最小的元素 进行交换。 8、冒泡排序1）问题描述 给定一个 n nn 个元素的数组，数组下标从 0 00 开始，采用「 冒泡排序 」将数组按照 「升序」排列。 2）动图演示 3）样例说明 图示 含义 ■ 的柱形 代表尚未排好序的数 ■ 的柱形 代表正在执行比较的两个数 ■ 的柱形 代表已经排好序的数 我们看到，首先需要将 「第一个元素」 和 「第二个元素」 进行 「比较」，如果 前者 大于 后者，则进行 「交换」，然后再比较 「第二个元素」 和 「第三个元素」 ，以此类推，直到 「最大的那个元素」 被移动到 「最后的位置」 。 然后，进行第二轮「比较」，直到 「次大的那个元素」 被移动到 「倒数第二的位置」 。 最后，经过一定轮次的「比较」 和 「交换」之后，一定可以保证所有元素都是 「升序」 排列的。 4）算法描述 整个算法的执行过程分以下几步： 1） 循环迭代变量 i = 0 → n − 1 i = 0 \\to n-1i=0→n−1； 2） 每次迭代，令 j = i j = ij=i，循环执行比较 a [ j ] a[j]a[j] 和 a [ j + 1 ] a[j+1]a[j+1]，如果产生 a [ j ] &gt; a [ j + 1 ] a[j] \\gt a[j+1]a[j]&gt;a[j+1] 则交换两者的值。然后执行 j = j + 1 j = j + 1j=j+1，这时候对 j jj 进行判断，如果 j ≥ n − 1 j \\ge n-1j≥n−1，则回到 1），否则继续执行 2）。 5）源码详解123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;stdio.h&gt;int a[1010];void Input(int n, int *a) &#123; for(int i = 0; i &lt; n; ++i) &#123; scanf(&quot;%d&quot;, &amp;a[i]); &#125;&#125;void Output(int n, int *a) &#123; for(int i = 0; i &lt; n; ++i) &#123; if(i) printf(&quot; &quot;); printf(&quot;%d&quot;, a[i]); &#125; puts(&quot;&quot;);&#125;void Swap(int *a, int *b) &#123; int tmp = *a; *a = *b; *b = tmp;&#125;void BubbleSort(int n, int *a) &#123; // (1) bool swapped; int last = n; do &#123; swapped = false; // (2) for(int i = 0; i &lt; last - 1; ++i) &#123; // (3) if(a[i] &gt; a[i+1]) &#123; // (4) Swap(&amp;a[i], &amp;a[i+1]); // (5) swapped = true; // (6) &#125; &#125; --last; &#125;while (swapped);&#125; int main() &#123; int n; while(scanf(&quot;%d&quot;, &amp;n) != EOF) &#123; Input(n, a); BubbleSort(n, a); Output(n, a); &#125; return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950 ( 1 ) (1)(1) void BubbleSort(int n, int *a)为冒泡排序的实现，代表对a[]数组进行升序排序。 ( 2 ) (2)(2) swapped标记本轮迭代下来，是否有元素产生了交换。 ( 3 ) (3)(3) 每次冒泡的结果，会执行last的自减，所以待排序的元素会越来越少。 ( 4 ) (4)(4) 如果发现两个相邻元素产生逆序，则将它们进行交换。保证右边的元素一定不比左边的小。 ( 5 ) (5)(5) swap实现了元素的交换，这里需要用&amp;转换成地址作为传参。 ( 6 ) (6)(6) 标记更新。一旦标记更新，则代表进行了交换，所以下次迭代必须继续。 关于 「 顺序表 」 的内容到这里就结束了。 有关🌳《画解数据结构》🌳 的源码均开源，链接如下：《画解数据结构》","categories":[],"tags":[]},{"title":"c++快速入门","slug":"c-快速入门","date":"2022-05-02T10:02:11.000Z","updated":"2022-05-10T15:58:28.728Z","comments":true,"path":"2022/05/02/c-快速入门/","link":"","permalink":"http://example.com/2022/05/02/c-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","excerpt":"","text":"c++标准输入输出 头文件iostream cout是标准输出流变量 &lt;&lt;是运算符 加入o是输出流对象 x是一个数据 0&lt;&lt;x cout是标准名字空间std的一个名字 必须加上名字空间限定std::cout 12345678910111213141516171819202122#include&lt;iostream&gt;#include&lt;fstream&gt;using namespace std;using std::cout;using std::endl;using std::cin;int main() &#123; cout &lt;&lt; &quot;HELLO WORLD\\n&quot;; int a; cin &gt;&gt; a; cout &lt;&lt; &quot;a\\n&quot;&lt;&lt;a; ofstream oF(&quot;text.txt&quot;); oF &lt;&lt; 3.14 &lt;&lt; &quot;&quot; &lt;&lt; &quot;helllo world&quot;; oF.close(); ifstream iF(&quot;text.txt&quot;); double d; string str; iF &gt;&gt; d &gt;&gt; str; cout &lt;&lt; d &lt;&lt; &quot; &quot; &lt;&lt; str &lt;&lt; endl; return 0;&#125; 引用变量和引用形参12345678#include&lt;instream&gt;int main()&#123; double d; int &amp;r=d; cout&lt; &#125; 引用变量是其他变量的别名，如同一个人的外号或者小名 既然是引用，定义比那两点时候就必须指明其引用是哪个变量 1int a=3;int &amp;r=a; 函数的引用形参：引用实参 1234567swap(a,b)swap(int &amp;x,int&amp;y)&#123;int t=x;x=y;y=t;&#125; 函数的默认形参 函数形参可以有默认值 1void print(char ch,int n=1); 默认形参必须在非默认形参右边 1add(y,x=1.z=3); 123456789101112131415161718192021222324#include&lt;iostream&gt;using namespace std;void print(char ch, int n = 3) &#123; for (int i = 0; i &lt; n; i++) &#123; cout &lt;&lt; ch; &#125; cout &lt;&lt; &quot;\\n&quot;;&#125;int main() &#123; print(&#x27;A&#x27;, 1); print(&#x27;A&#x27;, 2); print(&#x27;A&#x27;, 3); print(&#x27;A&#x27;);&#125;/*AAAAAAAAA*/ 函数重载123456789101112//函数重载//c++允许作用域里面有同名函数，只要形参不同int add(int a, int b) &#123; return a + b;&#125;double add(double a, double b) &#123; return a + b;&#125;int main() &#123; cout &lt;&lt; add(11, 11)&lt;&lt;&quot; &quot;; cout &lt;&lt; add(1.22, 12.1);&#125; 函数模板通用算法，函数模板 也叫泛型算法 123456789template&lt;typename T&gt;T add(T a, T b) &#123; return a + b;&#125;int main() &#123; cout &lt;&lt; add&lt;int&gt;(1, 1)&lt;&lt;endl; cout &lt;&lt; add&lt;string&gt;(&quot;hello&quot;, &quot; world&quot;) &lt;&lt; endl; cout &lt;&lt; add&lt;double&gt;(1.1, 23.1) &lt;&lt; endl;&#125; string是一个用户定义类型 表示的是符串 1string s=&quot;hello&quot;,s2(&quot;world&quot;); 12345678int main() &#123; string s = &quot;hello&quot;, s2(&quot;world&quot;); cout &lt;&lt; s.size() &lt;&lt; endl; string s3 = s.substr(1, 3); cout &lt;&lt; s3 &lt;&lt; endl; string s4 = s + &quot; &quot; + s2; cout &lt;&lt; s4 &lt;&lt; endl;&#125; 12//索引修改// vector向量类似数组可以动态增长 是一个类模板 123456789101112#include&lt;vector&gt;#include&lt;iostream&gt;using namespace std;int main() &#123; vector&lt;int&gt; v=&#123;1,22,2,1&#125;; v.push_back(23);//+ cout &lt;&lt; v[4]; v.pop_back(); //报错cout &lt;&lt; v[4]; v.resize(2);&#125; 动态内存1234567891011121314151617int main() &#123; int* p = new int; *p = 3; cout &lt;&lt; p&lt;&lt;&#x27;\\t&#x27;&lt;&lt;*p; cout &lt;&lt; &#x27;\\n&#x27;; int n; cin &gt;&gt; n; int* arr = new int[n]; for (int i = 0; i &lt; n; i++) &#123; arr[i] = i; &#125; for (int i = 0; i &lt; n; i++) &#123; cout &lt;&lt; arr[i]&lt;&lt;&#x27;\\t&#x27;; &#125;&#125; 面向对象类与对象1234567891011121314151617181920212223242526#include &lt;iostream&gt; #include &lt;string&gt; using namespace std;class student &#123;public: //接口 void print() &#123; cout &lt;&lt; this-&gt;name &lt;&lt; &quot; &quot; &lt;&lt; this-&gt;score &lt;&lt; endl; &#125; string get_name() &#123; return name; &#125; double get_score() &#123; return score; &#125; void set_name(string n) &#123; name = n; &#125; void set_score(double s) &#123; score = s; &#125;private: string name; double score;&#125;;int main() &#123; student stu; stu.set_name(&quot;Li Ping&quot;); stu.set_score(78.5); stu.print(); // print(&amp;stu); cout &lt;&lt; stu.get_name() &lt;&lt; &quot; &quot; &lt;&lt; stu.get_score() &lt;&lt; endl;&#125; 继承访问控制和继承派生类可以访问基类中所有的非私有成员。因此基类成员如果不想被派生类的成员函数访问，则应在基类中声明为 private。 我们可以根据访问权限总结出不同的访问类型，如下所示： 访问 public protected private 同一个类 yes yes yes 派生类 yes yes no 外部的类 yes no no 123456789101112131415161718192021222324252627#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;class Shape &#123;public: void setWidth(int w) &#123; width = w; &#125; void setHeight(int h) &#123; height = h; &#125;protected: int width; int height;&#125;;class Rectangle :public Shape &#123;//继承语法public: int getArea() &#123; return (width * height); &#125;&#125;;int main() &#123; Rectangle Rect; Rect.setHeight(5); Rect.setWidth(6); cout &lt;&lt; Rect.getArea();&#125; 函数重载123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;using namespace std; class printData&#123; public: void print(int i) &#123; cout &lt;&lt; &quot;整数为: &quot; &lt;&lt; i &lt;&lt; endl; &#125; void print(double f) &#123; cout &lt;&lt; &quot;浮点数为: &quot; &lt;&lt; f &lt;&lt; endl; &#125; void print(char c[]) &#123; cout &lt;&lt; &quot;字符串为: &quot; &lt;&lt; c &lt;&lt; endl; &#125;&#125;; int main(void)&#123; printData pd; // 输出整数 pd.print(5); // 输出浮点数 pd.print(500.263); // 输出字符串 char c[] = &quot;Hello C++&quot;; pd.print(c); return 0;&#125; function initialize() { var mapProp = { center:new google.maps.LatLng(51.508742,-0.120850), zoom:5, mapTypeId:google.maps.MapTypeId.ROADMAP }; var map=new google.maps.Map(document.getElementById(\"googleMap\"),mapProp); } google.maps.event.addDomListener(window, 'load', initialize);","categories":[],"tags":[]},{"title":"git出现的问题","slug":"git出现的问题","date":"2022-04-11T15:22:08.000Z","updated":"2022-04-29T23:52:24.654Z","comments":true,"path":"2022/04/11/git出现的问题/","link":"","permalink":"http://example.com/2022/04/11/git%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"今天学习使用vscode的源代码管理时候同步时出现了fatal: unable to access ‘xxxx: Failed to connect to github.com port 443 after 21098 ms: Timed out这个错误。","text":"今天学习使用vscode的源代码管理时候同步时出现了fatal: unable to access ‘xxxx: Failed to connect to github.com port 443 after 21098 ms: Timed out这个错误。 提示含义是通过443端口连接github.com错误。 解决办法为 123git config --global --unset http.proxy#删除配置git config --global http.proxy 127.0.0.1:xxxx#根据自己的代理插件设置全局端口git config --local http.proxy 127.0.0.1:xxxx #为某个 git 项目单独设置代理 比如我用某个小猫默认的7080","categories":[{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"}],"tags":[{"name":"踩过的坑","slug":"踩过的坑","permalink":"http://example.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"Java SE","slug":"java基础学习笔记","date":"2022-02-21T05:47:24.000Z","updated":"2022-06-23T12:25:00.682Z","comments":true,"path":"2022/02/21/java基础学习笔记/","link":"","permalink":"http://example.com/2022/02/21/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"DOS 12345cd testcopy nul a.txtecho 123&gt;a.txtdel a.txt 变量constant 常量1final type barName=valie; 变量的分类局部变量 成员变量 静态变量 局部变量在方法语句块 成员变量 对象 类内部，方法外面 从属对象 会自动默认初始化 静态变量 类内部 static修饰 从属类 primitive data type 整数byte 一字节 -127-127 short 2字节 -2^15-2^15-1 int 4字节 2^31-2^32-1 long 8字节 -2^63 十进制 八进制以0开头 十六进制以0x 0X 二进制0b oB开头 floating point numberfloat四字节 double八字节 字符型booleantrue false 一个字节或者四个字节 运算符 强制转换类 cast（type）var Scanner处理键盘输入1234567891011121314import java.util.Scanner;public class Scanner1 &#123; public static void main(String[] args) &#123; Scanner s =new Scanner(System.in); System.out.println(&quot;请输入用户名&quot;); String uname =s.nextLine(); System.out.println(&quot;输入你的年龄&quot;); int age=s.nextInt(); System.out.println(&quot;用户名&quot;+uname); System.out.println(&quot;年龄&quot;+age); &#125;&#125; 控制语句APIstring123456String name=new string(&quot;name&quot;);String name=&quot;name&quot;;char[]value=&#123;&#x27;a&#x27;,&#x27;b,&#x27;c&#125;;String s3=new String(value);byte[]bytes=&#123;97,98,99,100&#125;;String s4=new String(bytes); 统计单词数量123456789101112131415161718192021222324import java.util.Arrays;import java.util.Scanner;public class HelloWorld &#123; public static void main(String[] args) &#123; String str=&quot;hello world abc hello hello hello hello hello&quot;; System.out.println(); HelloWorld he=new HelloWorld(); int count=he.wordCount(str,&quot;hello&quot;); System.out.println(count);; &#125; public int wordCount(String art,String word)&#123; //1先把文章打散成数组 String[] words = art.split(&quot; &quot;); int res=0; for (int i = 0; i &lt; words.length; i++) &#123; if(words[i].equalsIgnoreCase(word))&#123; res++; &#125; &#125; return res; &#125;&#125; scannerequals1234if(name.equals(name_1)&amp;&amp;password_1.equals(password))&#123; System.out.println(&quot;成功&quot;); break; &#125; 遍历charAt123for (int i = 0; i &lt; line.length(); i++) &#123; System.out.println(line.charAt(i)); &#125; stringBuilder的添加和反转append和reverse 12345678910111213 StringBuilder sb=new StringBuilder(); sb.append(&quot;hello&quot;); sb.append(&quot;java&quot;); System.out.println(sb); sb.reverse(); System.out.println(sb);//hellojava//avajollehstringbuilder转为string string s =sb.tostring（）； string转为stringbuilder StringBuilder sb=new StringBuilder(s); IDEA1234567891011121314快捷和补全单行ctrl+/多行ctrl+shitft+/CTRL+alt+L格式化快速生成main（）方法 psvm输入语句sout内容辅助CTRL+shifr+space\\自动生成构造器insert+alt查看错误alt+enter看源码ctrl+左键 数组Array数组必须初始化使用 静态 type name = new type【length】 123int a[] =new int [5];int [] arr =new int [5];int []arr=&#123;551,2,377&#125;; 数组的扩容 12345678910int[] a=&#123;1,2,3&#125;;int[] temp=new int [a.length*2];for (int i = 0; i &lt; a.length; i++) &#123; temp[i]=a[i];&#125;a=temp;a[a.length-2]=11;for (int i = 0; i &lt; a.length; i++) &#123; System.out.println(a[i]);&#125; 双指针思想12345678910111213141516171819202122int a[]=&#123;12,231,3421,33,3131,234&#125;;int b[]=&#123;321,31,345,23,54,7676&#125;; while (i&lt;a.length||j&lt;b.length)&#123; if(i==a.length)&#123; c[i+j]=b[j]; j++;continue; &#125; if(j==b.length)&#123; c[i+j]=a[i]; i++;continue; &#125; if(a[i]&gt;b[j])&#123; c[i+j]=b[j]; j++; &#125;else&#123; c[i+j]=a[i]; i++; &#125;&#125; arrayList 集合（超级数组）123456789101112 ArrayList&lt;String&gt; array =new ArrayList&lt;&gt;(); System.out.println(array); array.add(&quot;hello world&quot;); array.add(&quot;java&quot;);array.add(&quot;java good&quot;); System.out.println(array); array.add(1,&quot;syr&quot;); System.out.println(array); [][hello world, java, java good][hello world, syr, java, java good] arraylist基本常用方法 public boolean remove(obiect o) 删除指定元素 public E remove(int index) 删除索引元素，返回被删元素 public E set(int index,E element) 修改，返回被修改的元素 public E get（int index） 返沪索引元素 public int size（） 返回集合的元素 链表方法methodJava方法是语句的集合，它们在一起执行一个功能。 方法是解决一类问题的步骤的有序组合 方法包含于类或对象中 方法在程序中被创建，在其他地方被引用 1234定义 public static type name()&#123; &#125; 方法重载overload 多个方法在一个类 方法具有相同的方法名 返回类型或者数量不同 一个类中定义多个名称相同，但是参数泪飙不同的的方法 123456789101112131415161718192021public class fangfa &#123; public static void main(String[] args) &#123; System.out.println(sum(123,2131)); System.out.println(sum(12.1,23.1)); System.out.println(sum(123,231,32)); &#125; //int add public static int sum(int a,int b)&#123; return a+b; &#125; public static double sum(double a,double b)&#123; return a+b; &#125; public static int sum(int a,int b,int c)&#123; return a+b+c; &#125;&#125;//225435.2386 可变参数12345public class Text&#123; public int plus(int...nums)&#123; return &#125;&#125; 递归StackOverflowError 大量占用系统堆栈 包装类和自动拆装箱1 类和对象（Object Oriented Programing）类是java基本的组成结构 类的定义123456public class car&#123; //每个文件必须有一个public class，名字与文件名相同&#125;class tyre&#123;&#125;//可以定义多个classclass engine&#123;&#125;class seat&#123;&#125; 对于一个类来说有三种成员 field属性 成员变量属性用于定义这个类或者更类对象包含的数据或者静态特征 修饰符 type name=默认 method方法方法从属于类和对象 修饰符 返回类型 name（）{ 构造方法 构造器 constructor构造器能用于对象的初始化，而不是创建对象 构造器用new关键字调用 构造器虽然没有返回值，但不能定义返回值类型 如果没有定义构造器，则编译器会自动定义一个无参的构造方法，如果一定义的则编译器不会自动添加 构造器的方法名必须与类名字相同 课堂练习可以生成具有特定坐标的点对象 提供可以计算点到另外一点距离的方法 12345678910111213141516171819package 第五章面向对象.构造器.点;public class Point &#123; double x,y; Point (double _x,double _y)&#123; x=_x;y=_y; &#125; public double getDistance(Point p)&#123; return Math.sqrt((x-p.x)*(y-p.y)+(y-p.y)*(y-p.y)); &#125; public static void main(String[] args) &#123; Point p1=new Point(3.0,4.0); Point origin =new Point(0.0,0.0); System.out.println(p1.getDistance(origin)); &#125;&#125; 构造方法的重载jvm虚拟机 栈的特点 堆的特点 Garbage Collection垃圾回收机制垃圾回收过程 发现无用的对象 回收无用对象占用内存空间 无用对象为没有任何引用 算法1引用计数法 通用的分代垃圾回收机制 内存泄漏创建大量的无用对象 1234string str=&quot;&quot;;for(int i=0;i&lt;11000:i++)&#123;str+=i;//相当于产生了11000个string对象&#125; 静态集合类的使用hassomap vector list等这些最容易出现，这些静态变量的生命周期 各种连接对象 监听器使用不当 可以用system.gc()但是只是通知jvm object可以用finalize方法，是java给程序员的 this关键词就是当前对象的地址 this用法 普通方法中 this总是指向调用该方法的对象 构造方法中，this总是指向正要初始化的对象 static 静态初始化块构造方法用于对象的普通属性的初始化 静态初始快中，用于初始化类，初始化静态属性 静态初始化快中不能直接访问非static成员 变量分类 包机制package import 相当于文件夹对文件的作用，用于管理类，解决类的重名问题 面向对象三大特征继承extends代码复用，方便建模 1234567891011121314151617181920212223242526272829package 第五章面向对象.extends1;public class text &#123; public static void main(String[] args) &#123; Student s1 =new Student(&quot;songyuran&quot;,11,&quot;CS&quot;); s1.xuexi(); &#125;&#125;class Persin&#123; String name; int height; public void rest()&#123; System.out.println(&quot;xiuxi&quot;); &#125;&#125;class Student extends Persin&#123; String major; public void xuexi()&#123; System.out.println(&quot;xuexi&quot;); rest(); System.out.println(this.name); &#125; public Student(String name,int height,String major)&#123; this.name=name; this.height=height; this.major=major; &#125;&#125; instanceof判断类型12s1 instanceof Person//trues1 instanceof Student//true 父类 又叫超类 基类 子类：派生类 接口有多继承 方法重写override子类重写父亲的方法，替换父类行为，重写是实现多态的必要条件 == 方法名字 形参列表 《=返回值类型和声明异常类型，子类小于等于父类 》=子类大于父类 final关键词 修饰变量 修饰方法 不可被子类重写，但是可以重载，final class a{} 修饰类 不可被继承 组合组合比较灵活，继承只能有一个父类，组合可以有多个属性 封装三大特征之一 提高安全 复用 高内聚低耦合 封装的实现关键词访问限制修饰符 1234567891011package text.b;public class Test &#123; public static void main(String[] args) &#123; User u=new User(99,&quot;宋宇然&quot;,true); System.out.println(u.getId()); System.out.println(u.getName()); System.out.println(u.isMan()); &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344package text.b;public class User &#123; private int id; private String name; private boolean man; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public boolean isMan() &#123; return man; &#125; public void setMan(boolean man) &#123; this.man = man; &#125; public void printUserInfo()&#123; System.out.println(id); System.out.println(man); System.out.println(name); &#125; public User(int id, String name, boolean man) &#123; this.id = id; this.name = name; this.man = man; &#125;&#125; 多态polymorphism同一种方法调用 不同对象行为完全不同 123456789101112131415161718public class Animal&#123; public void shout()&#123; System.out.println(&quot;叫了一声&quot;); &#125;&#125;class Dog extends Animal&#123; public void shout()&#123; System.out.println(&quot;wangwang&quot;); &#125; public void seeDoor()&#123; System.out.println(&quot;see door&quot;); &#125;&#125;class Cat extends Animal&#123; public void shout()&#123; System.out.println(&quot;miaomiao&quot;); &#125;&#125; 123456789public class TestPolym&#123; public static void main(String[] args)&#123; animaCry(new DOg()); animalCry(new Cat()); &#125; static void animalCry(Animal a)&#123; a.shout(); &#125;&#125; 对象的转型casting父类引用指向子类叫向上转型，属于自动 反之 123456789101112public class TestPolym&#123; public static void main(String[] args)&#123; Animal animal=new Dog(); animal.shout(); //不能运行animal.seeDoor();需要强制转换 Dog d =(Dog)animal; d.seeDoor(); &#125; static void animalCry(Animal a)&#123; a.shout(); &#125;&#125; Object类所有类是Object的子类 hashCode1 toString返回地址1234567891011121314public class tosting &#123; String name; String pwd; @Override public String toString() &#123; return &quot;用户名&quot;+name+&quot;密码&quot;+pwd; &#125; public static void main(String[] args)&#123; tosting to=new tosting(); System.out.println(to.toString()); &#125;&#125; equals和====代表对方是否相同，type和地址 equals()比较内容相同 equals()默认比较两个对象的hashcode 可以重写equals 重写equals()1234567891011121314151617181920212223public class TestObject extends Object&#123; int id; String name; String pwd; public TestObject(int id,String name,String pwd)&#123; this.name=name; this.pwd=pwd; this.id=id; &#125; @Override public boolean equals(Object o)&#123; if(this==o)return true; if(o==null||getclass()!=o.getClass())return false; return id==that.id; &#125; public String toString()&#123;return &quot;用户名:&quot; +name+&quot;密码:&quot;+pwd;&#125; public static void main(String[] args)&#123; TestObject t= new TestObject(1001,&quot;zhangshan,&quot;123456); TestObject t2=new TestObject(1001,&quot;zhangwu,&quot;123123123); System.out.println(t.equals(t2)); &#125;&#125; supersuper可以看作直接父类对象的引用 在一个类中，若是构造方法第一行没有第哦啊用super或者this java默认调用 在子类的方法中，访问父类的成员变量 在子类的成语方法中，访问父亲的成员方法 在子类的构造方法中访问父类的构造方法 12public class test 抽象类和接口抽象方法和抽象类 抽象方法 ** 使用abstract修饰方法 没有方法体 只有声明 定义是一种规范 就是告诉子类必须要给抽象方法具体实现 抽象类 包含抽象方法的类叫抽象类 通过抽象类可以严格限制子类的设计，使得子类之间梗通用 接口interface是一组规范，所以类要遵守 1","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"Java One","slug":"ch1","date":"2022-02-21T05:47:24.000Z","updated":"2022-06-23T15:43:06.408Z","comments":true,"path":"2022/02/21/ch1/","link":"","permalink":"http://example.com/2022/02/21/ch1/","excerpt":"","text":"&lt;!doctype html&gt; html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:\"Lucida Console\",Consolas,\"Courier\",monospace; --title-bar-height:20px; } .mac-os-11 { --title-bar-height:28px; } html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; } body { margin: 0px; padding: 0px; height: auto; inset: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; } iframe { margin: auto; } a.url { word-break: break-all; } a:active, a:hover { outline: 0px; } .in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); } #write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 36px; } #write.first-line-indent p { text-indent: 2em; } #write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; } #write.first-line-indent li { margin-left: 2em; } .for-image #write { padding-left: 8px; padding-right: 8px; } body.typora-export { padding-left: 30px; padding-right: 30px; } .typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; } .typora-export .task-list-item input { pointer-events: none; } @media screen and (max-width: 500px) { body.typora-export { padding-left: 0px; padding-right: 0px; } #write { padding-left: 20px; padding-right: 20px; } .CodeMirror-sizer { margin-left: 0px !important; } .CodeMirror-gutters { display: none !important; } } #write li > figure:last-child { margin-bottom: 0.5rem; } #write ol, #write ul { position: relative; } img { max-width: 100%; vertical-align: middle; image-orientation: from-image; } button, input, select, textarea { color: inherit; font: inherit; } input[type=\"checkbox\"], input[type=\"radio\"] { line-height: normal; padding: 0px; } *, ::after, ::before { box-sizing: border-box; } #write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; } #write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; } p { line-height: inherit; } h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; } p { orphans: 4; } h1 { font-size: 2rem; } h2 { font-size: 1.8rem; } h3 { font-size: 1.6rem; } h4 { font-size: 1.4rem; } h5 { font-size: 1.2rem; } h6 { font-size: 1rem; } .md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; } .hidden { display: none; } .md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; } a { cursor: pointer; } sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; } sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; } #write input[type=\"checkbox\"] { cursor: pointer; width: inherit; height: inherit; } figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; } figure > table { margin: 0px; } tr { break-inside: avoid; break-after: auto; } thead { display: table-header-group; } table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; } table.md-table td { min-width: 32px; } .CodeMirror-gutters { border-right: 0px; background-color: inherit; } .CodeMirror-linenumber { user-select: none; } .CodeMirror { text-align: left; } .CodeMirror-placeholder { opacity: 0.3; } .CodeMirror pre { padding: 0px 4px; } .CodeMirror-lines { padding: 0px; } div.hr:focus { cursor: none; } #write pre { white-space: pre-wrap; } #write.fences-no-line-wrapping pre { white-space: pre; } #write pre.ty-contain-cm { white-space: normal; } .CodeMirror-gutters { margin-right: 4px; } .md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; } .md-fences-adv-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; } #write .md-fences.mock-cm { white-space: pre-wrap; } .md-fences.md-fences-with-lineno { padding-left: 0px; } #write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; } .md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; } .CodeMirror-line, twitterwidget { break-inside: avoid; } .footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; } .footnotes + .footnotes { margin-top: 0px; } .md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; } li div { padding-top: 0px; } blockquote { margin: 1rem 0px; } li .mathjax-block, li p { margin: 0.5rem 0px; } li blockquote { margin: 1rem 0px; } li { margin: 0px; position: relative; } blockquote > :last-child { margin-bottom: 0px; } blockquote > :first-child, li > :first-child { margin-top: 0px; } .footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; } #write .footnote-line { white-space: pre-wrap; } @media print { body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; } #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; } .typora-export * { -webkit-print-color-adjust: exact; } .typora-export #write { break-after: avoid; } .typora-export #write::after { height: 0px; } .is-mac table { break-inside: avoid; } .typora-export-show-outline .typora-export-sidebar { display: none; } } .footnote-line { margin-top: 0.714em; font-size: 0.7em; } a img, img a { cursor: pointer; } pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; } p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; } #write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; } p > .md-image:only-child { display: inline-block; width: 100%; } #write .MathJax_Display { margin: 0.8em 0px 0px; } .md-math-block { width: 100%; } .md-math-block:not(:empty)::after { display: none; } .MathJax_ref { fill: currentcolor; } [contenteditable=\"true\"]:active, [contenteditable=\"true\"]:focus, [contenteditable=\"false\"]:active, [contenteditable=\"false\"]:focus { outline: 0px; box-shadow: none; } .md-task-list-item { position: relative; list-style-type: none; } .task-list-item.md-task-list-item { padding-left: 0px; } .md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; } .math { font-size: 1rem; } .md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; } .md-toc-content { position: relative; margin-left: 0px; } .md-toc-content::after, .md-toc::after { display: none; } .md-toc-item { display: block; color: rgb(65, 131, 196); } .md-toc-item a { text-decoration: none; } .md-toc-inner:hover { text-decoration: underline; } .md-toc-inner { display: inline-block; cursor: pointer; } .md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; } .md-toc-h2 .md-toc-inner { margin-left: 2em; } .md-toc-h3 .md-toc-inner { margin-left: 4em; } .md-toc-h4 .md-toc-inner { margin-left: 6em; } .md-toc-h5 .md-toc-inner { margin-left: 8em; } .md-toc-h6 .md-toc-inner { margin-left: 10em; } @media screen and (max-width: 48em) { .md-toc-h3 .md-toc-inner { margin-left: 3.5em; } .md-toc-h4 .md-toc-inner { margin-left: 5em; } .md-toc-h5 .md-toc-inner { margin-left: 6.5em; } .md-toc-h6 .md-toc-inner { margin-left: 8em; } } a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; } .footnote-line a:not(.reversefootnote) { color: inherit; } .md-attr { display: none; } .md-fn-count::after { content: \".\"; } code, pre, samp, tt { font-family: var(--monospace); } kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; } .md-comment { color: rgb(162, 127, 3); opacity: 0.6; font-family: var(--monospace); } code { text-align: left; vertical-align: initial; } a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; } .os-windows.monocolor-emoji .md-emoji { font-family: \"Segoe UI Symbol\", sans-serif; } .md-diagram-panel > svg { max-width: 100%; } [lang=\"flow\"] svg, [lang=\"mermaid\"] svg { max-width: 100%; height: auto; } [lang=\"mermaid\"] .node text { font-size: 1rem; } table tr th { border-bottom: 0px; } video { max-width: 100%; display: block; margin: 0px auto; } iframe { max-width: 100%; width: 100%; border: none; } .highlight td, .highlight tr { border: 0px; } mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); } .md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; } .md-expand mark .md-meta { opacity: 0.3 !important; } mark .md-meta { color: rgb(0, 0, 0); } @media print { .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; } } .md-diagram-panel .messageText { stroke: none !important; } .md-diagram-panel .start-state { fill: var(--node-fill); } .md-diagram-panel .edgeLabel rect { opacity: 1 !important; } .md-fences.md-fences-math { font-size: 1em; } .md-fences-advanced:not(.md-focus) { padding: 0px; white-space: nowrap; border: 0px; } .md-fences-advanced:not(.md-focus) { background: inherit; } .typora-export-show-outline .typora-export-content { max-width: 1440px; margin: auto; display: flex; flex-direction: row; } .typora-export-sidebar { width: 300px; font-size: 0.8rem; margin-top: 80px; margin-right: 18px; } .typora-export-show-outline #write { --webkit-flex:2; flex: 2 1 0%; } .typora-export-sidebar .outline-content { position: fixed; top: 0px; max-height: 100%; overflow: hidden auto; padding-bottom: 30px; padding-top: 60px; width: 300px; } @media screen and (max-width: 1024px) { .typora-export-sidebar, .typora-export-sidebar .outline-content { width: 240px; } } @media screen and (max-width: 800px) { .typora-export-sidebar { display: none; } } .outline-content li, .outline-content ul { margin-left: 0px; margin-right: 0px; padding-left: 0px; padding-right: 0px; list-style: none; } .outline-content ul { margin-top: 0px; margin-bottom: 0px; } .outline-content strong { font-weight: 400; } .outline-expander { width: 1rem; height: 1.42857rem; position: relative; display: table-cell; vertical-align: middle; cursor: pointer; padding-left: 4px; } .outline-expander::before { content: \"?\"; position: relative; font-family: Ionicons; display: inline-block; font-size: 8px; vertical-align: middle; } .outline-item { padding-top: 3px; padding-bottom: 3px; cursor: pointer; } .outline-expander:hover::before { content: \"?\"; } .outline-h1 > .outline-item { padding-left: 0px; } .outline-h2 > .outline-item { padding-left: 1em; } .outline-h3 > .outline-item { padding-left: 2em; } .outline-h4 > .outline-item { padding-left: 3em; } .outline-h5 > .outline-item { padding-left: 4em; } .outline-h6 > .outline-item { padding-left: 5em; } .outline-label { cursor: pointer; display: table-cell; vertical-align: middle; text-decoration: none; color: inherit; } .outline-label:hover { text-decoration: underline; } .outline-item:hover { border-color: rgb(245, 245, 245); background-color: var(--item-hover-bg-color); } .outline-item:hover { margin-left: -28px; margin-right: -28px; border-left: 28px solid transparent; border-right: 28px solid transparent; } .outline-item-single .outline-expander::before, .outline-item-single .outline-expander:hover::before { display: none; } .outline-item-open > .outline-item > .outline-expander::before { content: \"?\"; } .outline-children { display: none; } .info-panel-tab-wrapper { display: none; } .outline-item-open > .outline-children { display: block; } .typora-export .outline-item { padding-top: 1px; padding-bottom: 1px; } .typora-export .outline-item:hover { margin-right: -8px; border-right: 8px solid transparent; } .typora-export .outline-expander::before { content: \"+\"; font-family: inherit; top: -1px; } .typora-export .outline-expander:hover::before, .typora-export .outline-item-open > .outline-item > .outline-expander::before { content: \"?\"; } .typora-export-collapse-outline .outline-children { display: none; } .typora-export-collapse-outline .outline-item-open > .outline-children, .typora-export-no-collapse-outline .outline-children { display: block; } .typora-export-no-collapse-outline .outline-expander::before { content: \"\" !important; } .typora-export-show-outline .outline-item-active > .outline-item .outline-label { font-weight: 700; } .md-inline-math-container mjx-container { zoom: 0.95; } .CodeMirror { height: auto; } .CodeMirror.cm-s-inner { background: inherit; } .CodeMirror-scroll { overflow: auto hidden; z-index: 3; } .CodeMirror-gutter-filler, .CodeMirror-scrollbar-filler { background-color: rgb(255, 255, 255); } .CodeMirror-gutters { border-right: 1px solid rgb(221, 221, 221); background: inherit; white-space: nowrap; } .CodeMirror-linenumber { padding: 0px 3px 0px 5px; text-align: right; color: rgb(153, 153, 153); } .cm-s-inner .cm-keyword { color: rgb(119, 0, 136); } .cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(34, 17, 153); } .cm-s-inner .cm-number { color: rgb(17, 102, 68); } .cm-s-inner .cm-def { color: rgb(0, 0, 255); } .cm-s-inner .cm-variable { color: rgb(0, 0, 0); } .cm-s-inner .cm-variable-2 { color: rgb(0, 85, 170); } .cm-s-inner .cm-variable-3 { color: rgb(0, 136, 85); } .cm-s-inner .cm-string { color: rgb(170, 17, 17); } .cm-s-inner .cm-property { color: rgb(0, 0, 0); } .cm-s-inner .cm-operator { color: rgb(152, 26, 26); } .cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(170, 85, 0); } .cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); } .cm-s-inner .cm-meta { color: rgb(85, 85, 85); } .cm-s-inner .cm-qualifier { color: rgb(85, 85, 85); } .cm-s-inner .cm-builtin { color: rgb(51, 0, 170); } .cm-s-inner .cm-bracket { color: rgb(153, 153, 119); } .cm-s-inner .cm-tag { color: rgb(17, 119, 0); } .cm-s-inner .cm-attribute { color: rgb(0, 0, 204); } .cm-s-inner .cm-header, .cm-s-inner.cm-header { color: rgb(0, 0, 255); } .cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(0, 153, 0); } .cm-s-inner .cm-hr, .cm-s-inner.cm-hr { color: rgb(153, 153, 153); } .cm-s-inner .cm-link, .cm-s-inner.cm-link { color: rgb(0, 0, 204); } .cm-negative { color: rgb(221, 68, 68); } .cm-positive { color: rgb(34, 153, 34); } .cm-header, .cm-strong { font-weight: 700; } .cm-del { text-decoration: line-through; } .cm-em { font-style: italic; } .cm-link { text-decoration: underline; } .cm-error { color: red; } .cm-invalidchar { color: red; } .cm-constant { color: rgb(38, 139, 210); } .cm-defined { color: rgb(181, 137, 0); } div.CodeMirror span.CodeMirror-matchingbracket { color: rgb(0, 255, 0); } div.CodeMirror span.CodeMirror-nonmatchingbracket { color: rgb(255, 34, 34); } .cm-s-inner .CodeMirror-activeline-background { background: inherit; } .CodeMirror { position: relative; overflow: hidden; } .CodeMirror-scroll { height: 100%; outline: 0px; position: relative; box-sizing: content-box; background: inherit; } .CodeMirror-sizer { position: relative; } .CodeMirror-gutter-filler, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-vscrollbar { position: absolute; z-index: 6; display: none; outline: 0px; } .CodeMirror-vscrollbar { right: 0px; top: 0px; overflow: hidden; } .CodeMirror-hscrollbar { bottom: 0px; left: 0px; overflow: auto hidden; } .CodeMirror-scrollbar-filler { right: 0px; bottom: 0px; } .CodeMirror-gutter-filler { left: 0px; bottom: 0px; } .CodeMirror-gutters { position: absolute; left: 0px; top: 0px; padding-bottom: 10px; z-index: 3; overflow-y: hidden; } .CodeMirror-gutter { white-space: normal; height: 100%; box-sizing: content-box; padding-bottom: 30px; margin-bottom: -32px; display: inline-block; } .CodeMirror-gutter-wrapper { position: absolute; z-index: 4; background: 0px 0px !important; border: none !important; } .CodeMirror-gutter-background { position: absolute; top: 0px; bottom: 0px; z-index: 4; } .CodeMirror-gutter-elt { position: absolute; cursor: default; z-index: 4; } .CodeMirror-lines { cursor: text; } .CodeMirror pre { border-radius: 0px; border-width: 0px; background: 0px 0px; font-family: inherit; font-size: inherit; margin: 0px; white-space: pre; overflow-wrap: normal; color: inherit; z-index: 2; position: relative; overflow: visible; } .CodeMirror-wrap pre { overflow-wrap: break-word; white-space: pre-wrap; word-break: normal; } .CodeMirror-code pre { border-right: 30px solid transparent; width: fit-content; } .CodeMirror-wrap .CodeMirror-code pre { border-right: none; width: auto; } .CodeMirror-linebackground { position: absolute; inset: 0px; z-index: 0; } .CodeMirror-linewidget { position: relative; z-index: 2; overflow: auto; } .CodeMirror-wrap .CodeMirror-scroll { overflow-x: hidden; } .CodeMirror-measure { position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden; } .CodeMirror-measure pre { position: static; } .CodeMirror div.CodeMirror-cursor { position: absolute; visibility: hidden; border-right: none; width: 0px; } .CodeMirror div.CodeMirror-cursor { visibility: hidden; } .CodeMirror-focused div.CodeMirror-cursor { visibility: inherit; } .cm-searching { background: rgba(255, 255, 0, 0.4); } span.cm-underlined { text-decoration: underline; } span.cm-strikethrough { text-decoration: line-through; } .cm-tw-syntaxerror { color: rgb(255, 255, 255); background-color: rgb(153, 0, 0); } .cm-tw-deleted { text-decoration: line-through; } .cm-tw-header5 { font-weight: 700; } .cm-tw-listitem:first-child { padding-left: 10px; } .cm-tw-box { border-style: solid; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-color: inherit; border-top-width: 0px !important; } .cm-tw-underline { text-decoration: underline; } @media print { .CodeMirror div.CodeMirror-cursor { visibility: hidden; } } html { font-size: 19px; } html, body { margin: auto; background: #fefefe; -webkit-font-smoothing: antialiased; } body { font-family: \"Vollkorn\", Palatino, Times; color: #333; line-height: 1.4; text-align: justify; } #write { max-width: 960px; margin: 0 auto; margin-bottom: 2em; line-height: 1.53; padding-top: 40px; } @media only screen and (min-width: 1400px) { #write { max-width: 1100px; } } @media print { html { font-size: 13px; } } /* Typography -------------------------------------------------------- */ #write>h1:first-child, h1 { margin-top: 1.6em; font-weight: normal; } h1 { font-size:3em; } h2 { margin-top:2em; font-weight: normal; } h3 { font-weight: normal; font-style: italic; margin-top: 3em; } h1, h2, h3{ text-align: center; } h2:after{ border-bottom: 1px solid #2f2f2f; content: ''; width: 100px; display: block; margin: 0 auto; height: 1px; } h1+h2, h2+h3 { margin-top: 0.83em; } p, .mathjax-block { margin-top: 0; -webkit-hypens: auto; -moz-hypens: auto; hyphens: auto; } ul { list-style: square; padding-left: 1.2em; } ol { padding-left: 1.2em; } blockquote { margin-left: 1em; padding-left: 1em; border-left: 1px solid #ddd; } code, pre { font-family: \"Consolas\", \"Menlo\", \"Monaco\", monospace, serif; font-size: .9em; background: white; } .md-fences{ margin-left: 1em; padding-left: 1em; border: 1px solid #ddd; padding-bottom: 8px; padding-top: 6px; margin-bottom: 1.5em; } a { color: #2484c1; text-decoration: none; } a:hover { text-decoration: underline; } a img { border: none; } h1 a, h1 a:hover { color: #333; text-decoration: none; } hr { color: #ddd; height: 1px; margin: 2em 0; border-top: solid 1px #ddd; border-bottom: none; border-left: 0; border-right: 0; } .ty-table-edit { background: #ededed; padding-top: 4px; } table { margin-bottom: 1.333333rem } table th, table td { padding: 8px; line-height: 1.333333rem; vertical-align: top; border-top: 1px solid #ddd } table th { font-weight: bold } table thead th { vertical-align: bottom } table caption+thead tr:first-child th, table caption+thead tr:first-child td, table colgroup+thead tr:first-child th, table colgroup+thead tr:first-child td, table thead:first-child tr:first-child th, table thead:first-child tr:first-child td { border-top: 0 } table tbody+tbody { border-top: 2px solid #ddd } .task-list{ padding:0; } .md-task-list-item { padding-left: 1.6rem; } .md-task-list-item > input:before { content: '\\221A'; display: inline-block; width: 1.33333333rem; height: 1.6rem; vertical-align: middle; text-align: center; color: #ddd; background-color: #fefefe; } .md-task-list-item > input:checked:before, .md-task-list-item > input[checked]:before{ color: inherit; } .md-tag { color: inherit; font: inherit; } #write pre.md-meta-block { min-height: 35px; padding: 0.5em 1em; } #write pre.md-meta-block { white-space: pre; background: #f8f8f8; border: 0px; color: #999; width: 100vw; max-width: calc(100% + 60px); margin-left: -30px; border-left: 30px #f8f8f8 solid; border-right: 30px #f8f8f8 solid; margin-bottom: 2em; margin-top: -1.3333333333333rem; padding-top: 26px; padding-bottom: 10px; line-height: 1.8em; font-size: 0.9em; font-size: 0.76em; padding-left: 0; } .md-img-error.md-image>.md-meta{ vertical-align: bottom; } #write>h5.md-focus:before { top: 2px; } .md-toc { margin-top: 40px; } .md-toc-content { padding-bottom: 20px; } .outline-expander:before { color: inherit; font-size: 14px; top: auto; content: \"\\f0da\"; font-family: FontAwesome; } .outline-expander:hover:before, .outline-item-open>.outline-item>.outline-expander:before { content: \"\\f0d7\"; } /** source code mode */ #typora-source { font-family: Courier, monospace; color: #6A6A6A; } .html-for-mac #typora-sidebar { -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175); box-shadow: 0 6px 12px rgba(0, 0, 0, .175); } .cm-s-typora-default .cm-header, .cm-s-typora-default .cm-property, .CodeMirror.cm-s-typora-default div.CodeMirror-cursor { color: #428bca; } .cm-s-typora-default .cm-atom, .cm-s-typora-default .cm-number { color: #777777; } .typora-node .file-list-item-parent-loc, .typora-node .file-list-item-time, .typora-node .file-list-item-summary { font-family: arial, sans-serif; } .md-task-list-item>input { margin-left: -1.3em; margin-top: calc(1rem - 12px); } .md-mathjax-midline { background: #fafafa; } .md-fences .code-tooltip { bottom: -2em !important; } .dropdown-menu .divider { border-color: #e5e5e5; } One Java &nbsp;&nbsp;&nbsp;�� 1 �� ����ĸ���������û����ʶ���������ԵĽṹ�ж������������Ժ������ŵ�˵����ͨ�����巴Ӧ����ū�����ǡ����Ա��ֳ�����������ʶ�и������������ӡ��Ľṹ���Զ�Ͷ�䵽������Χ�����硣�� -- Alfred Korzybski (1930)�������������Դ���Ի�����������Ծ�������̨������������������˼ά�Ŵ�Ĺ�������һ�ֱ���ý�飬����������˼���һ���֡����Ե��������������ʽ�ı����д�����滭�����ܣ������͵�Ӱ������������Ծ��Ǵ���Ӧ�ó����˼��ṹ����������̣�Object-Oriented Programming OOP����һ�ֱ��˼ά��ʽ�ͱ���ܹ������½��� OOP �Ļ���������������߶Դ˲�̫���⣬�������������¡�����߱�һ����̻�����������ٻ�ͷ����ֻ��������������������������̵���Ҫ�Լ���Ʒ�ʽ���������б�����Զ��ṩ������ơ���ĳ�̶ֳ�����˵������ĸ��Ӷ�ֱ��ȡ���ڳ�������ͺ�����������ġ����͡���˼�ǣ������������ʲô����������ǶԵײ��������΢���󡣽��ų��ֵġ�����ʽ�����ԣ��� FORTRAN��BASIC �� C���ǶԻ�����Եĳ���������ȣ��������������˳���ĸĽ��������ǵĳ���ԭ����ȻҪ���������ؿ��Ǽ�����Ľṹ���������Ȿ���Ľṹ������Ա����Ҫ�ڻ���ģ�ͣ�����������ռ䡱����ʵ�ʽ��������ģ�ͣ�������ռ䡱��֮�佨����һ�ֹ�����������̼ȷѾ����������������Ա����ķ��롣��ʹ�ó��������ѱ�д��ά�����۸߰���ͬʱ�������һ�Ÿ���ҵ�ġ���̷�����ѧ�ơ�Ϊ������ģ����һ��������ΪҪ�������������ģ�͡���һЩ����������˵���� LISP �� APL�����ǵ������ǡ��Ӳ�ͬ�ĽǶȹ۲����硱�������������ⶼ����Ϊ�б������������ⶼ����Ϊ�㷨����PROLOG ������ ���ⶼ����Ϊ��������������Щ���ԣ�������Ϊ����һ�����ǡ�����Լ�����ı�̣���һ��������רΪ ����ͼ�η�����Ƶģ����߱�֤��������̫ǿ����ÿ�ַ��������Լ��������;���ʺϽ��ĳһ������⡣ֻҪ���������������ܼ��ķ�Χ���ͻ��Ե÷ǳ���׾���������ĳ�������ڴ˻����Ͽ����һ�󲽣�����Ա������һЩ���߱������ռ䡱�ڵ�Ԫ�ء��������ֱ���ǳ������ձ��ԣ����Բ����������ض����͵����⡣���ǽ�����ռ��е�Ԫ���Լ������ڽ�������ռ�ı�ʾ���������󡱣�Object������Ȼ������һЩ������ռ�û�ж�Ӧ�Ķ����塣ͨ�������µĶ������ͣ�����ɽ������ĵ������Ա����ض���������ϡ����Ե������Ķ�������������Ĵ���ʱ��Ҳ�����Ķ�����ı�������������ǰ��������ȣ���������һ�ָ���������ǿ������Գ��󷽷�����֮��OOP �������Ǹ����������������⣬�����Ǹ������н�������ļ������Ȼ��������Ȼ����������ϵ��ÿ����������һ̨С��������������Լ���״̬���ҿ��Խ����ض��Ĳ�����������ʵ����ġ����󡱻��ߡ����塱���ƣ����Ƕ����Լ�����������Ϊ��Smalltalk ��Ϊ��һ���ɹ����������Ӱ���� Java �ĳ���������� ��Alan Kay �ܽ�����������������ͨ����Щ���������ǿ����⡰���⡱��������������Ʒ�����ʲô���ģ�����Զ���������Խ����������һ������ı��������洢���ݣ�������������䡰��������ʱִ�б����Ĳ����������Ͻ��������ǿ��Դ�Ҫ������������ϳ���������Ե������Ȼ���ڳ����н����ʾΪһ������������һ�����ͨ����Ϣ��������֪�˴˸���ʲô��Ҫ�������һ������ķ���������Ҫ��ö�������Ϣ��ÿ���������Լ��Ĵ洢�ռ䣬��������������������˵��ͨ����װ���ж��󣬿����������Ͷ������ԣ����ܶ���ĸ���ǳ��򵥣����ڳ�����ȴ�ɴﵽ����ߵĸ��ӳ̶ȡ�ÿ��������һ�������������﷨��ÿ��������ĳ�����ࡱ��һ����ʵ���������У����ࡱ��Class���ǡ����͡���Type����ͬ��ʡ�һ��������Ҫ���������ǡ��ܽ�ʲô��Ϣ������������ͬһ�����ж����ܽ�����ͬ����Ϣ����ʵ���Ǳ��к����һ��˵������Ҳ��ñ������⡣��������Ϊ��Բ����Circle����һ������Ҳ��������Ϊ����״����Shape����һ����������һ��Բ��ȫ�ܽ��շ��͸�&quot;��״������Ϣ������ζ�ſ��ó������ͳһָ�ӡ���״���������Զ��������з��ϡ���״�������Ķ���������Ȼ������Բ������һ���Գ�Ϊ����ġ����滻�ԡ����� OOP ����Ҫ�ĸ���֮һ��Grady Booch �ṩ�˶Զ��������������һ����������Լ���״̬����Ϊ�ͱ�ʶ������ζ�Ŷ������Լ����ڲ�����(�ṩ״̬)������ (������Ϊ)�����˴����֣�ÿ���������ڴ��ж���Ψһ�ĵ�ַ�����ӿ�����ʿ��£�Aristotle������ǵ�һ�������о������͡�����ѧ�ң��������������������ࡱ�����ĸ�����ж�����Ψһ�ģ���ͬʱҲ�Ǿ�����ͬ�����Ժ���Ϊ�Ķ��������������һ���֡�����˼�뱻�״�Ӧ���ڵ�һ��������������� Simula-67�����ڳ�����ʹ�û����ؼ��� class �������µ����ͣ�class �� type ͨ���ɻ���ʹ�ã���Щ�˶����ǽ����˽�һ�����֣�����ǿ�� type �����˽ӿڣ��� class ���Ǹ��ӿڵ�һ������ʵ�ַ�ʽ����Simula ��һ���ܺõ����ӡ����������������ʾ�ģ����������ǡ�ģ�⡱��Simulate�����ơ����г���Ա�������ľ������⡣����������������һϵ�г���Ա���ͻ����ʺš����׺ͻ��ҵ�λ������&quot;���󡱡�ÿ���Ա��Ԫ�أ�������һЩͨ�õ�������ÿ���ʺŶ���һ������ÿ�����ɶ��ܽ��տͻ��Ĵ��ȵȡ����ͬʱ��ÿ����Ա�����Լ���״̬��ÿ���ʺŶ��в�ͬ����ÿ�����ɶ���һ�����֡������ڼ���������У����ö�һ�޶���ʵ��ֱ��ʾ����Ա���ͻ����ʺ��Լ����ס����ʵ����ǡ����󡱣�����ÿ����������һ���ض��ġ��ࡱ���Ǹ�������Լ���ͨ����������Ϊ����ˣ����������ĳ�������У�������������Ҫ�������½����ָ��������ݡ����͡���Type���������������������ĳ���������Զ������� class �ؼ��֡����㿴�� ��type�� ����ʵ�ʱ����ͬʱ�뵽 class����֮��Ȼ��������һ����󣬿ɸ�������������������󣬿ɽ���Щ������ΪҪ��������д��ڵ�Ԫ�ؽ��д�������ʵ�ϣ������ǽ����������ĳ������ʱ�����ٵ����һ����ս�Ծ��ǣ�����ڡ�����ռ䡱������ʵ�ʴ��ڵĵط�����Ԫ���롰�����ռ䡱����ʵ��������н�ģ�ĵط�������������Ԫ��֮�佨������ġ�һ��һ����ӳ���ϵ����ô������ö�������������õĹ����أ�������һ�ְ취������󷢳�����������һЩʵ�ʵ����⣬�������һ�ν��ס�����Ļ�ϻ�һЩ�������ߴ�һ�����صȵȡ�ÿ��������ܽ����ض���������������󷢳���������ͨ�����ġ��ӿڡ���Interface������ģ�����ġ����͡����ࡱ��涨�����Ľӿ���ʽ�������͡��롰�ӿڡ��Ķ�Ӧ��ϵ��������������ƵĻ����������������Ե����Ϊ����xxxxxxxxxxLight lt = new Light();lt.on();����������У����ͣ���������� Light������ Light ���󷢳���������������� on���ر� off����ø����� brighten ���߱�ø����� dim��ͨ������һ�����ã��� lt �� new �ؼ��֣����Ǵ�����һ�� Light ���͵Ķ������õȺŽ��丳�����á�Ϊ�����������Ϣ������ʹ�þ����� . �� lt ����Ϣ���� on �������������Կ�����ʹ��һЩԤ�ȶ���õ���ʱ�������ڳ�������õĴ����Ƿǳ���ֱ�۵ġ���ͼ��ѭ UML��Unified Modeling Language��ͳһ��ģ���ԣ��ĸ�ʽ��ÿ������һ�����ʾ����Ķ������������ƣ����м䲿����Ҫ�������κ����ݳ�Ա�����������ڴ˶���ķ��������ǽ����κη��͵��ö������Ϣ���ڿ�ĵײ���ͨ����ֻ��������ƺ͹��������� UML ���ͼ����ʾ������м䲿��δ��ʾ���籾����ʾ�������ֻ����������Ȥ����Ҳ����Ҫ��ʾ������Ϣ�������ṩ�ڿ���������������ʱ�����ǿ��Խ����󿴳��ǡ������ṩ�ߡ�����ĳ�������Ϊ�û��ṩ���񣬲�������ͨ���������������ṩ�ķ�����ʵ����һ�㡣���ǵ�����Ŀ���ǿ�������ù��߿������е�һЩ�����ṩ����ķ�����������⡣��ô�������ˣ����Ǹ�ѡ���ĸ���������������أ����磬�����ڿ���һ�����±���������ܻ��뵽����Ļ����Ĭ�ϵļ��±�������һ�����ڼ�ⲻͬ���ʹ�ӡ����ִ�д�ӡ�Ķ�����Щ�����е�ĳЩ�Ѿ����ˡ��Ƕ��ڻ�û�еĶ������Ǹ���Ƴ�ɶ���أ���Щ������Ҫ�ṩ��Щ�����Լ�����Ҫ����������Щ�������ǿ��Խ���Щ����һһ�ֽ⣬�����һ�����������ƵĻ���ԭ���Ǹ��ھۣ�ÿ��������ڲ�������ȷ�����ܽ�����ء�Ȼ���������˽�̫�๦������һ�������С����磺��֧Ʊ��ӡģ���У�����Ҫ���һ������ͬʱ��ȡ�ı���ʽ������ȷʶ��ͬ��ӡ���ͺŵĶ�����ȷ���������ṩ������������һ�������������Ű沼�ֵ�Ŀ¼��һ����һ�����ʶ��ͬ��ӡ���ͺŵĶ���չʾͨ�õĴ�ӡ���棻����������������������������������������ÿ�������ṩ��һ����ܵķ��������õ������������У�ÿ�������ܵ�һ�Ҹ�Ч�������ĳ�����ƿ���������Ǵ���ĸ����ԣ�ͬʱҲ��������Ķ����������ǵĴ��롣ֻ������֪�����ṩʲô���񣬱��˲��ܸ��õؽ���Ӧ�õ�����ģ�������С���װ���ǿ��԰ѱ�̵Ĳ������򻮷�Ϊ�з���Ӧ�á�Ӧ�ó���Ա�����з�����Ա�����Ļ����������������ٿ������з�����Ա����һ�������࣬�ù��������Ӧ�ó���Ա������Ҫ�����ݣ��������ڲ�ʵ�ֵ�ϸ�ڡ�����������Ч�ر���ù����౻�����ʹ�ú͸��ģ��Ӷ����ٳ�������Ŀ��ܡ��˴�ְ�𻮷��������໥Э������Ӧ�ó���Ա�����з�����Ա�����Ĺ�����ʱ��˫�������˹�ϵ��Ӧ�ó���Աͨ��ʹ���ֳɵĹ�������װӦ�ó�����߹�������Ĺ��߿⡣���������Ĵ����߽�����ڲ�������Ϣ�������������ߣ���ô��Щʹ�ù���Ͳ����ױ����ء���Ϊǰ���޷���֤�����Ƿ�ᰴ����ȷ�Ĺ�����ʹ�ã������Ǹı�ù����ࡣֻ���趨���ʿ��ƣ����ܴӸ�������ֹ��������ķ�������ˣ�ʹ�÷��ʿ��Ƶ�ԭ�����������㣺��Ӧ�ó���Ա��Ҫ�������ǲ�Ӧ�ô����Ĳ��֡�����ע�⣬��Ҳ��һ����ѧ���ߡ����ֱ��������Ϊ�������Ա����Ҫ����Ӧ�������Ƿ���ϸ�ڲ��֡�����ʹ���Ĵ����ߣ��з�����Ա���ڲ�Ӱ�����ʹ�õ���������Ƹ��¹��߿⡣���磬���ǿ�����һ�����ܼ򵥵Ĺ����࣬�������ֿ���ͨ���Ż����������ִ���ٶȡ����繤����Ľӿں�ʵ�ֲ�����ȷ�ֿ����ܵ������������ǾͿ������ɵ���ɸ��졣Java ��������ʽ�ؼ������������еķ���Ȩ�ޣ�public����������private(˽��)��protected���ܱ���������Щ�������η�������˭��ʹ���������εķ������������ࡣpublic����������ʾ�κ��˶����Է��ʺ�ʹ�ø�Ԫ�أ�private��˽�У������౾�������ڲ��ķ���������޷�ֱ�ӷ��ʸ�Ԫ�ء�private ����͵�����֮������ϡ��κ���ͼ����˽�г�Ա����Ϊ���ᱨ����ʱ����protected���ܱ����������� private�����������ࣨ��һ�ھͻ�����̳еĸ�����Է��� protected �ĳ�Ա�������ܷ��� private ��Ա��default��Ĭ�ϣ�����㲻ʹ��ǰ������ߣ�Ĭ�Ͼ��� default ����Ȩ�ޡ�default ����Ϊ�����ʣ���Ϊ��Ȩ���µ���Դ���Ա�ͬһ�������������������ĳ�Ա���ʡ�����һ���ྭ�����Ͳ��Ժ���Ӧ�ǿɸ��õġ�Ȼ���ܶ�ʱ�����ڳ���Աû���㹻�ı�̾����Զ�������ǵĴ��븴���Բ���ǿ���������Ʒ����ĸ�������������������Ƶ��ŵ�֮һ�����ǿ���ͨ���ظ�ʹ��ĳ����Ķ������ﵽ���ָ����ԡ�ͬʱ������Ҳ���Խ�һ����Ķ�����Ϊ��һ����ĳ�Ա����ʹ�á��µ���������������������������͵��������󹹳ɡ������漰������ϡ��͡��ۺϡ��ĸ�������Composition������������ʾ��ӵ�С���ϵ��has-a relationship�������磬������ӵ�����桱���ۺ���Aggregation����̬���������ͼ��ʵ��������ָ�� Car ����ʾ ��� �Ĺ�ϵ������� �ۺ� ��ϵ������ʹ�ÿ��������Ρ�������ע����Ϻ;ۺ϶����ڹ�����ϵ��һ�֣�ֻ�Ƕ����������-���ֵ����塣�����Ǿۺϻ�����ϣ���Ҫ����ʵ�ʵ�ҵ���������жϡ�������ͬ��������࣬�ڲ�ͬ��ҵ�񳡾���������ϵ�ᷢ���仯��ֻ���������޷����־ۺϺ���ϵģ���������һ�ֹ�ϵ��ֻ�ܴ����弶�������֡��ۺϹ�ϵ�У���������ӵ�в������������ڣ���������ɾ��ʱ���������ᱻɾ�������ߣ�����������Թ���ͬһ����������Ϲ�ϵ�У�����ӵ�в������������ڣ���������ɾ��ʱ������һ�������ɾ�������ң��������������ͬʱ����ͬһ��������������������������ĳ��������ϵ��������ϻ��Ǿۺϡ��������������ڲ�ͬ�������ǾۺϹ�ϵ����������ͬ��������Ϲ�ϵ����ʹ�á���ϡ���ϵ�����ǵĳ���������������ԡ�ͨ���½������У���Ա�����ʹ�� private ����Ȩ�ޣ�����Ӧ�ó���Ա���޷�����ֱ�ӷ��ʡ����ǾͿ����ڲ�Ӱ��ͻ������ǰ���£����ݵ��޸���Щ��Ա������Ҳ�����ڡ�����ʱ&quot;�ı��Ա����Ӷ���̬�ظı�������Ϊ�����һ������������ԡ�����һ��Ҫ�����ġ��̳С������߱���������ԣ���Ϊ��������ͨ���̳д���������������ơ�������������о����ص�ǿ�����̳С��������ֳ���Ա��ӡ�����������Ϊ������Ϊ���̳�Ӧ���洦�ɼ�������������˼·�����ĳ������ͨ��׾���ָ��ӡ��෴���ڴ�������ʱ����Ҫ���ǡ���ϡ�����Ϊ��������������Ƹ�����������������һЩ��̾����һ����Ҫ�õ��̳У��ͻ�������ʶ����һ�㡣�̳����̳С�����������̴�������ı��������ڸ������������ǽ���ʽ���������ݺ͹��ܷ�װ��һ���������ǡ���������ռ䡱�ĸ�������������ڱ���ʹ�õײ�������ԡ�ͨ��ʹ�� class �ؼ��֣���Щ�����γ��˱�������еĻ�����Ԫ���ź����ǣ���ô�������кܶ��鷳���ڴ�����һ����֮�󣬼�ʹ��һ����������������ƵĹ��ܣ��㻹�ǵ����´���һ�����ࡣ���������������ֳɵ��������ͣ�������С���¡�����ٸ�������������Ӻ��޸ģ�������Ե�������ˡ����̳С�����������Ŀ�����Ƶġ����̳в�����ȫ�ȼ��ڿ�¡���ڼ̳й����У���ԭʼ�ࣨ��ʽ���ƽ������ࡢ������ࣩ�����˱仯���޸Ĺ��ġ���¡���ࣨ��ʽ���ƽ����̳���������ࣩҲ�ᷴӳ�����ֱ仯�����ͼ�еļ�ͷ��������ָ����ࡣ�����㽫�����ģ�ͨ���ж�������ࡣ���Ͳ���������һ������Լ���������漰�������͡��������Ϳ��Ծ��й�ͬ����������Ϊ������һ�����Ϳ��ܰ�������һ�����͸�������������һ����Դ����������Ϣ�������Բ�ͬ�ķ�ʽ�������ǣ����̳�ͨ�������������ĸ������������������ԡ����������������������֮�乲����������������Ϊ�����������Ա�ʾ˼��ĺ��ġ��ӻ�����������������������ʾʵ�ָú��ĵĲ�ͬ��ʽ�����磬�������ջ����������з��ࡣ�����ǡ���������ÿ������������������ֵ�����ԣ����ǿ��Ա����顢�ۻ���ֽ⡣�ڴ˻����ϣ�����ͨ�����Ӷ��������(ƿ������ɫ���ֹ��д���)����Ϊ(���޿��Ա�ѹ��)��������������������͡����⣬һЩ��Ϊ���Բ�ͬ��ֽ�ŵļ�ֵȡ�����������ͺ�״̬����ʹ�ü̳У��㽫����һ�����Ͳ�νṹ������ʾ����ͼ�����ĳ�����͵����⡣�ڶ��������ǳ����ġ���״�����ӣ��������ڼ�����������ϵͳ����Ϸģ�⡣�����ǡ���״����ÿ����״���д�С����ɫ��λ�õȵȡ�ÿ����״���Ի��ơ��������ƶ�����ɫ�ȡ��ɴˣ��������������̳г����������͵���״����Բ�Ρ������Ρ������εȵȡ���ÿ����״���Ծ��и��ӵ���������Ϊ�����磬ĳЩ��״���Է�ת����Щ��Ϊ���ܲ�ͬ�����������״����������Ͳ�νṹ��������״֮��������ԺͲ����ԡ�����ͬ�����ｫ�������ת�������������õģ���Ϊ�㲻��Ҫ�����������ͽ����������֮�佨�������м�ģ�͡�ͨ��ʹ�ö������Ͳ�νṹ��Ϊ����Ҫģ�ͣ���������ֱ�Ӵ���ʵ�����ж�ϵͳ���������ɵ��ô����ϵͳ������������ʵ�ϣ���ʱ����Щ����Ѱ�Ҹ��ӽ���������˻ᱻ���������Ƶļ����ѵ������������ͼ̳д��������͡����������Ͳ��������������͵����г�Ա������˽�г�Ա�������������Ҳ��ɷ��ʣ������Ҹ���Ҫ�����������˻���Ľӿڡ�Ҳ����˵�����������յ�������ϢҲ�ܱ������������ա���������յ���Ϣ������֪��������ͣ�������������������ͬ�����͡���ǰ��������У���Բ����״��������ͨ���̳е����͵ȼ�����������������̺���Ļ����ż�֮һ����Ϊ����������඼������ͬ�Ļ����ӿڣ����԰���˽ӿڵıض���ĳЩ����ʵ�֡�Ҳ����˵����������յ��ض���Ϣʱ�������п�ִ�д��롣����̳�һ��������������κ��£������Ի���ӿڵķ���ֱ�ӽ��������ࡣ����ζ��������ͻ��಻��������ͬ�����ͣ����Ҿ�����ͬ����Ϊ����ô��ûʲô�ر����塣�����ַ������������µ���������ԭʼ�Ļ��ࡣ��һ�ַ����ܼ򵥣����������������·�������Щ�·������ǻ���ӿڵ�һ���֡�����ζ�Ż��಻����������������������������˸���ķ������̳е����ּ򵥶�ԭʼ����;��ʱ�ǽ��������������������Ȼ��������Ҫ��ϸ�����Ƿ��ڻ�����ҲҪ����Щ����ķ�����������Ƶķ����������������������������лᾭ�����������ܼ̳���ʱ��ζ����Ҫ�ڽӿ��������·��������������� extends �ؼ��ֱ�ʾ�̳е� Java �У���������������ˡ��ڶ���Ҳ�Ǹ���Ҫ������������ͻ���ķ����Ǹı����л��෽������Ϊ���ⱻ��Ϊ���� (overriding)��Ҫ�븲��һ��������ֻ��Ҫ�������������¶�������������ɡ�&quot;��һ��&quot;��&quot;����һ��&quot;�Ĺ�ϵ���ڼ̳п��ܻ��������ۣ��̳�Ӧ��ֻ���ǻ���ķ���(��Ӧ�����ӻ�����û�еķ���)����������Ļ�������������������ͬ�������ˣ���Ϊ���Ǿ�����ͬ�Ľӿڡ������ɣ��������һ�������������ȫ���������������&quot;�������&quot;��Ҳ����������&quot;���ԭ��&quot;����ĳ�������ϣ�����һ�ִ����̳е����뷽ʽ�����Ǿ��������ֻ����������Ĺ�ϵ��Ϊ��һ����is-a����ϵ����Ϊ����˵&quot;Բ��һ����״&quot;���ж��Ƿ�̳У��Ϳ��������֮���������� is-a ��ϵ����ʱ�����������������µĽӿ�Ԫ�أ��Ӷ���չ�ӿڡ���Ȼ��������Ȼ����������࣬�������������������ԭ�����ڻ����޷����������ӵķ��������ֹ�ϵ��Ϊ����һ��(is-like-a)��ϵ�������Ͳ���ӵ�о����͵Ľӿڣ����Ұ����������������Բ���˵�¾�������ȫ��ͬ���Կյ�Ϊ�������跿�����Ѿ���װ���������豸�Ŀ��������������˿��������豸�Ľӿڡ�����һ�£����ڿյ����ˣ������°�װ��һ�������������ȵ������á������þ�����һ����is-like-a���յ����������������ࡣ��Ϊ��������Ŀ���ϵͳ����Ƴ�ֻ�ܿ��������豸��������ֻ�����¶���(������)�����䲿��ͨ�š��¶���Ľӿ��Ѿ���չ�ˣ����п���ϵͳȴֻ֪��ԭ���Ľӿڣ�һ�����������ƣ���ͻᷢ�֣���Ϊ���������ϵͳ����һ�㻯��Ӧ�ñ���������Ϊ&quot;�¶ȿ���ϵͳ&quot;��ҲӦ�ð������ȹ��ܣ������Ļ������ǾͿ���ʹ�����ԭ���ˡ���ͼ��ӳ������ʵ�����н������ʱ���ܻᷢ�������顣���㿴�����ԭ��ʱ�������׻���Ϊ���������Ψһ���еķ�ʽ������ʹ�ô������������Ǻܺõġ�����Щʱ����ᷢ�ֱ����������(��չ)���������·���(�ṩ�µĽӿ�)��ֻҪ��ϸ���ӣ�����Ժ����Ե�����������Ʒ�ʽ��ʹ�ó��ϡ���̬�����ڴ�����Ĳ�νṹʱ��ͨ����һ�����󿴳����������Ļ��࣬�����ǰ������ɾ����ࡣͨ�����ַ�ʽ�����ǿ��Ա�д�����������ض����͵Ĵ��롣���ϸ�����״���������У�����������method�����ݵ���ͨ�á���״�����������������ǡ�Բ�����������Ρ����������Ρ�����ĳ����δ�������״�����е���״�����Ա����ơ��������ƶ�����ˡ������������е��κδ�������״���Ķ�������Ϣ�����ص��Ķ�����δ�����Ϣ�������Ĵ��벻�������ӵ�������Ӱ�죬������������������չ�����������Դ���������ĳ��÷����� ���磬�����ͨ��ͨ�õġ���״�������������µġ�����Ρ���״�����࣬������Ҫ�޸�ͨ��&quot;��״&quot;����ķ�����ͨ�������µ���������չ��Ƶ����������Ƿ�װ�仯�Ļ�������֮һ�������������������ǵ���ƣ��Ҽ�����������ά�����ۡ�������ǰ������Ķ�������ͳһ�������������Ļ��ࣨ��Բ����������״���������г�������������������ˡ��������񡱵ȵȣ�����������compiler���ڱ���ʱ�ھ��޷�׼ȷ��֪��ʲô����״������������һ�֡���������ʻ�����������֡����ڷ��С�����ǹؼ����ڣ����������������Ϣʱ������Ա������֪���Ķδ���ᱻִ�С�����ͼ���ķ�������ƽ�ȵ�Ӧ�õ�ÿ�ֿ��ܵġ���״���ϣ���״�����������ľ�������ִ��ǡ���Ĵ��롣�������Ҫ֪��ִ�����Ĳ��ִ��룬�����Ǿ�������һ���µĲ�ִͬ�з�ʽ�����������Ҫ���ĵ������ķ�������ô�������ڲ�ȷ����ִ���Ĳ��ִ���ʱ����ô�����أ��ٸ����ӣ���ͼ�� BirdController �����ͨ�� Bird �����У�BirdController ��֪�� Bird ��ȷ������ȴ����һ�������� BirdController �ĽǶ����������Ǻܷ���ģ���Ϊ������Ҫ��д�ر�Ĵ�����ȷ�� Bird �����ȷ�����ͻ���Ϊ����ô���ڵ��� move() ����ʱ����α�֤������ȷ����Ϊ������·���ɻ���Ӿ�������·����Ӿ�����أ��������Ĵ𰸣���������������Ƶ�������ڴ�ͳ�����ϣ����������ܽ��к������á��ɷ� OOP �����������ĺ������û�������ν�����ڰ��������������ܴ�δ��˵����������������ĺ������÷�ʽ������ζ�ű��������ɶ��ض��������ĵ��ã��õ��ûᱻ����Ϊ��ִ�еĴ���ľ��Ե�ַ��ͨ���̳У�����ֱ������ʱ����ȷ������ĵ�ַ����˷�����Ϣ������ʱ������Ҫ����һЩ������Ϊ�˽��������⣬�����������ʹ�����ڰ��ĸ�������������Ϣʱ�������õĴ���ֱ������ʱ��ȷ����������ȷ���������ڣ����Բ����ͷ���ִֵ�����ͼ�飬��������֪��Ҫִ�е�ȷ�д��롣Ϊ��ִ�к��ڰ󶨣�Java ʹ��һ������Ĵ���λ��������Ե��á���δ���ʹ�ö����д洢����Ϣ�����㷽������ĵ�ַ���˹����ڶ�̬���½�������ϸ���ܣ�����ˣ�ÿ���������Ϊ�����ض�����λ�����ݶ���ͬ���������������Ϣʱ������֪������δ���������Ϣ����ĳЩ�����У�������ʽ�����跽�����ڰ����Ե�����ԡ����磬C++ ʹ�� virtual �ؼ��֡�����Щ�����У�Ĭ������·������Ƕ�̬�󶨵ġ��� Java �У���̬����Ĭ����Ϊ������Ҫ����Ĺؼ�����ʵ�ֶ�̬�ԡ�Ϊ����ʾ��̬�ԣ����Ǳ�д��һ�δ��룬�����������͵ľ���ϸ�ڣ�ֻ�����Ի����ô��������������Ϣ���룬��˸����ڱ�д�����⡣���ң����ͨ���̳�������һ�������ͣ����磬һ�������Σ�����ô������������͵� Shape �������������һ����Ч����ˣ��ó����ǿ���չ�ġ�����ʾ����xxxxxxxxxxvoid doSomething(Shape shape) { &nbsp; &nbsp;shape.erase(); &nbsp; &nbsp;// ... &nbsp; &nbsp;shape.draw();}�˷������κ� Shape �Ի���������������ƺͲ����Ķ���ľ��������޹ء�����������������ʹ�� doSomething() ������xxxxxxxxxx &nbsp; &nbsp;Circle circle = new Circle(); &nbsp; &nbsp;Triangle triangle = new Triangle(); &nbsp; &nbsp;Line line = new Line(); &nbsp; &nbsp;doSomething(circle); &nbsp; &nbsp;doSomething(triangle); &nbsp; &nbsp;doSomething(line); ���Կ������۴���ġ���״����ʲô��������ȷ��ִ���ˡ�����һ���ǳ����˾���ı�̼��ɡ������������д��룺xxxxxxxxxx &nbsp; &nbsp;doSomething(circle);��Ԥ�ڽ��� Shape �ķ����������� Circle���ᷢ��ʲô������ Circle Ҳ��һ�� Shape���� �� doSomething(circle) ����ȷ��ִ�С�Ҳ����˵��doSomething() �ܽ������ⷢ�͸� Shape ����Ϣ��������ȫ��ȫ�ͺϺ��߼������顣���ְ����൱��������������Ĺ��̽���������ת�͡���upcasting�������������ı��������������ַ��������������ٿ������ doSomething() ����ʾ����xxxxxxxxxx &nbsp; &nbsp;shape.erase(); &nbsp; &nbsp;// ... &nbsp; &nbsp;shape.draw();���ǿ��Կ�������δ����������������һ�� Circle �������������������һ�� Square����������...������������д���룬������ Shape ���п��ܵ����ͣ���Բ�����εȵȡ�����Ȼ�Ƿǳ��鷳�ģ�����ÿ��������һ���µ� Shape ���ͺ󣬶�Ҫ��Ӧ�ؽ����޸ġ����������ֻ��˵��������һ�ּ�����״����֪������ɾ�� erase() �ͻ��� draw()�����Լ�ȥ���ɣ�ע��ϸ�ڡ�����������û�����κ�����ָʾ������Ĳ���Ҳ����ȫ��ȷ��ǡ���ġ�����֪����Ϊ Circle ����draw() ʱִ�еĴ�����Ϊһ�� Square �� Line ���� draw() ʱִ�еĴ����ǲ�ͬ�ġ����ڽ� draw() ��Ϣ����һ������ Shape ʱ������ Shape �����ʱ���ӵ�ʵ�����ͣ�����Ӧ�ز�ȡ��ȷ�Ĳ�������ǳ����棬��Ϊ�� Java ������Ϊ doSomething() �������ʱ��������֪���Լ�Ҫ������׼ȷ������ʲô����������ȷʵ���Ա�֤���ջ�Ϊ Shape ���� erase() �� draw()����������ȷ���ض��� Circle��Square ���� Line ����ʲô����󣬳���ִ�еĲ���ȴ��Ȼ����ȷ�ģ�������ô�������أ�������Ϣ������ʱ���������֪�����յľ���������ʲô��������ִ������ȷ�ģ�����Ƕ���ġ���̬�ԡ���Polymorphism�����������ĳ������������ͨ������̬�󶨡��ķ�ʽ��ʵ�ֶ���Ķ�̬�Եġ�������������ʱϵͳ�Ḻ�������ϸ�ڵĿ��ƣ�����ֻ��֪��Ҫ��ʲô���Լ�������ö�̬�������õ���Ƴ������̳нṹ�Դ� C++ ����������һ�� OOP ��������Ϊͻ�����Ƿ����е��඼Ӧ��Ĭ�ϴ�һ������̳��أ�������� Java ���ǿ϶��ģ�ʵ���ϣ��� C++ ����ļ������� OOP ������Ҳ������������ Java �У�������ջ�������־��� Object��Java �ĵ��̳нṹ�кܶ�ô����������ж��󶼾���һ�������ӿڣ�����������ն�����ͬһ�����ࡣ�෴�ģ����� C++ ��ʹ�õĶ�̳еķ������ǲ���֤���еĶ�������ͬһ�����ࡣ�������ݵĽǶȿ�����̳еķ��������� C ��ģ�ͣ��������޽��١�������ȫ��������̣����Ǳ���Ҫ�����Լ��Ĳ�νṹ�����ṩ������ OOP ����ͬ���ı��������Ǿ�����ʹ�õ��µ����Ͳ����ݵĽӿڡ�Ϊ���������Ƕ����Ѵ��������п��ܻ�Ҫ���϶�̳У��Ի�� C++ ���ġ�����ԡ�ֵ����������㿪ʼ��Java ����������������Ǹ��õ�ѡ�����⣬���̳еĽṹʹ�������ռ�����ʵ�ָ�Ϊ���ס���Ҳ�� Java �� C++ �����ϵĸ����Ľ�֮һ�����������ڵ�������Ϣ����������ж����У�����������Զ���������жϲ��˶������͵�����������ϵͳ������������Ҫ�������쳣������ͬʱ����Ҳ�����ǵı�̾��и��������ԡ�����ͨ�������ǲ���֪�����ĳ������������Ҫ�Ķ��������ͳ���ʱ�䣬�Լ�����Ĵ洢��ʽ����ô�������֪Ϥ����������ʱ��Ҫ������ڴ�ռ��أ���������������У�����Ľ��������Щ�������ʣ�����һ�������͵Ķ��������á����������Ķ��󡣵�Ȼ������Ҳ����ʹ�ö���������Զ�֧�ֵġ����顱��array������ Java �С����ϡ���Collection����ʹ���ʸ��ߡ���Ҳ�ɳ�֮Ϊ�����������������ϡ�����ƺ���ͨ�á��������ϡ��������͵Ķ�����Դ洢�������͡������������������ܸ�����Ҫ�Զ����ݣ����ǲ��ù��Ĺ��������ʵ�ֵġ����ã�һ������� OOP ���Զ��Ὣ�����ϡ���Ϊ����������� C++ �У������ϡ������׼���һ���֣�ͨ������Ϊ STL��Standard Template Library����׼ģ��⣩��SmallTalk ��һ�׷ǳ������ļ��Ͽ⡣ͬ����Java �ı�׼����Ҳ�ṩ�����ֳɵļ����ࡣ��һЩ���У�һ�������ͼ��Ͼ��������������е������ˣ���������һЩ��⣨Java���У���ͬ���͵ļ��϶�Ӧ��ͬ�����󣺳������� List�������ڱ������У�Map��Ҳ��Ϊ�������飬�����ڽ����������������������Set��ֻ�ܱ�����ظ���ֵ����������������У�Queue��������Tree����ջ��Stack�����ѣ�Heap���ȵȡ�����ƵĽǶ�����������������Ҫ����һ���ܹ����ĳ������ļ��ϡ����һ�ּ��Ͼ���������������ô���ǾͲ���Ҫʣ�µ��ˡ�֮����ѡ�񼯺�����������ԭ�����Ͽ����ṩ��ͬ���͵Ľӿں��ⲿ��Ϊ����ջ�����е�Ӧ�ó����ͼ��ϡ��б���ͬ�������е�һ���ṩ�Ľ���������ܱ��������öࡣ��ͬ�ļ��϶�ĳЩ�����в�ͬ��Ч�ʡ����磬List �����ֻ������ͣ�ArrayList �� LinkedList����Ȼ���߾�����ͬ�ӿں��ⲿ��Ϊ��������ĳЩ���������ǵ�Ч�ʲ��ܴ��� ArrayList ���������Ԫ���Ǻܸ�Ч�ģ��� LinkedList �������Ч�ʵ��¡���֮���� LinkedList �в���Ԫ�ص�Ч��Ҫ���� ArrayList �иߡ����ڵײ����ݽṹ�Ĳ�ͬ��ÿ�ּ���������ִ����ͬ�Ĳ���ʱ����ֳ�Ч���ϵĲ��졣���ǿ���һ��ʼʹ�� LinkedList �����������Ż�ϵͳ����ʱ���� ArrayList��ͨ���� List �ӿڵĳ������ǿ��Ժ����׵ؽ� LinkedList ��Ϊ ArrayList���� Java 5 ���ͳ���֮ǰ�������б������ͨ������ Object��Java ���̳еĽṹ��ζ������Ԫ�ض����� Object �࣬�����ڼ����п��Ա����κ����͵����ݣ��������á�Ҫʹ�������ļ��ϣ�������Ҫ����������Ԫ�ء����� Java 5 �汾ǰ�ļ���ֻ���� Object��������������������Ԫ��ʱ��Ԫ�ر�����ת�ͳ��� Object���Ӷ���ʧ�Լ�ԭ�е��������ԡ���ʱ�����ٴӼ�����ȡ����Ԫ��ʱ��Ԫ�ص����ͱ���� Object����ô���Ǹ���ô����ת��ԭ�Ⱦ���������أ��������ʹ����ǿ������ת������תΪ����������ͣ�������̳�Ϊ����ġ�����ת�͡���ͨ��������ת�͡�������֪����Բ�Ρ�Ҳ��һ�֡���״������������ǰ�ȫ�ġ��������ǲ��ܴӡ�Object����������ǡ�Բ�Ρ�����״�������Գ���������ȷ��Ԫ�صľ���������Ϣ����������ת�͡����ǲ���ȫ�ġ�Ҳ����˵�����Ĵ��������ȫΣ�յģ���Ϊһ������ת���˴�������ͣ�����ͻ����г������׳�������ʱ�쳣����RuntimeException������������½ڻ��ᵽ�� ������Σ�����ҪѰ��һ����ȡ������Ԫ��ʱȷ����������͵ķ��������⣬ÿ��ȡ��Ԫ�ض�Ҫ������ġ�����ת�͡��Գ���ͳ���Ա����һ�ֿ�������ĳ�ַ�ʽ�������ϣ���ȷ�ϱ���Ԫ�صľ������ͣ����ټ���Ԫ�ء�����ת�͡��Ŀ����Ϳ��ܳ��ֵĴ����ѵ����������ֽ���������ǣ����������ͻ��ƣ�Parameterized Type Mechanism�������������ͻ��ƿ���ʹ�ñ������ܹ��Զ�ʶ��ĳ�� class �ľ������Ͳ���ȷ��ִ�С��ٸ����ӣ��Լ��ϵĲ��������ͻ��ƿ����ü��Ͻ����ܡ���״���������͵�Ԫ�أ����ԡ���״������ȡ��Ԫ�ء�Java 5 �汾֧���˲��������ͻ��ƣ���֮Ϊ�����͡���Generic���������� Java 5 ����Ҫ����֮һ������԰����·�ʽ�� ArrayList ������ Shape����״����xxxxxxxxxx &nbsp; &nbsp;ArrayList&lt;Shape&gt; shapes = new ArrayList&lt;&gt;();���͵�Ӧ�ã��� Java �������׼�������������˸ı䡣�ڱ���Ĵ���ʾ���У���Ҳ�ᾭ���������͵���Ӱ�����󴴽�����������������ʹ�ö���ʱҪע���һ���ؼ�������Ƕ���Ĵ��������ٷ�ʽ��ÿ����������涼��Ҫ��Դ���������ڴ档Ϊ����Դ���ظ����ã��������ٱ�ʹ��ʱ������Ӧ�ü�ʱ�ͷ���Դ�������ڴ档�ڼ򵥵ı�̳����£�������������������⡣���Ǵ������󣬰���ʹ�ã������������Ȼ�����������Ҫ��������ӣ����裬��������Ϊ�������һ�����н�ͨ���Ƶ�ϵͳ������Ҳ�����ڲֿ���������Ӱ��������߳�������ֿ�ϵͳ������һ���Ƚϼ򵥣�����һ����������ɻ��ļ��ϣ�ÿ���зɻ����뽻ͨ��������ʱ�����Ǿʹ���һ�����ɻ������󲢽�����뵽�����У��ȵ��ɻ��뿪ʱ����������������������ͬʱ�����ǻ���Ҫһ����¼�ɻ���Ϣ��ϵͳ��Ҳ����Щ���ݲ�����Ҫ���ƹ�����������ע�⡣���磬����Ҫ��¼���зɻ��е�С�ͷɻ��ĵ���Ϣ��������мƻ�)����ʱ�������ִ����˵ڶ�����������¼����С�ͷɻ��� ÿ������һ�����ɻ��������ʱ�򣬽�������һ�����ϣ���������С�ͷɻ���Ҳ����ͬʱ�������ڶ���������������⿪ʼ�����ˣ�������ô֪����ʱ��������Щ�����أ���ĳһ��ϵͳ������ɣ�������ϵͳ���ܻ�û�д�����ɡ������������������ĳ�����Ҳ���ܷ������� C++ ��������У���ʹ����һ������󣬱�����ȷ����ɾ�������������临���ˡ�������������ģ�����������������ô�����Ƶģ� �� C++ ����в��õĹ۵���Ч�ʵ�һ���������ѡ��Ȩ�����˳���Ա��Ϊ�˻����������ʱ�ٶȣ�����Ա�����ڱ�д����ʱ��ͨ�����������ջ��Stack����ʱ��Ϊ�Զ��������������������̬�洢����static storage area������ȷ���ڴ�ռ�ú�����ʱ�䡣��Щ����Ķ���ᱻ���ȷ����ڴ���ͷš����ֿ�����ĳЩ����·ǳ����á�Ȼ����Եģ�����Ҳ�����˳��������ԡ���Ϊ�ڱ�д����ʱ�����Ǳ���ҪŪ������������������ʱ�仹�����͡��������Ҫ���������һ���൱�ձ������ʱ��������������ơ��ֿ��������н�ͨ���Ƶȣ������ƾ�̫���ˡ��ڶ��ַ������ڶ��ڴ棨Heap���ж�̬�ش������������ַ�ʽ�£�ֱ�������������ǲ���ȷ����Ҫ�����Ķ�������������ʱ������͡�ʲôʱ����Ҫ��ʲôʱ���ڶ��ڴ��д����� ��Ϊ�ڴ��ռ���Ƕ�̬�����ģ�����������ʱ���ڶ��ڴ��Ͽ��ٿռ������ʱ����ܱ���ջ�ڴ���Ҫ������Ҳ��һ��������ջ�ڴ濪�ٺ��ͷſռ�ͨ����һ����ջָ�������ƶ���һ����ջָ�������ƶ��Ļ��ָ����ٶ��ڴ�ռ��ʱ��ȡ�����ڴ���Ƶ���ơ���̬����������һ��һ���Ե��߼����裺���������ڱ�ø��ӣ���˶�����ڴ���Һ��ͷŶԶ���Ĵ���Ӱ�첻�󡣣�ԭ�ģ�The dynamic approach makes the generally logical assumption that objects tend to be complicated, so the extra overhead of finding storage and releasing that storage will not have an important impact on the creation of an object.�����⣬���õ�����Զ�������Ľ��������Ҫ��Java ʹ�ö�̬�ڴ���䡣ÿ�δ�������ʱ��ʹ�� new �ؼ��ֹ����ö���Ķ�̬ʵ�������ִ�����һ�����⣺������������ڡ���֮���ڴ棬��ջ�ڴ��д������󣬱������ܹ�ȷ���ö�����������ڲ��Զ���������Ȼ��������ڶ��ڴ洴������Ļ����������ǲ�֪�������������ڵġ��� C++ ��������Ա�̷�ʽȷ����ʱ���ٶ��󣬷�����ܵ����ڴ�й©��Java ���ڴ�����ǽ����������ռ����ϵģ������Զ����ֶ����ٱ�ʹ�ò��ͷ��ڴ档�����ռ����Ĵ��ڴ����˼���ı�����������������֮ǰ����Ҫ���ٵ�����ͱ�д��ش������������ˣ������ռ����ṩ�˸��߼���ı��գ��Է�ֹǱ�ڵ��ڴ�й©���⣬�������ʹ������ C++ ��Ŀû�䡣Java �������ռ����������������ڴ��ͷŵ����⣨��Ȼ�ⲻ���������������������棩�������ռ���֪������ʲôʱ���ٱ�ʹ�ò����Զ��ͷ��ڴ档��ϵ��̳кͽ����ڶ��д�������Ļ��ƣ�Java �ı�����̱��� C++ Ҫ�򵥵öࡣ������Ҫ���ľ�����Ҫ�˷����ϰ�Ҳ���ٺܶ࣡�쳣�����Ա�����Ա���������������Ĵ�����һֱ���Ǹ����⡣��Ϊ������Ƴ�һ���õĴ������������������������Զ�������������⣬��������ⶪ���˳�����������ߡ��������������������¶����Թ����������ױ���ܵİ�;���ϵĴ�ʩ��ͨ��ֻ����Դ��󡣶�����������������Ҫ�����ǣ�������������Ա֮���Լ���׳ɶ��������Բ�������ơ����仰˵���������Ա��ʱ���û����������Щ�����ͺ����ױ����ǡ��쳣�������ƽ��������ֱ�ӽ���������������ǲ���ϵͳ�����쳣����Exception����һ���ӳ����㡰�׳�����thrown�����ܱ��ض����͵��쳣�������򲶻�(catch)��һ��������������ų�����������У��������������ʱ��ű�ִ�С��������ǵı�����򵥣������ٷ����������ˡ����⣬�쳣���񷽷����صĴ���ֵ�ͷ�������������ʾ��������ı�־λ�������Ա����ԡ��쳣�ķ����ǲ��ᱻ���Եģ����վ�����ĳһʱ�̱���������󣬡��쳣���ơ��ṩ��һ�ֿɿ��شӴ���״���лָ��ķ�����ʹ�����ǿ��Ա�д������׳�ĳ�����ʱ��ֻҪ�������׳����쳣������ָ���������м��ɣ������˳���Java ���쳣���������ڱ����������ӱ������Java ��һ��ʼ���������쳣����������㲻�ò�ʹ���������� Java ����Ψһ���ܵĴ��󱨸淽�������û�б�д�ʵ����쳣�������룬�㽫���յ�һ������ʱ������Ϣ�������б��ϵ�һ������ʱ���ó���Ĵ�������ø����ס�ֵ��ע����ǣ��쳣���������������������ԡ����������������������쳣ͨ���ɶ����ʾ�������������������֮ǰҲ�����쳣����������С��������̳���������ݶ���ͺ������á�Ҫ�ҵ��������ͼ�������Ҫ�����н���һ��ģ�ͣ�Ū�庯�����ú͸��ײ�ĸ����Щ�����������ţ���Ϊ���ǵı�ʾ�����������������������Ҫ��������⣬�������������Ƴ���ʱ��Ҫ�м��ʾ��ԭ��OOP ��������̱�̵Ļ����������������µĸ���������˻���Ϊʹ�� Java ����̻��ͬ�ȵ�������̱��Ҫ�����ӡ��������������һ����ϲ��ͨ������ Java �淶��д�ĳ�����������̳�������ױ����⡣�㿴�����Ƕ���ĸ����Щ������վ�ڡ�����ռ䡱�ģ�������վ�ڼ�����Ƕȵġ���������ռ䡱�����Լ�������Ϣ��������ָʾ�ÿռ��еĻ����������̵�һ���ŵ��ǣ�������õ� Java �����������ױ����Ķ����⡣���� Java ���ĸ����ԣ�ͨ������Ҫд�Ĵ���Ҳ���ٵöࡣOOP �� Java ��һ���ʺ�ÿ���ˡ������Լ��������Լ������з������Ƚ��Ǻ���Ҫ�ġ����ֿ��Ǻ��پ����ǲ���ѡ�� Java������ڿ�Ԥ����δ����Java �����ܺܺõ���������ض�������ô��Ӧ��ȥѰ����������������ر��ǣ����Ƽ��� Python�����������Ȼѡ�� Java ��Ϊ��Ŀ������ԣ���ϣ��������Ӧ�������ѡ�����ʲô���Լ�Ϊʲôѡ����������� 2 �� ��װ Java �ͱ����������ڣ�������Ϊ����Ķ�֮����Щ׼���ɣ��ڿ�ʼѧϰ Java ֮ǰ�������Ҫ�Ȱ�װ�� Java �ͱ����Դ����ʾ������Ϊ���ǵ������С�ר�ŵĳ�ѧ�ߡ��ӱ��鿪ʼѧϰ��̣������һ���ϸ�ؽ������ʹ�������С� ������Ѿ��д˷���ľ����ˣ�����������ΰ�װ˵���������Դ˴��������κ����������Բ������������ͨ�� Google �����ҵ��𰸡����������������������� StackOverflow �����ʡ�����ȥ YouTube ����û����صİ�װ˵�����༭����������Ҫ��װһ���༭�����������޸ı���������� Java ���롣�п����㻹��Ҫʹ�ñ༭��������ϵͳ�����ļ������һЩ�������� IDE��Integrated Development Environments�����ɿ������������� Eclipse��NetBeans �� IntelliJ IDEA (����ע������Ŀǿ���Ƽ� IDEA)���༭����һ�ָ�������ı��༭����������Ѿ�����һ������˳�ֵ� IDE���ǾͿ���ֱ�����ˡ�Ϊ�˷�������ѧϰ��ͳһ�½�ѧ���������Ƽ����ʹ�� Atom ����༭������ҿ����� atom.io �����ء�Atom ��һ����ѿ�Դ�����ڰ�װ�ҿ�ƽ̨��֧�� Window��Mac �� Linux�����ı��༭��������֧�� Java �ļ������ IDE �ĺ��أ����Ƚ�����������ѧϰ��������빤�ߡ�Atom ���������෽��ı༭���ܣ�������һ���ᰮ������������� Atom ʹ�õ�ϸ��������Ե�������վ��Ѱ�ҡ����кܶ������ı༭������һ�����Ļ���Ⱥ�壬���������������ĸ������ã�������ҵ�һ�����ϲ���ı༭������һ��ʹ��Ҳûʲô�Ѷȡ���Ҫ���ǣ���Ҫ��һ����������ġ�Shell�����֮ǰû�нӴ�����̣���ô�п��ܶ� Shell�������д��ڣ� ��̫��Ϥ��shell ����ʷ����׷�ݵ����ڵļ���ʱ������ʱ�ڼ�����ϵĲ����Ƕ�ͨ������������еģ������ͨ��������Ӧ�����еĲ������ǻ����ı��ġ����ܺ����ڵ�ͼ���û�������ȣ�Shell ������ʽ��ԭʼ������ͬʱ shell ҲΪ�����ṩ���������õĹ������ԡ���ѧϰ����Ĺ����У����ǻᾭ��ʹ�õ� Shell�����������ⲿ�ֵİ�װ���������� Java ����Mac�������۹�ƣ���Ļ���ϽǵķŴ�ͼ�꣩��Ȼ����� terminal��������������С������Ļ��Ӧ�ó�����Ҳ���Ե�����return�������������������û��µ� shell ���ڡ�windows�����ȣ�ͨ��Ŀ¼�� windows ��Դ��������Windows 7: ������Ļ���½ǵġ���ʼ��ͼ�꣬���롰explorer���󰴻س�����Windows 8: �� Windows+Q������ ��explorer�� �󰴻س�����Windows 10: �� Windows+E ����Դ������������������Ŀ¼�������������Ͻǵġ��ļ���ѡ���ѡ�񡰴� Window PowerShell������ Shell��Linux: �� home Ŀ¼�� Shell��Debian: �� Alt+F2�� �ڵ����ĶԻ��������롰gnome-terminal��Ubuntu: ����Ļ������һ���ѡ�� �����նˡ������߰�ס Ctrl+Alt+TRedhat: ����Ļ������һ���ѡ�� �����նˡ�Fedora: �� Alt+F2���ڵ����ĶԻ��������롰gnome-terminal��Ŀ¼Ŀ¼�� Shell �Ļ���Ԫ��֮һ��Ŀ¼���������ļ�������Ŀ¼��Ŀ¼�ͺñ����ķ�֧������鼮����ϵͳ�ϵ�һ��Ŀ¼������������������Ŀ¼��Ϊ��֧��������ѧ����������ô���ǾͿ���˵����һ���鼮Ŀ¼����������ѧ������������Ŀ¼��ע�⣺Windows ʹ�� \\ ������ / ���ָ�·����Shell ��������������չʾ�� Shell ������ϵͳ�д�����ͬ�����ڱ����ԭ�������о�һЩ�� Shell �еĻ���������xxxxxxxxxx����Ŀ¼�� cd &lt;·��&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cd .. �ƶ����ϼ�Ŀ¼ &nbsp; &nbsp; &nbsp; &nbsp; pushd &lt;·��&gt; ��ס��Դ��ͬʱ�ƶ�������Ŀ¼��popd ������Դ Ŀ¼�о٣� ls �оٳ���ǰĿ¼�����е��ļ�����Ŀ¼���������������ļ����� &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ����ѡ��ʹ��ͨ��� * ����С������Χ�� &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ʾ��(1)�� �о������ԡ�.java����β���ļ������� ls *.java (Windows: dir *.java) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ʾ��(2)�� �о������ԡ�F����ͷ����.java����β���ļ�������ls F*.java (Windows: dir F*.java) ����Ŀ¼�� &nbsp; Mac/Linux ϵͳ��mkdir &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ʾ����mkdir books &nbsp; Windows &nbsp; ϵͳ��md &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ʾ����md books �Ƴ��ļ��� &nbsp; Mac/Linux ϵͳ��rm &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ʾ����rm somefile.java &nbsp; Windows &nbsp; ϵͳ��del &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ʾ����del somefile.java �Ƴ�Ŀ¼�� &nbsp; Mac/Linux ϵͳ��rm -r &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ʾ����rm -r books &nbsp; Windows &nbsp; ϵͳ��deltree &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ʾ����deltree books �ظ���� !! �ظ��������� &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ʾ����!n �ظ�������n������ ������ʷ�� &nbsp; Mac/Linux ϵͳ��history &nbsp; Windows &nbsp; ϵͳ���� F7 �� �ļ���ѹ�� &nbsp; Linux/Mac ���������н�ѹ���� unzip�������ͨ��������Ϊ Windows ��װ�����н�ѹ���� unzip�� &nbsp; ͼ�ν����£�Windows ��Դ��������Mac Finder��Linux Nautilus ��������Ч�������Ҽ��������ļ��� &nbsp; �� Mac ��ѡ��open������ Linux ��ѡ��extract here�������� Windows ��ѡ��extract all������ &nbsp; Ҫ�˽���� shell �ĸ�����Ϣ������ά���ٿ������� Windows shell��Mac/Linux�û������� bash shell�� Java ��װΪ�˱�������д���ʾ������������밲װ JDK��Java Development Kit��JAVA �����������߰����������в��õ��� JDK 8��Windows����Ϊ Chocolatey ����װ˵��������������ʾ�����������������ȴ�Ƭ�̣������� Java ��װ��ɲ��Զ���ɻ����������á�xxxxxxxxxx choco install jdk8MacintoshMac ϵͳ�Դ��� Java �汾̫�ϣ�Ϊ��ȷ������Ĵ���ʾ���ܱ���ȷִ�У�����뽫���ȸ��µ� Java 8��������Ҫ����ԱȨ������������Ĳ��裺����Ϊ HomeBrew ����װ˵������װ��ɺ�ִ������ brew update ���µ����°汾����������ִ���������������װ Java��xxxxxxxxxx brew cask install java�����ϰ�װ����ɺ����������Ҫ������ʹ���ο��˻������б����еĴ���ʾ����LinuxUbuntu/Debian��xxxxxxxxxx &nbsp; &nbsp; sudo apt-get update &nbsp; &nbsp; sudo apt-get install default-jdkFedora/Redhat��xxxxxxxxxx &nbsp; su-c \"yum install java-1.8.0-openjdk\"(ע��ִ�������ڵ����ݾͿ��԰�װ)У�鰲װ���µ����������룺xxxxxxxxxxjava -version��������� ��Ӧ�ÿ�������������Ϣ(�汾����Ϣ���ܲ�һ������xxxxxxxxxxjava version \"1.8.0_112\"Java(TM) SE Runtime Environment (build 1.8.0_112-b15)Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)�����ʾ�����Ҳ��������޷���ʶ������ݰ�װ˵�����ԣ���������У����Ե� StackOverflow Ѱ�Ҵ𰸡���װ�����д���ʾ���� Java ��װ��ϣ���һ�����ǰ�װ����Ĵ���ʾ���ˡ���װ��������ƽ̨һ�£��� GitHub �ֿ������ر������ʾ����ѹ������ѡĿ¼�ʹ�� Windows ��Դ��������Mac Finder��Linux �� Nautilus ��������Ч����������ڸ�Ŀ¼�´� Shell�����������ȷ��Ŀ¼�У���Ӧ�ÿ�����Ŀ¼����Ϊ gradlew �� gradlew.bat ���ļ����Լ����������ļ���Ŀ¼��Ŀ¼�����е��½����Ӧ���� shell ������������������У�xxxxxxxxxx &nbsp; &nbsp; Windows ϵͳ�� &nbsp; &nbsp; &nbsp; &nbsp; gradlew run &nbsp; &nbsp; Mac/Linux ϵͳ�� &nbsp; &nbsp; &nbsp; ./gradlew run��һ�ΰ�װʱ Gradle ��Ҫ��װ��������������صİ������Ե�Ƭ�̡���װ��ɺ󣬺����İ�װ�����ܶࡣע���� ��һ������ gradlew ����ʱ�������ӻ�������Gradle �����������鹹���Ĵ��� Gradle ���񶼿����Զ����С�Gradle ʹ��Լ���������õķ�ʽ�������ü��ɾ߱��߿����ԡ������С�һ��ȥ���С���ĳЩ���������ڴ˻��޷�ִ�гɹ�����������ͨ����ʹ���ϵ� Gradle �����б���xxxxxxxxxx &nbsp; ���뱾���е����� java �ļ������˲��ִ���ʾ���� &nbsp; gradlew compileJava &nbsp; ���벢ִ�� java �ļ���ĳЩ�ļ��ǿ������ &nbsp; gradlew run &nbsp; ִ�����еĵ�Ԫ���ԣ��ڱ����16�»�����ϸ���ܣ� &nbsp; gradlew test &nbsp; ���벢����һ�������ʾ������ &nbsp; gradlew &lt;�����½�&gt;:&lt;ʾ������&gt; &nbsp; ʾ����gradlew objects:HelloDate�� 3 �� ����Զ����������˵����һ�ֲ�ͬ�����ԣ����ǻᷢ��һ����ͬ�����磡�� Ludwig Wittgenstein (1889-1951)��� C++ ��Java ��һ�ָ������������������ԡ���Ȼ���Ƕ��ǻ�����ԣ����� Java �У����������Ϊ��ϵ����ò������� C++ ���ǰ���Ҫ����������������ֱ�̷����Ҳ�� C++ ֧�������� C ��ԭ������Ϊ C++ �� C ���Եĳ�����������Ҳͬʱ���������� C ���Բ��߱������ԣ���ʹ�� C++ ��ĳЩ������ڸ��ӡ�Java ���Լ�����ֻ������������̡���ʼѧϰ֮ǰ��������Ҫ��˼ά���������������硣�����㽫�˽⵽ Java ����Ļ�����ɣ�ѧϰ�� Java ������������Զ����˼�롣������������ִ���ʲô��õ�弴ʹ����õ�壬Ҳ���ɷҷ������������� ɯʿ���ǣ�������ŷ������Ҷ���������еı�����Զ�������ڴ��е�Ԫ�ء���ʱ����Ա����Ҫ����ʶ��ֱ�ӻ��ӵز������ǡ��� C/C++ �У�����Ĳ�����ͨ��ָ������ɵġ�Java ��������Զ����˼��͵�һһ�µ��﷨��ʽ�������⡣������Կ�Ϊ���󣬵����������ݵı�ʶ��ʵ����ֻ�ǶԶ���ġ����á� 1�� ���������ǿ�����ң���������ã�ȥ���ݵ��ӣ����󣩡�ֻҪӵ�ж���ġ����á����Ϳ��Բ��ݸá����󡱡����仰˵����������ֱ�ӽӴ����ӣ��Ϳ�ͨ��ң���������ã����ɵؿ��Ƶ��ӣ����󣩵�Ƶ�������������⣬û�е��ӣ�ң����Ҳ���Ե������ڡ�����˵���������һ�������á�������ζ�����Ȼ��һ����֮�����ġ����󡱡�����������һ�� String ���ã����ڱ��浥�ʻ���䡣����ʾ����xxxxxxxxxx &nbsp; &nbsp;String s;��������ֻ�Ǵ�����һ�� String ��������ã����Ƕ���ֱ������ʹ�û���ִ�����Ϊ��ʱ�㲢û�и����� s ��ֵ--ָ���κζ���ͨ������ȫ�������ǣ�����һ�����õ�ͬʱ���г�ʼ��������ʾ����xxxxxxxxxx &nbsp; &nbsp;String s = \"asdf\";Java �﷨��������ʹ�ô�˫���ŵ��ı���������ʼ���ַ�����ͬ�����������͵Ķ���Ҳ����Ӧ�ĳ�ʼ����ʽ�����󴴽������á��������������󡱡��� Java �У�ͨ������ʹ��new������������һ���¶���new �ؼ��ִ���������һ���µĶ���ʵ�������ԣ�����Ҳ������������ʾǰ��Ĵ���ʾ����xxxxxxxxxx &nbsp; &nbsp;String s = new String(\"asdf\");����չʾ���ַ�������Ĵ������̣��Լ���γ�ʼ�������ַ��������� String �������⣬Java �����Դ��������ֳɵ��������͡�����֮�⣬���ǻ����Դ����Լ����������͡���ʵ�ϣ����� Java ��������е�һ�������Ϊ���ڱ�������ѧϰ�н���Ӵ��������ݴ洢��ô������������ʱ����δ洢���أ��������ڴ�����ô����ġ��� 5 ����ͬ�ĵط����Դ洢���ݣ��Ĵ�����Registers�����Ĵ洢����λ�� CPU �ڲ� 2��Ȼ�����Ĵ���������ʮ�����ޣ����ԼĴ�������������з��䡣���Ƕ���û��ֱ�ӵĿ���Ȩ��Ҳ�޷����Լ��ĳ������ҵ��Ĵ������ڵ��ټ�����һ���棬C/C++ ���������������������Ĵ����ķ��䣩��ջ�ڴ���Stack�������ڳ����ڴ� RAM��������ʴ洢����Random Access Memory�������У���ͨ��ջָ���ô�������ֱ��֧�֡�ջָ�����Ʒ����ڴ棬�����ͷ��ڴ棬����һ�ֿ�����Ч���ڴ���䷽�����ٶȽ����ڼĴ�������������ʱ��Java ϵͳ����׼ȷ��֪��ջ�ڱ������������������ڡ�����Լ�������˳��������ԡ���ˣ���Ȼ��ջ�ڴ��ϴ���һЩ Java ���ݣ��ر��Ƕ������ã��� Java ����ȴ�Ǳ����ڶ��ڴ�ġ����ڴ���Heap������һ��ͨ�õ��ڴ�أ�Ҳ�� RAM ���򣩣����� Java ���󶼴��������С���ջ�ڴ治ͬ������������Ҫ֪����������ڶ��ڴ���ͣ���೤ʱ�䡣��ˣ��ö��ڴ汣�����ݸ�������ԡ�����һ������ʱ��ֻ���� new ����ʵ�������󼴿ɣ���ִ�д���ʱ�����Զ��ڶ��н����ڴ���䡣������������д��۵ģ�������������ڴ�Ҫ��ջ�ڴ���Ҫ�����ʱ�䣨��������� Java ��ջ�ڴ��ϴ������󣬾����� C++ �������Ļ���������ʱ������ƣ�Java �Ķ��ڴ������������Ѿ��ǳ��죬����ⲻ��һ��ֵ�ù��ĵ������ˡ������洢��Constant storage������ֵͨ��ֱ�ӷ��ڳ�������У���Ϊ������Զ����ı䡣�����ϸ񱣻����ɿ��ǽ���������ֻ���洢�� ROM ��ֻ���洢����Read Only Memory���� 3���� RAM �洢��Non-RAM storage��������ȫ�����ڳ���֮�⣬�ڳ���δ�����Լ����������ƺ���Ȼ���ڡ�������Ҫ�����ӣ���1�����л����󣺶���ת��Ϊ�ֽ�����ͨ�������͵���һ̨��������2���־û����󣺶��󱻷����ڴ����ϣ���ʹ������ֹ��������Ȼ���ڡ���Щ�洢�ķ�ʽ���ǽ�����ת������һ�������У�������Ҫʱ�ָ��ɳ���ġ����� RAM �Ķ���Java Ϊ�������־û��ṩ��֧�֡������� JDBC �� Hibernate ��Щ���Ϊʹ�����ݿ�洢�ͼ���������Ϣ�ṩ�˸����ӵ�֧�֡��������͵Ĵ洢��һ�������� Java ��ʹ��Ƶ�ʺܸߣ�������Ҫ����Դ�������� Java �Ļ������͡�֮������ô˵������Ϊ���ǵĴ���������ͨ�� new �ؼ�����������ͨ�� new �����Ķ����Ǳ����ڶ��ڴ��еģ��Դ˷�ʽ����С���򵥵ı��������ǲ�����ġ����Զ�����Щ�������͵Ĵ���������Java ʹ���˺� C/C++ һ���Ĳ��ԡ�Ҳ����˵������ʹ�� new ��������������ʹ��һ�����Զ��������� �������ֱ�Ӵ洢&quot;ֵ&quot;��������ջ�ڴ��У���˸��Ӹ�Ч��Java ȷ����ÿ�ֻ������͵��ڴ�ռ�ô�С�� ��Щ��С����������һЩ�����������Ż��������ı仯���仯�����ֲ�����Ҳ�� Java ���߿���ֲ�Ե�һ��ԭ������������С��Сֵ���ֵ��װ����boolean������Booleanchar16 bitsUnicode 0Unicode 216 -1Characterbyte8 bits-128+127Byteshort16 bits- 215+ 215 -1Shortint32 bits- 231+ 231 -1Integerlong64 bits- 263+ 263 -1Longfloat32 bitsIEEE754IEEE754Floatdouble64 bitsIEEE754IEEE754Doublevoid������Void���е���ֵ���Ͷ�������/�����ŵġ�������boolean�����͵Ĵ�Сû����ȷ�Ĺ涨��ͨ������Ϊȡ����ֵ ��true�� �� ��false�� �������������Լ���Ӧ�İ�װ���ͣ������ϣ���ڶ��ڴ����ʾ�������͵����ݣ�����Ҫ�õ����ǵİ�װ�ࡣ����ʾ����xxxxxxxxxxchar c = 'x';Character ch = new Character(c);������Ҳ����ʹ���������ʽ�����������Զ�ת���ɰ�װ���ͣ��Զ�װ�䣩��xxxxxxxxxxCharacter ch = new Character('x');��Եģ���װ����ת��Ϊ�������ͣ��Զ����䣩��xxxxxxxxxxchar c = ch;����ԭ�����Ժ���½�����͡��߾�����ֵ�� Java �����������͵����ݿ����ڸ߾��ȵļ��㡣������ BigInteger �� BigDecimal���������Ǵ��¿��Ի���Ϊ����װ���͡����������ǲ�û�ж�Ӧ�Ļ������͡�������������ķ����ṩ�Ĳ�������Ի�������ִ�еĲ������ơ�Ҳ����˵���ܶ� int �� float �������㣬�� BigInteger �� BigDecimal ����Ҳͬ�����ԣ�ֻ��������Ҫͨ���������ǵķ�����ʵ�ֶ�������������⣬�����漰���ļ��������࣬���������ٶȻ���һЩ����Ȼ�������������ٶȣ��������˾��ȡ�BigInteger ֧�����⾫�ȵ������������ھ�ȷ��ʾ�����С������ֵ��ͬʱ����������в��ᶪʧ���ȡ� BigDecimal ֧�����⾫�ȵĶ������֡����磬���������о�ȷ�Ļ��Ҽ��㡣���������������ϸ��Ϣ����ο� JDK �ٷ��ĵ�������Ĵ洢���������Զ�֧���������͡��� C �� C++ ��ʹ��������Σ�յģ���Ϊ��Щ����ֻ���ڴ�顣�������������ڴ��֮���������ڳ�ʼ��֮ǰʹ�øö��ڴ棨������̴��󣩣������ǲ���Ԥ��ġ�Java �������ҪĿ��֮һ�ǰ�ȫ�ԣ������������ C �� C++ ����Ա�����ⲻ���� Java �����֡��� Java �У�����ʹ��ǰ��Ҫ����ʼ�������Ҳ��ܷ������鳤����������ݡ����ַ�Χ��飬����ÿ���������������ڴ濪��������ʱ����±�Ķ���ʱ��Ϊ���۵ģ����ɴ˻����İ�ȫ�Ժ�Ч�ʵ������ֵ�õġ������� Java ���������Ż���Щ�������������Ǵ�����������ʱ��ʵ�����Ǵ�����һ���������飬����ÿ�����õĳ�ʼֵ��Ϊ null ����ʹ�ø�����֮ǰ�����Ǳ���Ϊÿ������ָ��һ������ ��������ǳ���ʹ��Ϊ null �����ã����������ʱ��������ˣ��� Java �оͷ�ֹ����������ĳ���������ǻ��ɴ����������͵����顣������ͨ������������ڴ�ȫ����������֤��ʼ���������Ժ���ϸ�������飬�ر����������½��С�����ע��Java �����������͵�ע�͡���һ���Ǵ�ͳ�� C ����ע�ͣ��� /* ��ͷ�����Կ�Խ���У��� */ ������ע�⣬�������Ա�ڶ���ע�͵�ÿһ�п�ͷ���� *�������㾭���ῴ����xxxxxxxxxx/* ����* ��Խ���е�* ע��*/�����ס��/* �� */ ֮������ݶ��Ǳ����Եġ������㽫���Ϊ��������Ҳ��û������ġ�xxxxxxxxxx/* ���ǿ�Խ���е�ע�� */�ڶ���ע����ʽ���� C++ �����ǵ���ע�ͣ��� // ��ͷ��һֱ�������н���������ע�ͷ����ҳ��ã���Ϊֱ�ۼ򵥡������㾭��������xxxxxxxxxx// ���ǵ���ע������������һЩ��������У���������������������Ҫ�����Ĺ�����һ��������Ҫ����ã������������������Ӧ��ʲôʱ��ȥ���أ������������ڵĻ��һᵼ������ bug����С��������� Java �����ͨ���ͷŴ洢�����������ġ�������������������Զ���������ĸ��������������ڸ÷�Χ�ڶ���ı������Ŀɼ��Ժ��������ڡ��� C�� C++ �� Java �У����������ɴ����� &#123;&#125; ��λ�þ����ġ����磺xxxxxxxxxx{ &nbsp; &nbsp;int x = 12; &nbsp; &nbsp;// �� x �������� &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp;int q = 96; &nbsp; &nbsp; &nbsp; &nbsp;// x �� q �����Կ��� &nbsp; } &nbsp; &nbsp;// �� x �������� &nbsp; &nbsp;// ���� q ������������}Java �ı���ֻ�������������ڲſ��á�����ʹ�� Java ����������Ķ������� Java ��һ�����ɸ�ʽ�����ԣ�����Ŀո��Ʊ����ͻس�������Ӱ������ִ�н������ Java �У��㲻��ִ�����²�������ʹ���� C �� C++ ���ǺϷ��ģ�xxxxxxxxxx{ &nbsp; &nbsp;int x = 12; &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp;int x = 96; // Illegal &nbsp; }}�������У� Java ������������ʾ���� x �Ѿ���������ˡ���ˣ��� C/C++ �н�һ���ϴ�������ı���&quot;����&quot;�������������� Java ���ǲ��������ġ� ��Ϊ Java ���������Ϊ�������ᵼ�³�����ҡ�����������Java ������������;��в�ͬ���������ڡ�������ʹ�� new �ؼ��������� Java ����ʱ�������������ڽ��ᳬ����������ˣ�������δ���ʾ����xxxxxxxxxx{ &nbsp; &nbsp;String s = new String(\"a string\");}// �������յ������У����� s ���������յ�ͽ����ˡ����ǣ����� s ָ����ַ���������Ȼ����ռ���ڴ档����δ����У������޷������������֮��������������ΪΨһ���������� s �ѳ�����������ķ�Χ���ں�����½��У����ǻ���ѧϰ��ô�ڱ���д��ݺ͸��ƶ�������á�ֻҪ����Ҫ��new �����Ķ���ͻ�һֱ�����ȥ�� ����� C++ �����в����ڴ���ܻ���ֵ�������⣬��Щ������ Java �ж����������ˡ��� C++ ���㲻��Ҫȷ��������ڴ���������ķ�Χ�ڴ��ڣ���������ʹ��������֮�󣬽������١���ô�������ˣ������� Java �в�û������������Щ������ô������α��� C++ �г��ֵ��ڴ汻�����Ӷ���������������أ����ǣ�Java �������ռ����������� new �����Ķ����ж���Щ���ٿɴ�̶��ͷ���Щ��ռ�õ��ڴ棬�������µĶ���ʹ�á�Ҳ����˵�����ǲ��ص����ڴ���յ������ˡ���ֻ��򵥴������󼴿ɡ����䲻�ٱ���Ҫʱ�������б������ռ����ͷš��������ջ�����Ч��ֹ�������Ա�����ͷ��ڴ����ɵġ��ڴ�й©�����⡣��Ĵ����������һ�ж��Ƕ�����ô��ʲô������ĳһ��������ۺ���Ϊ�أ����仰˵����ʲôȷ���˶�������ͣ�����ܺ���Ȼ���뵽 type �ؼ��֡����ǣ���ʵ�ϴ���������������Զ�ʹ�� class �ؼ�����������һ���µĶ��� ͨ���� class �ؼ��ֵĺ���Ľ�����ĵ����ơ����´���ʾ����xxxxxxxxxxclass ATypeName { // ����������ڲ�}�������У�����������һ���µ����ͣ������������ֻ��һ��ע�͡���������һ������ͨ�� new �ؼ���������һ���������͵Ķ������£�xxxxxxxxxxATypeName a = new ATypeName();������Ϊֹ�����ǻ������������������ʲô�£����������������κ����������Ϣ��������������������ﶨ��һЩ�������ֶ������Ǵ�����һ����֮�����ǿ������������������͵�Ԫ�أ�������method�����ֶΣ�field��������ֶο����ǻ������ͣ�Ҳ�������������͡��������ֶ��Ƕ�ĳ����������ã���ô����Ҫ��ʼ�������ý��������һ��ʵ�ʵĶ����ϣ�ͨ��֮ǰ���ܵĴ�������ķ�������ÿ�������������洢���ֶεĿռ䡣ͨ�����ֶβ��ڶ���乲����������һ������ĳЩ�ֶε���Ĵ���ʾ����xxxxxxxxxxclass DataOnly { &nbsp; &nbsp;int i; &nbsp; &nbsp;double d; &nbsp; &nbsp;boolean b;}�������˴洢����֮��ʲôҲ�����������ǣ�������Ȼ����ͨ������Ĵ�������������һ������xxxxxxxxxx &nbsp; &nbsp;DataOnly data = new DataOnly();���Ǳ���ͨ����������������ָ���ֶ�ֵ����ʽ����������.�������ƻ��ֶ����ơ�����ʾ����xxxxxxxxxx &nbsp; &nbsp;data.i = 47; &nbsp; &nbsp;data.d = 1.1; &nbsp; &nbsp;data.b = false;��������޸Ķ����ڲ���������һ����������ݣ�����ͨ�������ĸ�ʽ�޸ġ�����ʾ����xxxxxxxxxx &nbsp; &nbsp;myPlane.leftTank.capacity = 100;����������ַ�ʽǶ��������󣨾�����������ƻ�������ң�����������Ĭ��ֵ�����ĳ�Ա�������ֶΣ��ǻ������ͣ���ô�����ʼ��ʱ����Щ���ͽ��ᱻ����һ����ʼֵ������������ʼֵbooleanfalsechar\\u0000 (null)byte(byte) 0short(short) 0int0long0Lfloat0.0fdouble0.0d��ЩĬ��ֵ���� Java ��ʼ�����ʱ��Żᱻ���衣���ַ�ʽȷ���˻������͵��ֶ�ʼ���ܱ���ʼ������ C++ �в��ᣩ���Ӷ������� bug ����Դ�����ǣ���Щ��ʼֵ���ڳ�����˵����һ���ǺϷ�������ȷ�ġ� ���ԣ�Ϊ�˰�ȫ���������ʼ����ʽ�س�ʼ������������Ĭ��ֵ�ĸ��貢�������ھֲ����� ���� ��Щ����������ֶεı����� ��ˣ����ڷ����ж���Ļ����������ݣ����£�xxxxxxxxxx &nbsp; &nbsp;int x;����ı��� x �����Զ���ʼ��Ϊ 0�������ʹ�ñ��� x ֮ǰ������Ա������������Ϊ�丳ֵ���� C ��C++ һ�£������������������һ���� Java ������ʾ���ǡ�����ʱ���󣬸ñ���������δ����ʼ������ ��һ�����ı� C++ ���ã��ں����У�������ֻ����ʾ���棬���� Java ����ֱ�ӱ���������ʹ�����������ԣ��� C �� C++���У�ʹ������ ���� (function) ���������ӳ����� Java �У�����ʹ������ ������method������ʾ����ĳ�µķ�ʽ������ Java �У��������������ܽ�����Щ��Ϣ�������Ļ�����ɲ��ְ������ơ��������������͡������塣��ʽ�磺xxxxxxxxxx [��������] [������](/*�����б�*/){ &nbsp; &nbsp; // ������ }�������������ķ������ͱ����˵��������ʱ�᷵�صĽ�����͡������б�����ʾ�˿ɱ����ݵ������ڲ��Ĳ������ͼ����ơ��������Ͳ����б�ͳ��Ϊ����ǩ����signature of the method����ǩ����Ϊ������Ψһ��ʶ��Java �еķ���ֻ����Ϊ���һ���ִ�������ֻ�ܱ����������� 4�����Ҹö��������Ȩ����ִ�е��á���������ô���ķ�����������ڱ���ʱ���������ǿ�����������������һ������ķ�����xxxxxxxxxx[��������].[������](����1, ����2, ����3);��������������������һ���������� a �ķ��� f �������������� int �ͽ�������ǿ������±�ʾ��xxxxxxxxxxint x = a.f();�����з��� f �ķ���ֵ���ͱ���ͱ��� x �����ͼ��� �����÷�������Ϊ��ʱ����Ϊ���������Ϣ����������̿����ܽ�Ϊ�����������Ϣ�������б����������б�ָ���˴��ݸ���������Ϣ����������ܲµ��ģ���Щ��Ϣ���� Java �е�����������Ϣ ���Զ������ʽ���ݡ������б�����ָ��ÿ����������ͺ����ơ�ͬ�������ǲ�û��ֱ�Ӵ������󣬶����ڴ��ݶ������� 5 ���������õ����ͱ�������ȷ�ġ����������Ҫ String ����������봫�� String�������������������xxxxxxxxxxint storage(String s) { &nbsp; &nbsp;return s.length() * 2;}�˷������㲢����ĳ���ַ�����ռ���ֽ��������� s ������Ϊ String ���� s ���ݸ� storage() �����ǿ��԰����������κ���������һ������������������Ϣ����������ǵ��� length() ����������һ�� String �����������ַ����е��ַ������ַ�����ÿ���ַ��Ĵ�СΪ 16 λ�� 2 ���ֽڡ��㻹������ return �ؼ��֣���ִ��������������ȣ�����ζ�š�����ִ�н���������Σ���������з���ֵ����ô��ֵ�ͽ��� return ���֮���������ֵ��ͨ������xxxxxxxxxxs.length() * 2�����ġ��ڷ����У����ǿ��Է����κ����͵����ݡ�������ǲ��뷽���������ݣ������ͨ����������ʶ void ����������һ�����践��ֵ�ķ����� ����ʾ����xxxxxxxxxxboolean flag() { &nbsp; &nbsp;return true;} double naturalLogBase() { &nbsp; &nbsp;return 2.718;} void nothing() { &nbsp; &nbsp; return;} void nothing2() { }����������Ϊ void ʱ�� return �ؼ��ֽ������˳�����������ڷ����������� return �ɱ�ʡ�ԡ����ǿ�����ʱ�ӷ����з��أ�����������������Ϊ�� void�����������ǿ�����Ƿ�����Ӧ���͵�ֵ��������������ܻ�����о�����ֻ������һ�Ѱ������ַ����Ķ�������Щ�����У���������Ϊ������������Ϣ���������󡣴󲿷������ȷʵ��ˡ�������һ�µ�����������ǽ���ѧϰ����ڷ�����������������ɸ��ײ㡢��ϸ�Ĺ��������ڱ��£�֪����η�����Ϣ�͹��ˡ������д�ڿ�����һ�� Java ����֮ǰ�����ǻ��������������������⡣�����ɼ��������������κ�һ�ű�������ж���һ�����⡣�����������ģ����ʹ����ͬ����������ô����������������ƣ�����ֹ�������Ʒ�������ͻ���أ��� C ���Ա�������Ǻܾ�����ս�Եģ���Ϊ����ͨ����һ���޷����������ƺ���C++ ������Ƕ�������У��������ǲ����Ƕ�����������еĺ�������ͻ��Ȼ����C++ ��������ȫ�����ݺ�ȫ�ֺ�����������п��ܷ�����ͻ��Ϊ�˽��������⣬C++ ʹ�ø��ӵĹؼ��������������ռ���Java ��ȡ��һ���µķ���������������Щ���⣺Ϊһ���������һ����ȷ�����ƣ�Java ������ϣ�����Ƿ���ʹ���Լ���������������Ϊ����ͨ����Ψһ�ġ�����ҵ������� MindviewInc.com�������ҽ��ҵ� foibles �������Ϊ com.mindviewinc.utility.foibles����ת������. ����������Ŀ¼�Ļ��֡��� Java 1.0 �� Java 1.1 �У�����չ�� com�� edu�� org �� net �Ȱ�������д���������л�����������Ƶ����ƣ�com.mindviewinc.utility.foibles��Ȼ������ Java 2 �Ŀ��������У����Ƿ�����ᵼ�����⣬��������������������Сд�ġ��˻�����ζ�������ļ����Զ��������Լ��������ռ��У��ļ��е�ÿ���඼����Ψһ��ʶ����������Java ���Կ��Է�ֹ���Ƴ�ͻ��ʹ�÷��� URL ��һ���µ������ռ䷽�����ڴ�֮ǰ��δ������������ô������Java ����������Щ�������ԡ��ؽ������ķ����������������������δ�����Ծ�����һ�����ܲ�������������ô�ڽ������ָù��ܵ��������������ͨ��Ϊʱ��������Щ����̫�����˾͵ô�������ɾ���¹��ܡ���ʹ�÷��� URL �������ռ����ļ�·����������ᵼ�� BUG������ȴ��Դ������������鷳�������� com.mindviewinc.utility.foibles ������Ŀ¼�ṹ�У����Ǵ����� com �� mindviewinc ��Ŀ¼�����Ǵ��ڵ�ΨһĿ�ľ���������ʾ�������� URL�����ַ�ʽ�ƺ�Ϊ�����ڱ�д Java �����е�ĳ��������˴��š���Ŀ¼��������νṹ�����ǲ������ڱ�ʾ���� URL�������ڲ���������Ϣ����Щ��·�����������ڴ洢�й�Ŀ¼�е����ݵ����ݡ������ϣ���������Ƶķ�ʽʹ��Ŀ¼�����ַ������Դӡ����˾�ɥ����������ץ�񡱣������������� Java ���룬�����ʹ��ר��Ϊ����Ƶ� IDE ���������롣���� NetBeans��Eclipse �� IntelliJ IDEA��ʵ���ϣ���Щ IDE ��Ϊ���ǹ����ʹ������ο�Ŀ¼�ṹ�������Ȿ���е����ӣ��Ҳ��������νṹ�����ѧϰ����������鷳����ʵ������Ҫ���ڿ�ʼ֮ǰѧϰ��Ϥһ���������� IDE�����ԣ����ǵ�ÿ���½ڵ�ʾ����λ��һ��ǳ����Ŀ¼�У����½ڱ���Ϊ�����⵼����ż��������ѭ���η����Ĺ��߷�����ͻ��ʹ������������ۺ�ʱ�ڳ�����ʹ��Ԥ�ȶ���õ��࣬�������������ҵ����ࡣ��򵥵�����£���������ڱ����õ�Դ�����ļ��С���ʱ����ʹ�ø��� ���� ��ʹ�������ļ��ĺ���Żᱻ���壨Java ��������ν�ġ�ǰ�����á����⣩�������һ����λ�������ļ��У��ֻ������أ��������Ϊ������Ӧ���㹻����ȥ�ҵ�������������������ġ�����һ�£�������Ҫʹ��ĳ���࣬��Ŀ¼�д��ڶ��ͬ�����ࣨ������;��ͬ�������߸������ǣ����������ڱ�д�����ڹ��������У����뽫ĳ���������ӵ�����У���ȴ�����е������Ƴ�ͻ��Ҫ��������⣬�����ͨ��ʹ�� import �ؼ��������� Java ����������Ҫʹ�õ��ࡣimport ָʾ����������һ������Ҳ����һ����⣨�����������У�һ���ⲻ�������࣬�����ܰ������������ݣ������ס Java �е����д��붼����д������������ʱ�����Ƕ���ʹ�� Java ��׼���е������������Щ��������Ͳ���дһ�����ķ�ת���������磺xxxxxxxxxximport java.util.ArrayList;�������Ը��߱�����ʹ��λ�ڱ�׼�� util �µ� ArrayList �ࡣ���ǣ�util �а��������࣬���ǿ���ʹ��ͨ��� * ���������в����࣬��������ʽ����һ������Щ�ࡣ����ʾ����xxxxxxxxxximport java.util.*;�����е�ʾ����С��Ϊ�����������ͨ����ʹ�� .* ��ʽ�Թ����롣Ȼ��������̳��鼮����Ҫ�����Ա��һ����ÿ���ࡣstatic �ؼ������Ƕ������ۼ���Ϊ��ʽ��������ͨ��ֻ����ʹ�� new �����Ǹ���Ķ�������ݴ洢�ռ�ű����䣬����ķ������ܹ������á����ַ�ʽ������������ǲ���ġ���ʱ��ֻ��Ϊ�ض��ֶΣ�ע��Ҳ��Ϊ���ԡ��򣩷���һ�������洢�ռ䣬����ȥ���Ǿ���Ҫ�������ٶ������������Ͳ�������������һ���������κζ����޹صķ�����Ҳ����˵����ʹû�д�������Ҳ�ܵ��ø÷�����static �ؼ��֣��� C++ ���ã��ͷ�����������Ҫ�󡣵�����˵ĳ�������Ǿ�̬ʱ������ζ�Ÿ��ֶλ򷽷����������κ��ض��Ķ���ʵ�� �� ��ʹ���Ǵ�δ����������Ķ���Ҳ���Ե����侲̬����������侲̬�ֶΡ��෴��������ͨ�ķǾ�̬�ֶκͷ��������Ǳ���Ҫ�ȴ���һ������ʹ�øö����������ֶλ򷽷�����Ϊ�Ǿ�̬�ֶκͷ����������ض�������� 6 ��һЩ������������ʹ�������ݣ�class data�����෽����class method������ʾ��̬���ݺͷ���ֻ����Ϊ�࣬���������ĳ���ض���������ڵġ���ʱ Java ����Ҳʹ����Щ������ǿ���������ֶλ򷽷�ǰ���� static �ؼ�������ʾ����һ����̬�ֶλ�̬������ ����ʾ����xxxxxxxxxxclass StaticTest { &nbsp; &nbsp;static int i = 47;}���ڣ���ʹ�㴴�������� StaticTest ���󣬵��Ǿ�̬���� i ��ֻռһ�ݴ洢�ռ䡣�������󶼻Ṳ����ͬ�ı��� i�� ����ʾ����xxxxxxxxxxStaticTest st1 = new StaticTest();StaticTest st2 = new StaticTest();st1.i �� st2.i ָ��ͬһ��洢�ռ䣬������ǵ�ֵ���� 47�����þ�̬���������ַ�������ǰ���ʾ���У�����ͨ��һ����������λ�������� st2.i������Ҳ����ͨ������ֱ�������������ַ�ʽ���ڷǾ�̬��Ա�򲻿��У�xxxxxxxxxxStaticTest.i++;++ ���������ʹ������� + 1����ʱ st1.i �� st2.i ��ֵ������� 48��ʹ������ֱ�����þ�̬��������ѡ��������Ϊ��ǿ���˱����ľ�̬���ԡ����Ƶ��߼�Ҳ�����ھ�̬���������ǿ���ͨ���������þ�̬����������ʹ���κη���һ����Ҳ����ͨ��������﷨��ʽ Classname.method() ��ֱ�ӵ��þ�̬�ֶλ򷽷� 7�� ����ʾ����xxxxxxxxxxclass Incrementable { &nbsp; &nbsp;static void increment() { &nbsp; &nbsp; &nbsp;StaticTest.i++; &nbsp; }}�����У�Incrementable �� increment() ����ͨ�� ++ ���������̬���� i �� 1��������Ȼ������ʵ���������ٵ��ø÷����� ����ʾ����xxxxxxxxxxIncrementable sf = new Incrementable();sf.increment();��Ȼ�ˣ���ѡ�ķ�����ֱ��ͨ������������������ʾ����xxxxxxxxxxIncrementable.increment()����ȷǾ�̬�Ķ���static ���Ըı������ݴ����ķ�ʽ��ͬ������ static �ؼ������η���ʱ���������������贴������Ϳ���ֱ��ͨ��������������ø÷���������������֪��static �ؼ��ֵ���Щ���Զ���Ӧ�ó�����ڵ�� main() ������Ϊ��Ҫ��С��ţ��������ǿ�ʼ��д��һ�������ĳ�������ʹ�� Java ��׼���е� Date ����չʾһ���ַ��������ڡ�xxxxxxxxxx// objects/HelloDate.javaimport java.util.*; public class HelloDate { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Hello, it's: \"); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(new Date()); &nbsp; }} �ڱ����У����д���ʾ���ĵ�һ�ж���ע���У����а����ļ���·����Ϣ�����籾�µ�Ŀ¼���� objects��������ļ������ҵĹ��߿��Ը�����Щ��Ϣ�Զ���ȡ�Ͳ����鼮�Ĵ��룬��Ҳ����ͨ���ο���һ��ע�����ɵ��� Github �����ҵ���Ӧ�Ĵ���ʾ������������ڴ�����ʹ��һЩ�������⣬��ô�ͱ����ڳ����ļ��Ŀ�ʼ��ʹ�� import �ؼ������������ǡ�֮����˵�Ƕ���ģ���Ϊ��һЩ����Ѿ�Ĭ���Զ����뵽ÿ���ļ����ˡ����磺java.lang �������ڴ����������� Oracle �ϲ鿴�ĵ�������㻹û�д� Oracle ��վ������ JDK �ĵ��������ھ�ȥ 8 ���鿴���б�����ῴ�� Java ���������в�ͬ����⡣ѡ�� java.lang����ῴ���ÿ�����������б������� java.lang ��ʽ������ÿ�� Java �����ļ��У������Щ�����Զ����õġ�java.lang �����û�� Date �࣬�������Ǳ��뵼�����������(�� Date ���ڵ����)������㲻���ĳ�������ڵ���������鿴��������е��࣬��ô������ Java �ĵ���ѡ�� ��Tree�� �鿴�����ڣ����ǿ����ҵ� Java ������ÿ���ࡣʹ��������ġ����ҡ����ܲ��� Date����������н����г� java.util.Date�����Ǿ�֪���� Date �� util ���У����Ա��뵼�� java.util.* ����ʹ�� Date����������ĵ���ѡ�� java.lang��Ȼ��ѡ�� System����ῴ�� System �����м����ֶΣ������ѡ���� out����ᷢ������һ����̬�� PrintStream ���� ���ԣ���ʹ���ǲ�ʹ�� new ������ out ������Ѿ����ڲ�����ʹ�á� out �������ִ�еĲ���ȡ�����������ͣ� PrintStream �������ĵ�����һ�������ӣ�������������ӣ����ǽ����Կ��� PrintStream ��Ӧ�ķ����б����������飬���ڱ��������ܣ��� ���������ص�˵���� println() ��������� ���������� ������Ϣ���������̨�����Ի��з�����������Ȼ��ˣ����ǿ������������������Ϣ������̨�� ����ʾ����xxxxxxxxxxSystem.out.println(\"A String of things\");ÿ�� java Դ�ļ��������ж���ࡣͬʱ��Դ�ļ������Ʊ���Ҫ������һ��������ͬ��������������ᱨ����ÿ�������ĳ���Ӧ�ð���һ�� main() ������Ϊ�������е���ڡ��䷽��ǩ���ͷ����������¡�����ʾ����xxxxxxxxxxpublic static void main(String[] args) {}�ؼ��� public ��ʾ�������Ա������ʵ����� �������齫�� ����ʵ�� �½ڽ����� main() �����Ĳ�����һ�� �ַ�����String�� ���顣 ���� args ��û���ڵ�ǰ�ĳ�����ʹ�õ������� Java ������ǿ��Ҫ�����Ҫ�У� ������Ϊ���Ǳ����ڽ��մ�����������Ĳ�����������������һ����Ȥ�Ĵ��룺xxxxxxxxxxSystem.out.println(new Date());�����ʾ���У����Ǵ�����һ�����ڣ�Date�����͵Ķ��󲢽���ת��Ϊ�ַ������ͣ����������̨�С� һ����һ�����ִ����ϣ����ǾͲ�����Ҫ�����ڶ����ˡ���ʱ��Java �����������Ϳ��Խ���ռ�õ��ڴ���գ���������ȥ����������ǡ��鿴 JDK �ĵ�ʱ�����ǿ��Կ����� System ���»��кܶ��������õķ����� Java ��ţ��֮�������ڣ���ӵ��һ���Ӵ�ı�׼����Դ��������ʾ����xxxxxxxxxx// objects/ShowProperties.javapublic class ShowProperties { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;System.getProperties().list(System.out); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(System.getProperty(\"user.name\")); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(System.getProperty(\"java.library.path\")); &nbsp; }}������(ǰ 20 ��):xxxxxxxxxxjava.runtime.name=Java(TM) SE Runtime Environmentsun.boot.library.path=C:\\ProgramFiles\\Java\\jdk1.8.0_112\\jr...java.vm.version=25.112-b15java.vm.vendor=Oracle Corporationjava.vendor.url=http://java.oracle.com/path.separator=;java.vm.name=Java HotSpot(TM) 64-Bit Server VMfile.encoding.pkg=sun.iouser.script=user.country=USsun.java.launcher=SUN_STANDARDsun.os.patch.level=java.vm.specification.name=Java Virtual MachineSpecificationuser.dir=C:\\Users\\Bruce\\Documents\\GitHub\\on-ja...java.runtime.version=1.8.0_112-b15java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironmentjava.endorsed.dirs=C:\\ProgramFiles\\Java\\jdk1.8.0_112\\jr...os.arch=amd64java.io.tmpdir=C:\\Users\\Bruce\\AppData\\Local\\Temp\\main() �����еĵ�һ�л�������е�ϵͳ�ֶΣ�Ҳ���ǻ�����Ϣ�� list() ������������͸����Ĳ��� System.out���ڱ���ĺ��棬���ǻ���Ӵ������������������ط��������ļ��С����⣬���ǻ����������ض����ֶΡ�����������ʹ�õ��� user.name �� java.library.path�����������Ҫ��������б����еĴ���ʾ�������ȱ������ Java ��̻����� �ڶ��µ�ʾ���������˰�װ���̡��������ѭ��Щ˵������ô�㽫���ڲ��� Oracle �����Ƶ��������õ� Java �������߰���JDK���������ʹ����������ϵͳ����鿴��ϵͳ���ĵ���ȷ����α�������г��� �ڶ��»���������ΰ�װ�����ʾ�����ƶ�����Ŀ¼ objects �²����룺xxxxxxxxxxjavac HelloDate.java�����Ӧ�����κ���Ӧ����������յ��κ����͵Ĵ�����Ϣ�����ʾδ��ȷ��װ JDK���Ǿ͵ü����Щ���⡣��ִ�в������Ļ�����ʱ���Լ��룺xxxxxxxxxxjava HelloDate���ǽ���õ���ȷ������������������Ǳ�������б�����ÿ�����򣨰��� main() �������Ĺ��� 9�����⣬�����Դ�����ڸ�Ŀ¼��Ҳ��һ����Ϊ build.gradle ���ļ������а��������Զ����������Ժ����б����ļ��� Gradle ���á������һ������ gradlew ����ʱ��Gradle ���Զ���װ��ǰ�����Ѱ�װ Java����������Java ������Ա���淶��Code Conventions for the Java Programming Language��10 Ҫ������������ĸ��д�� ����������ɶ�����ʹ��ɵģ���ÿ�����ʵ�����ĸ��Ӧ��д���������»������ָ������磺xxxxxxxxxxclass AllTheColorsOfTheRainbow { &nbsp; &nbsp;// ...}��ʱ�������������С��շ��������������ڼ������������������ֶΣ���Ա�������Ͷ����������������շ������ķ�ʽ���������ǵ�����ĸ����Ҫ��д������ʾ����xxxxxxxxxxclass AllTheColorsOfTheRainbow { &nbsp; &nbsp;int anIntegerRepresentingColors; &nbsp; &nbsp;void changeTheHueOfTheColor(int newHue) { &nbsp; &nbsp; &nbsp; &nbsp;// ... &nbsp; } &nbsp; &nbsp;// ...} �� Oracle �Ĺٷ�����У������ŵ�λ��ͬ����ѭ�ͱ���������ʾ����ͬ�Ĺ淶������С����������չʾ�˼򵥵� Java �����д�Լ���������صĻ��������ĿǰΪֹ�����ǵ�ʾ����ֻ��Щ�򵥵�˳��ִ�С��ڽ���������������ǽ���Ӵ��� Java ��һЩ�������������Լ����ȥ���Ƴ���ִ�е����̡�&nbsp;�� 4 �� �����������������ݡ�Java �Ǵ� C++ �Ļ���������һЩ�Ľ��ͼ򻯷�չ���ɵġ����� C/C++ ����Ա��˵��Java �����������İ������������˽� C �� C++��������������º���һ�£�ֱ���Ķ� Java �� C/C++ ��ͬ�ĵط���������������µ����ݶ�����˵���е����ѣ���ô���Ƽ������˽��� ��Thinking in C�� �ټ��������ѧϰ�� �Ȿ�����ڿ����� www.OnJava8.com ��������ء��������ݰ�����Ƶ�������õ�Ƭ����ϰ�ͽ��ר�����ڰ������������ѧϰ Java ����Ļ���֪ʶ����ʼʹ�����������һ������������������ֵ�������������ͨ�������õ���ʽ��ͬ����Ч������ͬ�ġ��ӷ� +������ -���˷� *������ / �Լ���ֵ = ���κα�������еĹ�����ʽ�������Ƶġ�������������ܸ����Լ��������������һ��ֵ���������⣬һЩ������ɸı���������ֵ��������������á���Side Effect����������������;�����޸��Լ���������󣬴Ӷ����������á���Ҫע�����ɵ�ֵ�����û�и����õ���������ɡ����������������ֻ�ܲ����������ͣ�Primitives����Ψһ�������� =��== �� !=�������ܲ������ж�����Ҳ�����˻�����һ���ط������������⣬String ��֧�� + �� +=�����ȼ�����������ȼ������˴��ڶ�������ʱһ������ʽ�����ֵ�����˳��Java ������˳���������ر�Ĺ涨�����У���򵥵Ĺ�����ǳ˷��ͳ����ڼӷ��ͼ���֮ǰ��ɡ�����Ա�������������������ȼ���������Ӧ����������ȷ�涨����˳�򡣴���ʾ��:xxxxxxxxxx// operators/Precedence.javapublic class Precedence { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;int x = 1, y = 2, z = 3; &nbsp; &nbsp; &nbsp; &nbsp;int a = x + y - 2/2 + z; // [1] &nbsp; &nbsp; &nbsp; &nbsp;int b = x + (y - 2)/(2 + z); // [2] &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"a = \" + a); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"b = \" + b); &nbsp; }}������:xxxxxxxxxx &nbsp; a = 5 &nbsp; b = 1��Щ��俴����������ͬ��������������ǿ��Կ������Ǿ��зǳ���ͬ�ĺ��壬����ȡ�������ŵ�ʹ�á�����ע�⵽���� System.out.println() �����ʹ���� + ������� ���������� + ��������˼���ַ������ӷ����������Ὣ + ���ӵķ��ַ�������ת��Ϊ�ַ����������е�������˵���� a �� b ���Ѿ���ת�������ַ�������ֵ������ĸ�ֵ���ɷ��� = ��ɵġ��������Ż�ȡ = �ұߵ�ֵ��������ߵı������ұ߿������κγ������������߿ɲ���һ������ֵ�ı���ʽ������߱�����һ����ȷ�ġ��������ı�����Ҳ����˵������Ҫ��һ�������Ŀռ�������ұߵ�ֵ���ٸ�������˵���ɽ�һ����������һ��������A = 4���������ɽ��κζ�������һ�����������粻�� 4 = A�����������͵ĸ�ֵ����ֱ�ӵģ���������󣬸����ֻ�����ڴ�����á��ٸ����ӣ�a = b ����� b �ǻ������ͣ���ô��ֵ�����Ὣ b ��ֵ����һ�ݸ����� a�� �˺��� a ��ֵ�����ı��ǲ���Ӱ�쵽 b �ġ���Ϊһ������Ա����Ӧ�ó�Ϊ���ǵĳ�ʶ�������Ϊ����ֵ����ô����Ͳ�һ���ˡ���һ��������в���ʱ������ʵ���ϲ��������������á��������ǽ��ұߵĶ���������ʱ�������ֻ�Ǹö�������á���ʱ������ָ��Ķ��еĶ�����ͬһ��������ʾ����xxxxxxxxxx// operators/Assignment.java// Assignment with objects is a bit trickyclass Tank { &nbsp; &nbsp;int level;} public class Assignment { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Tank t1 = new Tank(); &nbsp; &nbsp; &nbsp; &nbsp;Tank t2 = new Tank(); &nbsp; &nbsp; &nbsp; &nbsp;t1.level = 9; &nbsp; &nbsp; &nbsp; &nbsp;t2.level = 47; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"1: t1.level: \" + t1.level + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\", t2.level: \" + t2.level); &nbsp; &nbsp; &nbsp; &nbsp;t1 = t2; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"2: t1.level: \" + t1.level + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\", t2.level: \" + t2.level); &nbsp; &nbsp; &nbsp; &nbsp;t1.level = 27; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"3: t1.level: \" + t1.level + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\", t2.level: \" + t2.level); &nbsp; }}��������xxxxxxxxxx1: t1.level: 9, t2.level: 472: t1.level: 47, t2.level: 473: t1.level: 27, t2.level: 27����һ���򵥵� Tank �࣬�� main() ��������������ʵ������ ��������� level ���Էֱ𱻸��費ͬ��ֵ�� Ȼ��t2 ��ֵ������� t1���������������Ԥ�ڵĽ���� t1 �� t2 ��ֵ��һֱ��Զ��������ǣ��� Java �У����ڸ����ֻ�Ƕ�������ã��ı� t1 Ҳ�͸ı��� t2�� ������Ϊ t1 �� t2 ��ʱָ����Ƕ���ͬһ�����󡣣�t1 ԭʼ����������� t2 ��ֵ����ʱ��ʧ�������õĶ��������������ʱ������������������ͨ����Ϊ������aliasing�������� Java ���������һ�ֻ�����ʽ�����Ǽ����㲻���������ı�����������Ļ����������ô��������ʾ����xxxxxxxxxxt1.level = t2.level;��֮ǰ�����������������������������Ķ��󣬶����Ƕ���һ������ t1 �� t2 �󶨵�ͬһ�����󡣵��������Ĳ����е�Υ�� Java �����ԭ�򡣶���ĸ�ֵ�Ǹ���Ҫ���ӵĻ��ڣ�����������ջ�����ġ���ϲ�������������еı������������ǰѶ��󴫵ݸ�����ʱ���ᷢ����������xxxxxxxxxx// operators/PassObject.java// ���ڴ��ݵĶ�����ܲ�����֮ǰʹ�õ�class Letter { &nbsp; &nbsp;char c;} public class PassObject { &nbsp; &nbsp;static void f(Letter y) { &nbsp; &nbsp; &nbsp; &nbsp;y.c = 'z'; &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Letter x = new Letter(); &nbsp; &nbsp; &nbsp; &nbsp;x.c = 'a'; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"1: x.c: \" + x.c); &nbsp; &nbsp; &nbsp; &nbsp;f(x); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"2: x.c: \" + x.c); &nbsp; &nbsp; }}��������xxxxxxxxxx1: x.c: a2: x.c: z�������������У����� f() �ƺ������ڲ���������� Letter y������һ��������һ�����ã���ôʵ���� y.c =&#39;z&#39;; ���ڷ��� f() ֮��ı���󡣱��������Լ����������Ǹ����ӵ����⣬�ڸ�¼���а��������󴫵ݺͷ�������ʶ����һ�㣬���ǿ��Ծ������Ƶ����塣���������Java �Ļ�������������������������������ͬ�ġ����а����Ӻ� +������ -������ /���˺� * �Լ�ȡģ %�������������л��������������������ֱ�ӿ���С���������ǽ�λ��Java Ҳ��һ���� C++ ��ͬ�ļ�д��ʽͬʱ��������͸�ֵ�����������������Ⱥű�ʾ�������������е����������һ�£�ֻҪ�����壩�� ���� x += 4 ����ʾ���� x ��ֵ���� 4 �Ľ���ٸ�ֵ�� x���������ʾ����xxxxxxxxxx// operators/MathOps.java// The mathematical operatorsimport java.util.*; public class MathOps { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;// Create a seeded random number generator: &nbsp; &nbsp; &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp; &nbsp; &nbsp;int i, j, k; &nbsp; &nbsp; &nbsp; &nbsp;// Choose value from 1 to 100: &nbsp; &nbsp; &nbsp; &nbsp;j = rand.nextInt(100) + 1; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"j : \" + j); &nbsp; &nbsp; &nbsp; &nbsp;k = rand.nextInt(100) + 1; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"k : \" + k); &nbsp; &nbsp; &nbsp; &nbsp;i = j + k; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"j + k : \" + i); &nbsp; &nbsp; &nbsp; &nbsp;i = j - k; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"j - k : \" + i); &nbsp; &nbsp; &nbsp; &nbsp;i = k / j; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"k / j : \" + i); &nbsp; &nbsp; &nbsp; &nbsp;i = k * j; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"k * j : \" + i); &nbsp; &nbsp; &nbsp; &nbsp;i = k % j; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"k % j : \" + i); &nbsp; &nbsp; &nbsp; &nbsp;j %= k; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"j %= k : \" + j); &nbsp; &nbsp; &nbsp; &nbsp;// ����������� &nbsp; &nbsp; &nbsp; &nbsp;float u, v, w; // Applies to doubles, too &nbsp; &nbsp; &nbsp; &nbsp;v = rand.nextFloat(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"v : \" + v); &nbsp; &nbsp; &nbsp; &nbsp;w = rand.nextFloat(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"w : \" + w); &nbsp; &nbsp; &nbsp; &nbsp;u = v + w; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"v + w : \" + u); &nbsp; &nbsp; &nbsp; &nbsp;u = v - w; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"v - w : \" + u); &nbsp; &nbsp; &nbsp; &nbsp;u = v * w; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"v * w : \" + u); &nbsp; &nbsp; &nbsp; &nbsp;u = v / w; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"v / w : \" + u); &nbsp; &nbsp; &nbsp; &nbsp;// ����Ĳ���ͬ�������� char, &nbsp; &nbsp; &nbsp; &nbsp;// byte, short, int, long, and double: &nbsp; &nbsp; &nbsp; &nbsp;u += v; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"u += v : \" + u); &nbsp; &nbsp; &nbsp; &nbsp;u -= v; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"u -= v : \" + u); &nbsp; &nbsp; &nbsp; &nbsp;u *= v; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"u *= v : \" + u); &nbsp; &nbsp; &nbsp; &nbsp;u /= v; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"u /= v : \" + u); &nbsp; }} ��������xxxxxxxxxxj : 59k : 56j + k : 115j - k : 3k / j : 0k * j : 3304k % j : 56j %= k : 3v : 0.5309454w : 0.0534122v + w : 0.5843576v - w : 0.47753322v * w : 0.028358962v / w : 9.940527u += v : 10.471473u -= v : 9.940527u *= v : 5.2778773u /= v : 9.940527Ϊ������������֣��������ȴ���һ�� Random ���󡣲��������� Random ��������õ�ǰ��ʱ������������������ġ����ӡ���seed�����Ӷ�Ϊ�����ÿ��ִ�����ɲ�ͬ��������ڱ����ʾ���У���Ҫ����ÿ��ʾ��ĩβ�����������һ�£��Ա����ʹ���ⲿ���߽�����֤����������ͨ���ڴ��� Random ����ʱ�ṩ���ӣ�������������ĳ�ʼ��ֵ����ʼ��Ϊ�ض�����ֵ������ͬ�����У����ó���ÿ��ִ�ж�������ͬ�������������������������ǿ���֤�� 1�� ����Ҫ�������ֵ����ɾ������ʾ���е����Ӳ������ö���ͨ�����÷��� nextInt() �� nextFloat()�������Ե��� nextLong() �� nextDouble()����ʹ�� Random �����������಻ͬ���͵��������nextInt() �Ĳ����������ɵ����ֵ����ޣ�����Ϊ�㣬Ϊ�˱�������Ŀ����ԣ����ƫ�� 1��һԪ�Ӽ������һԪ�� + �� - ������Ĳ����Ͷ�Ԫ����ͬ�ġ����������Զ�ʶ��ʹ�ú��ַ�ʽ�������㣺xxxxxxxxxxx = -a;�����Ĵ����������������������ȷʶ�������ٿ�һ��ʾ����xxxxxxxxxxx = a * -b;��Ȼ������������ȷ��ʶ�𣬵��ǳ���Ա���ܻ��Ի�Ϊ�˱���������Ƽ������д����xxxxxxxxxxx = a * (-b);һԪ���ſ��Եõ����ݵĸ�ֵ��һԪ�Ӻŵ������෴��������Ψһ��Ӱ��ľ��ǰѽ�С����ֵ�����Զ�ת��Ϊ int ���͡������͵ݼ��� C �������ƣ�Java �ṩ�����������㷽ʽ����������ʹ����ɶ��ԣ���д�Զ���ǿ�����а������� ++ �͵ݼ� --����Ϊ�����ӻ����һ����λ�����ٸ�������˵������ a ��һ�� int ���͵�ֵ�������ʽ ++a �͵ȼ��� a = a + 1�� �����͵ݼ���������������޸ı��������������ɱ�����ֵ��ÿ�����͵�����������������汾�ɹ�ѡ�ã�ͨ�������Ϊ��ǰ׺���͡���׺������ǰ��������ʾ ++ �����λ�ڱ��������ʽ��ǰ�棻�������������ʾ ++ �����λ�ڱ����ĺ��档���Ƶأ���ǰ�ݼ�����ζ�� -- �����λ�ڱ�����ǰ�棻������ݼ�����ζ�� -- �����λ�ڱ����ĺ��档����ǰ������ǰ�ݼ����� ++a �� --a��������ִ�е���/�����㣬�ٷ���ֵ�������ں�����ͺ�ݼ����� a++ �� a--�������ȷ���ֵ����ִ�е���/�����㡣����ʾ����xxxxxxxxxx// operators/AutoInc.java// ��ʾ ++ �� -- �����public class AutoInc { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;int i = 1; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i: \" + i); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"++i: \" + ++i); // ǰ���� &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i++: \" + i++); // ����� &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i: \" + i); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"--i: \" + --i); // ǰ�ݼ� &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i--: \" + i--); // ��ݼ� &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i: \" + i); &nbsp; }}��������xxxxxxxxxxi: 1++i: 2i++: 2i: 3--i: 2i--: 2i: 1����ǰ׺��ʽ�����ǽ���ִ�е���/���������ȡֵ��ʹ�ú�׺��ʽ�����ǽ���ִ�е���/������֮ǰ��ȡֵ��������Ψһ���С������á��������������Щ�漰��ֵ�����⣩ ���� �����޸��˲�������ֵ��C++ ���������ڵ������������ʾ�š��� C ����һ�����������ڵ� Java �ݽ��У�Bill Joy��Java ����֮һ��˵��Java = C++ --����C++ ����������ζ�� Java �� C++ �Ļ����ϼ��������಻��Ҫ�Ķ�����������Ը��򵥡����Ž�һ����ѧϰ�����ǻᷢ�� Java ��ȷ������ط���� C++ ��˵����㣬�������������棬�ѶȲ������ C++ С���١���ϵ�������ϵ�������ͨ������һ��������boolean���������ʾ������֮��Ĺ�ϵ�������ϵΪ�棬����Ϊ true�������ϵΪ�٣�����Ϊ false����ϵ���������С�� &lt;������ &gt;��С�ڻ���� &lt;=�����ڻ���� &gt;=������ == �Ͳ����� ��=��== �� != ���������л������ͣ�������������������ڻ������� boolean����Ϊ����ֵֻ�ܱ�ʾ true �� false�����ԱȽ�����֮��ġ����ڡ���С�ڡ�û�����塣���Զ���ȼ���ϵ����� == �� != ͬ�����������ж���֮��ıȽ����㣬�����ǱȽϵ�����ȴ�������� Java �ĳ�ѧ�ߡ������Ǵ���ʾ����xxxxxxxxxx// operators/Equivalence.javapublic class Equivalence { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Integer n1 = 47; &nbsp; &nbsp; &nbsp; &nbsp;Integer n2 = 47; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(n1 == n2); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(n1 != n2); &nbsp; }}��������xxxxxxxxxxtruefalse����ʽ System.out.println(n1 == n2) ��������ȽϵĽ������Ϊ���� Integer ������ͬ����������� true������� false�����ǣ����ܶ��������һ�������������ȴ��һ����== �� != �Ƚϵ��Ƕ������ã��������ʵ����Ӧ��������� false������� true������ע�������� 47 �ĳ� 128����ô��ӡ�Ľ��������������Ϊ Integer �ڲ�ά����һ�� IntegerCache �Ļ��棬Ĭ�ϻ��淶Χ�� [-128, 127]������ [-128, 127] ֮���ֵ�� == �� != �Ƚ�Ҳ���ܵ���ȷ�Ľ�������ǲ��Ƽ��ù�ϵ������Ƚϣ������ JDK �е� Integer ��Դ�룩����ô��ô�Ƚ���������������Ƿ���ͬ�أ������ʹ�����ж��󣨲������������ͣ��ж����ڵ� equals() ���������������ʹ�� equals() ������ʾ����xxxxxxxxxx// operators/EqualsMethod.javapublic class EqualsMethod { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Integer n1 = 47; &nbsp; &nbsp; &nbsp; &nbsp;Integer n2 = 47; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(n1.equals(n2)); &nbsp; }}������:xxxxxxxxxxtrue�����Ľ���������������������ġ�����ʵ���鲢����ô�򵥡����������������Լ����ࣺxxxxxxxxxx// operators/EqualsMethod2.java// Ĭ�ϵ� equals() ����û�бȽ�����class Value { &nbsp; &nbsp;int i;} public class EqualsMethod2 { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Value v1 = new Value(); &nbsp; &nbsp; &nbsp; &nbsp;Value v2 = new Value(); &nbsp; &nbsp; &nbsp; &nbsp;v1.i = v2.i = 100; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(v1.equals(v2)); &nbsp; }}������:xxxxxxxxxxfalse�����Ľ���ٴ��������󣺽���� false��ԭ�� equals() ��Ĭ����Ϊ�ǱȽ϶�������ö��Ǿ������ݡ���ˣ��������������и�д equals() �������������ǽ���ȡ������Ҫ�Ľ�������ҵ��ǣ���ѧϰ ������Reuse�� �½ں����ǲ��ܽӴ�������д����Override��������ֱ�� ��¼:��������������֪������ equals() ��������ȷ��ʽ�������������� equals() ��Ϊ��ʽҲ����Ϊ���ʡһЩʱ�䡣����� Java ����ͨ����д equals() �����Ƚ϶�������ݶ����������á��߼������ÿ���߼������ &amp;&amp; ��AND����||��OR���� !���������ݲ������߼���ϵ���ɲ���ֵ true �� false������Ĵ���ʾ��ʹ���˹�ϵ��������߼��������xxxxxxxxxx// operators/Bool.java// ��ϵ��������߼������import java.util.*;public class Bool { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp; &nbsp; &nbsp;int i = rand.nextInt(100); &nbsp; &nbsp; &nbsp; &nbsp;int j = rand.nextInt(100); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i = \" + i); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"j = \" + j); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i &gt; j is \" + (i &gt; j)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i &lt; j is \" + (i &lt; j)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i &gt;= j is \" + (i &gt;= j)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i &lt;= j is \" + (i &lt;= j)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i == j is \" + (i == j)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i != j is \" + (i != j)); &nbsp; &nbsp; &nbsp; &nbsp;// �� int ��Ϊ�����������ǺϷ��� Java д�� &nbsp; &nbsp; &nbsp; &nbsp;//- System.out.println(\"i &amp;&amp; j is \" + (i &amp;&amp; j)); &nbsp; &nbsp; &nbsp; &nbsp;//- System.out.println(\"i || j is \" + (i || j)); &nbsp; &nbsp; &nbsp; &nbsp;//- System.out.println(\"!i is \" + !i); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"(i &lt; 10) &amp;&amp; (j &lt; 10) is \" &nbsp; &nbsp; &nbsp; &nbsp;+ ((i &lt; 10) &amp;&amp; (j &lt; 10)) ); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"(i &lt; 10) || (j &lt; 10) is \" &nbsp; &nbsp; &nbsp; &nbsp;+ ((i &lt; 10) || (j &lt; 10)) ); &nbsp; }}��������xxxxxxxxxxi = 58j = 55i &gt; j is truei &lt; j is falsei &gt;= j is truei &lt;= j is falsei == j is falsei != j is true(i &lt; 10) &amp;&amp; (j &lt; 10) is false(i &lt; 10) || (j &lt; 10) is false�� Java �߼������У����ǲ����� C/C++ ����ʹ�÷ǲ���ֵ�� ������ʹ�� AND�� OR�� NOT������������У����ǽ�ʹ�÷ǲ���ֵ�ı���ʽע�͵��ˣ�����Կ�������ʽǰ���� //-�������ǣ������ı���ʽʹ�ù�ϵ�Ƚ����ɲ���ֵ��Ȼ��Խ��ʹ�����߼����㡣��ע�⣬�����Ԥ��Ϊ String ���͵�λ��ʹ�� boolean ���͵�ֵ���������Զ�תΪ�ʵ����ı���ʽ���� &quot;true&quot; �� &quot;false&quot; �ַ����������ǿ��Խ�ǰһ�������� int �Ķ����滻Ϊ�� boolean ֮����κ����������������͡�����ע�⣬float ���͵���ֵ�ȽϷǳ��ϸ�ֻҪ�������ֵ���Сλ��ͬ����������Ȼ����ȣ�ֻҪ������Сλ�Ǵ��� 0 �ģ���ô���Ͳ����� 0����·�߼������֧��һ�ֳ�Ϊ����·����short-circuiting����������������ʽ�������㵽������ȷ���ʱ��ֹͣ�����ؽ��������ζ�Ÿ��߼�����ʽ�ĺ�벿�ֲ��ᱻִ�е�������ʾ����xxxxxxxxxx// operators / ShortCircuit.java// �߼�������Ķ�·��Ϊpublic class ShortCircuit { &nbsp; &nbsp;static boolean test1(int val) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"test1(\" + val + \")\"); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"result: \" + (val &lt; 1)); &nbsp; &nbsp; &nbsp; &nbsp;return val &lt; 1; &nbsp; } &nbsp; &nbsp;static boolean test2(int val) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"test2(\" + val + \")\"); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"result: \" + (val &lt; 2)); &nbsp; &nbsp; &nbsp; &nbsp;return val &lt; 2; &nbsp; } &nbsp; &nbsp;static boolean test3(int val) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"test3(\" + val + \")\"); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"result: \" + (val &lt; 3)); &nbsp; &nbsp; &nbsp; &nbsp;return val &lt; 3; &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;boolean b = test1(0) &amp;&amp; test2(2) &amp;&amp; test3(2); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"expression is \" + b); &nbsp; }}��������xxxxxxxxxxtest1(0)result: truetest2(2)result: falseexpression is falseÿ�����Զ��Բ���ִ�бȽϲ����� true �� false��ͬʱ����̨Ҳ���ڷ���ִ��ʱ��ӡ���ǵ�ִ��״̬�� ����ı���ʽ��xxxxxxxxxxtest1��0��&amp;&amp; test2��2��&amp;&amp; test3��2���������Ԥ���ǳ����ִ�� 3 �� test ���������ء�����������һ�£���һ�������Ľ������ true����˱���ʽ���������ȥ�������ţ��ڶ��������ķ��ؽ���� false����ʹ�������������ʽ�Ľ���϶�Ϊ false�����Ծ�û�б�Ҫ���ж�ʣ�µı���ʽ�����ˡ����ԣ����á���·�����Խ�ʡ���ֲ���Ҫ�����㣬�Ӷ���߳���Ǳ�ڵ����ܡ�����ֵ����ͨ����������������в���һ������ֵ������Literal��ʱ����������ȷ�е�ʶ���������͡������Ͳ���ȷʱ�����븨������ֵ��������������������ʶ�𡣴���ʾ����xxxxxxxxxx// operators/Literals.javapublic class Literals { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;int i1 = 0x2f; // 16���� (Сд) &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"i1: \" + Integer.toBinaryString(i1)); &nbsp; &nbsp; &nbsp; &nbsp;int i2 = 0X2F; // 16���� (��д) &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"i2: \" + Integer.toBinaryString(i2)); &nbsp; &nbsp; &nbsp; &nbsp;int i3 = 0177; // 8���� (ǰ��0) &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"i3: \" + Integer.toBinaryString(i3)); &nbsp; &nbsp; &nbsp; &nbsp;char c = 0xffff; // ��� char ��16����ֵ &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"c: \" + Integer.toBinaryString(c)); &nbsp; &nbsp; &nbsp; &nbsp;byte b = 0x7f; // ��� byte ��16����ֵ 10101111; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"b: \" + Integer.toBinaryString(b)); &nbsp; &nbsp; &nbsp; &nbsp;short s = 0x7fff; // ��� short ��16����ֵ &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"s: \" + Integer.toBinaryString(s)); &nbsp; &nbsp; &nbsp; &nbsp;long n1 = 200L; // long �ͺ�׺ &nbsp; &nbsp; &nbsp; &nbsp;long n2 = 200l; // long �ͺ�׺ (��������ֵ1����) &nbsp; &nbsp; &nbsp; &nbsp;long n3 = 200; &nbsp; &nbsp; &nbsp; &nbsp;// Java 7 ����������ֵ����: &nbsp; &nbsp; &nbsp; &nbsp;byte blb = (byte)0b00110101; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"blb: \" + Integer.toBinaryString(blb)); &nbsp; &nbsp; &nbsp; &nbsp;short bls = (short)0B0010111110101111; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"bls: \" + Integer.toBinaryString(bls)); &nbsp; &nbsp; &nbsp; &nbsp;int bli = 0b00101111101011111010111110101111; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"bli: \" + Integer.toBinaryString(bli)); &nbsp; &nbsp; &nbsp; &nbsp;long bll = 0b00101111101011111010111110101111; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"bll: \" + Long.toBinaryString(bll)); &nbsp; &nbsp; &nbsp; &nbsp;float f1 = 1; &nbsp; &nbsp; &nbsp; &nbsp;float f2 = 1F; // float �ͺ�׺ &nbsp; &nbsp; &nbsp; &nbsp;float f3 = 1f; // float �ͺ�׺ &nbsp; &nbsp; &nbsp; &nbsp;double d1 = 1d; // double �ͺ�׺ &nbsp; &nbsp; &nbsp; &nbsp;double d2 = 1D; // double �ͺ�׺ &nbsp; &nbsp; &nbsp; &nbsp;// (long �͵�����ֵͬ��������ʮ�����ƺ�8���� ) &nbsp; }}������:xxxxxxxxxxi1: 101111i2: 101111i3: 1111111c: 1111111111111111b: 1111111s: 111111111111111blb: 110101bls: 10111110101111bli: 101111101011111010111110101111bll: 101111101011111010111110101111���ı�ֵ�ĺ��������ַ������ñ�����ʶ����ı�ֵ�����͡����� Long ����ֵ����βʹ�ô�д L ��Сд l �Կɣ����Ƽ�ʹ�� l����Ϊ�����밢������ֵ 1 ����������д F ��Сд f ��ʾ float ����������д D ��Сд d ��ʾ double ˫���ȡ�ʮ�����ƣ��� 16 Ϊ�����������������������������ͣ���ǰ�� 0x �� 0X ��ʾ����� 0-9 �� a-f ����д��Сд������������ڳ�ʼ��ĳ�����͵���ֵʱ����ֵ�����䷶Χ����ô�������ᱨ��������ֵ��������ʽ��Σ����������Ĵ����У�char��byte �� short ��ֵ�Ѿ�������ˡ����������Щֵ�����������Զ�ת��Ϊ int��������ʾ������Ҫ����ǿ��ת����ǿ��ת�����ڱ��º��涨�壩����ζ��������Խ�������͵ķ�Χ���ޡ��˽��ƣ��� 8 Ϊ�������� 0~7 ֮������ֺ�ǰ���� 0 ��ʾ��Java 7 �����˶����Ƶ�����ֵ��������ǰ�� 0b �� 0B ��ʾ�������Գ�ʼ�����е��������͡�ʹ��������ֵ����ʱ����ʾ���������ʽ������á��� Long �ͺ� Integer �����������ʵ�֣������侲̬�� toBinaryString() �������ɡ� ������ע�⣬������С�����ʹ��ݸ� Integer.tobinarystring() ʱ�����ͽ��Զ�ת��Ϊ int���»���Java 7 ����һ����˼���ǵĲ��䣺���ǿ����������������а����»��� _����ʹ���������������ڴ���ֵ�ķ����ر����á�����ʾ����xxxxxxxxxx// operators/Underscores.javapublic class Underscores { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;double d = 341_435_936.445_667; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(d); &nbsp; &nbsp; &nbsp; &nbsp;int bin = 0b0010_1111_1010_1111_1010_1111_1010_1111; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Integer.toBinaryString(bin)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.printf(\"%x%n\", bin); // [1] &nbsp; &nbsp; &nbsp; &nbsp;long hex = 0x7f_e9_b7_aa; &nbsp; &nbsp; &nbsp; &nbsp;System.out.printf(\"%x%n\", hex); &nbsp; }}������:xxxxxxxxxx3.41435936445667E81011111010111110101111101011112fafafaf7fe9b7aa�����Ǻ���ʹ�õĹ������޵� _�����ܶ�����������ֵ��ͷ�ͽ�β���������� _��F��D �� L��ǰ���ֹ���� _��������ǰ�� b �� ʮ������ x ǰ���ֹ���� _��[1] ע�� ��n��ʹ�á���Ϥ C ���ĳ���Ա����ϰ���ڿ��� \\n ����ʾ���з��������������������һ����Unix ��񡱵Ļ��з������⣬�������ʹ�õ��� Windows�������ָ�� \\r\\n�����ֲ���İ���Ӧ���ɱ������������������ Java �� ��n ʵ�ֵĿ��Ժ���ƽ̨�����������ʵ��Ļ��з�����ֻ�е���ʹ�� System.out.printf() �� System.out.format() ʱ������ System.out.println()��������Ȼ����ʹ�� \\n�������ʹ�� ��n��println() ֻ����� ��n �����ǻ��з���ָ��������ָ�����ǲ���һ������Ϊ�ܲ�ֱ�۵ļǺŷ���:xxxxxxxxxx// operators/Exponents.java// \"e\" ��ʾ 10 �ļ�����public class Exponents { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;// ��д E ��Сд e ��Ч����ͬ: &nbsp; &nbsp; &nbsp; &nbsp;float expFloat = 1.39e-43f; &nbsp; &nbsp; &nbsp; &nbsp;expFloat = 1.39E-43f; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(expFloat); &nbsp; &nbsp; &nbsp; &nbsp;double expDouble = 47e47d; // 'd' �ǿ�ѡ�� &nbsp; &nbsp; &nbsp; &nbsp;double expDouble2 = 47e47; // �Զ�ת��Ϊ double &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(expDouble); &nbsp; }}������:xxxxxxxxxx1.39E-434.7E48�ڿ�ѧ�빤��ѧ����e ������Ȼ�����Ļ�����Լ���� 2.718 ��Java ����һ�ָ���ȷ�� double ֵ Math.E ����ʾ��Ȼ��������ָ������ʽ &quot;1.39 x e-43&quot;����ζ�� ��1.39 �� 2.718 �� -43 �η�����Ȼ������ FORTRAN ���Է�����������Ȼ��Ȼ�ؾ��� e ���� ��10 �ļ����ݡ������������Ե���Ϊ�Ź֣���Ϊ FORTRAN �����Ϊ��ѧ�빤��������Ƶġ�������Ȼ�����������Ӧ�������Ļ�������ֽ���̬�� 2�������������������ر�ı��﷽���� C��C++ �Լ����ڵ� Java ����̵ر��������ˡ���������ϰ�� e ��Ϊ��Ȼ�����Ļ���ʹ�ã���ô�� Java �п������ơ�1.39e-43f�������ı���ʽʱ����ת�����˼ά���ӳ�����ƵĽǶ�˼�������������ĺ����� ��1.39 �� 10 �� -43 �η�����ע������������ܹ���ȷ��ʶ�����ͣ��Ͳ���ʹ�ú�׺�ַ�������������䣺xxxxxxxxxxlong n3 = 200;���������ں�������ĵط������� 200 ����� L ���ʡȥ��Ȼ��������������䣺xxxxxxxxxxfloat f4 = 1e-43f; //10 ������������ͨ���Ὣָ����Ϊ double ���������������Լ���û�������׺�ַ� f���������ͻᱨ������ʾ����Ӧ�ý� double ��ת���� float �͡�λ�����λ������������ǲ���һ�����������еĵ���������λ��λ������������������Ӧ��λִ�в����������Ӷ����������λ����Դ�� C ���Եĵײ���������Ǿ���Ҫֱ�Ӳ���Ӳ����Ƶ������Ӳ���Ĵ����ڵĶ�����λ��Java ����Ƴ����ǵ��ӻ�����Ƕ��ʽ�������������ֵײ�Ĳ����Ա����������������ǣ�����ܲ���ʹ��̫��λ���㡣����������λ���� 1����λ����������� &amp; ��������� 1���������� 0������������λ��������һ���� 1����λ����������� | ��������� 1��ֻ������������λ���� 0 ������£����������� 0������������λ��ĳһ���� 1����һ������ 1����ô��λ������������ ^ ����������� 1����λ����������� ~ ����һԪ���������ֻ��һ���Ա������в���������������������Ƕ�Ԫ�����������λ���������������λ�෴���������� 0������� 1������ 1������� 0��λ��������߼��������ʹ����ͬ�����ַ���ֻ����������ͬ��λ�̣�����λ�����ֻ��һ���ַ���λ���������Ⱥ� = ����ʹ���Խ��ս������ֵ��&amp;=��|= �� ^= ���ǺϷ��ģ����� ~ ��һԪ����������Բ����� = ����ʹ�ã������ǽ� Boolean ���ͱ���Ϊ����λֵ����one-bit value����������������Щ���صĵط������ǿ��Զ� boolean �ͱ���ִ���롢��������㣬������ִ�з����㣨�����Ϊ�˱������߼����ǡ������������ڲ���ֵ��λ������������߼��������ͬ��Ч����ֻ�����ǲ�����;����·�������⣬��Բ���ֵ���е�λ����Ϊ����������һ��������߼������������δ�������߼���������б��С�����λ����ʽ�У���ֹʹ�ò���ֵ��ԭ����������͡���λ�������λ�����������������Ҳ�Ƕ����Ƶġ�λ��������ֻ�����ڴ����������ͣ��������͵�һ�֣�������λ����� &lt;&lt; �ܽ�����ߵ�������������ƶ��Ҳ�ָ����λ�����ڵ�λ�� 0��������λ����� &gt;&gt; ���෴������λ������С�������������ֵ����ֵΪ�������ڸ�λ���� 0����ֵΪ�������ڸ�λ���� 1��Java Ҳ������һ�֡�����������������λ�������&gt;&gt;&gt;������ʹ���ˡ�����չ����zero extension�����������������ڸ�λ���� 0����һ������� C/C++ û�еġ�����ƶ� char��byte �� short��������ƶ�����֮ǰ��������Ϊ int�����Ϊ int����ʹ���Ҳ�� 5 ���ͽ�λ������Է�ֹ�����ƶ����� int ��Χ��λ��������һ�� long ֵ���д��������õ��Ľ��Ҳ�� long����λ������Ⱥ� &lt;&lt;= �� &gt;&gt;= �� &gt;&gt;&gt;= ���ʹ�á���ֵ���滻Ϊ����λ������ֵ�����ǣ��������ˣ����޷��������븳ֵ����ʱ���������� byte �� short һ��ʹ�õĻ�����������ȡ����֮���ǣ����Ǳ�����Ϊ int �Ͳ����ƣ��������¸�ֵʱ���ضϡ�����������£����Ϊ -1�������Ǵ���ʾ����xxxxxxxxxx// operators/URShift.java// �����޷�������public class URShift { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;int i = -1; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Integer.toBinaryString(i)); &nbsp; &nbsp; &nbsp; &nbsp;i &gt;&gt;&gt;= 10; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Integer.toBinaryString(i)); &nbsp; &nbsp; &nbsp; &nbsp;long l = -1; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Long.toBinaryString(l)); &nbsp; &nbsp; &nbsp; &nbsp;l &gt;&gt;&gt;= 10; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Long.toBinaryString(l)); &nbsp; &nbsp; &nbsp; &nbsp;short s = -1; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Integer.toBinaryString(s)); &nbsp; &nbsp; &nbsp; &nbsp;s &gt;&gt;&gt;= 10; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Integer.toBinaryString(s)); &nbsp; &nbsp; &nbsp; &nbsp;byte b = -1; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Integer.toBinaryString(b)); &nbsp; &nbsp; &nbsp; &nbsp;b &gt;&gt;&gt;= 10; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Integer.toBinaryString(b)); &nbsp; &nbsp; &nbsp; &nbsp;b = -1; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Integer.toBinaryString(b)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Integer.toBinaryString(b&gt;&gt;&gt;10)); &nbsp; }}��������xxxxxxxxxx111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111�������У������δ���¸�ֵ������ b ������ֱ�Ӵ�ӡ���������һ��������������һ���漰����λ������Ĵ���ʾ����xxxxxxxxxx// operators/BitManipulation.java// ʹ��λ�����import java.util.*;public class BitManipulation { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp; &nbsp; &nbsp;int i = rand.nextInt(); &nbsp; &nbsp; &nbsp; &nbsp;int j = rand.nextInt(); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"-1\", -1); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"+1\", +1); &nbsp; &nbsp; &nbsp; &nbsp;int maxpos = 2147483647; &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"maxpos\", maxpos); &nbsp; &nbsp; &nbsp; &nbsp;int maxneg = -2147483648; &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"maxneg\", maxneg); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"i\", i); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"~i\", ~i); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"-i\", -i); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"j\", j); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"i &amp; j\", i &amp; j); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"i | j\", i | j); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"i ^ j\", i ^ j); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"i &lt;&lt; 5\", i &lt;&lt; 5); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"i &gt;&gt; 5\", i &gt;&gt; 5); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"(~i) &gt;&gt; 5\", (~i) &gt;&gt; 5); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"i &gt;&gt;&gt; 5\", i &gt;&gt;&gt; 5); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryInt(\"(~i) &gt;&gt;&gt; 5\", (~i) &gt;&gt;&gt; 5); &nbsp; &nbsp; &nbsp; &nbsp;long l = rand.nextLong(); &nbsp; &nbsp; &nbsp; &nbsp;long m = rand.nextLong(); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"-1L\", -1L); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"+1L\", +1L); &nbsp; &nbsp; &nbsp; &nbsp;long ll = 9223372036854775807L; &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"maxpos\", ll); &nbsp; &nbsp; &nbsp; &nbsp;long lln = -9223372036854775808L; &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"maxneg\", lln); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"l\", l); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"~l\", ~l); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"-l\", -l); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"m\", m); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"l &amp; m\", l &amp; m); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"l | m\", l | m); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"l ^ m\", l ^ m); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"l &lt;&lt; 5\", l &lt;&lt; 5); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"l &gt;&gt; 5\", l &gt;&gt; 5); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"(~l) &gt;&gt; 5\", (~l) &gt;&gt; 5); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"l &gt;&gt;&gt; 5\", l &gt;&gt;&gt; 5); &nbsp; &nbsp; &nbsp; &nbsp;printBinaryLong(\"(~l) &gt;&gt;&gt; 5\", (~l) &gt;&gt;&gt; 5); &nbsp; } &nbsp; &nbsp;static void printBinaryInt(String s, int i) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;s + \", int: \" + i + \", binary:\\n \" + &nbsp; &nbsp; &nbsp; &nbsp;Integer.toBinaryString(i)); &nbsp; } &nbsp; &nbsp;static void printBinaryLong(String s, long l) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;s + \", long: \" + l + \", binary:\\n \" + &nbsp; &nbsp; &nbsp; &nbsp;Long.toBinaryString(l)); &nbsp; }}��������ǰ 32 �У���xxxxxxxxxx-1, int: -1, binary:11111111111111111111111111111111+1, int: 1, binary:1maxpos, int: 2147483647, binary:1111111111111111111111111111111maxneg, int: -2147483648, binary:10000000000000000000000000000000i, int: -1172028779, binary:10111010001001000100001010010101~i, int: 1172028778, binary: 1000101110110111011110101101010-i, int: 1172028779, binary:1000101110110111011110101101011j, int: 1717241110, binary:1100110010110110000010100010110i &amp; j, int: 570425364, binary:100010000000000000000000010100i | j, int: -25213033, binary:11111110011111110100011110010111i ^ j, int: -595638397, binary:11011100011111110100011110000011i &lt;&lt; 5, int: 1149784736, binary:1000100100010000101001010100000i &gt;&gt; 5, int: -36625900, binary:11111101110100010010001000010100(~i) &gt;&gt; 5, int: 36625899, binary:10001011101101110111101011i &gt;&gt;&gt; 5, int: 97591828, binary:101110100010010001000010100(~i) &gt;&gt;&gt; 5, int: 36625899, binary:10001011101101110111101011 &nbsp; ...��β���������� printBinaryInt() �� printBinaryLong() �ֱ����һ�� int �� long ֵ����ת��Ϊ�����Ƹ�ʽ�����ͬʱ���м�Ҫ������˵����������ʾ int �� long ������λ�������Ч��֮�⣬��ʾ������ʾ int �� long ����Сֵ�����ֵ��+1 �� -1 ֵ���Ա������˽����ǵ���ʽ��ע���λ�������ţ�0 ��ʾ����1 ��ʾ����������ʾ�� int ���ֵ���������ֵĶ����Ʊ�ʾ��Ϊ�з��ŵ�������������Ԫ�������Ԫ�������Ҳ��Ϊ���������������������ȽϺ�������Ϊ��������������󡣵���ȷʵ�����������һ�֣���Ϊ������Ҳ������һ��ֵ�����뱾�º�һ��Ҫ��������ͨ if-else ����ǲ�ͬ�ġ����������ı���ʽ��ʽ����������ʽ ? ֵ 1 : ֵ 2������ʽ����Ϊ true���򷵻ؽ�� ֵ 1 ���������ʽ�ļ���Ϊ false���򷵻ؽ�� ֵ 2����Ȼ��Ҳ���Ի�����ͨ�� if-else ��䣨�ں�����ܣ�������Ԫ��������Ӽ�ࡣ��Ϊ��Ԫ������Ĵ����ߣ� C ��ڼΪһ�ż��������ԡ���Ԫ����������������Ϊ�˸�Ч��̣����������Ǵ���Ƶ��ʹ�����Ļ��������ȶ���һЩ˼���� �����ڲ����ɶ��Բ�Ĵ��롣�� if-else ��ͬ���ǣ���Ԫ��������з��ؽ���ġ��뿴����Ĵ���ʾ����xxxxxxxxxx// operators/TernaryIfElse.javapublic class TernaryIfElse { static int ternary(int i) { &nbsp; &nbsp;return i &lt; 10 ? i * 100 : i * 10;} static int standardIfElse(int i) { &nbsp; &nbsp;if(i &lt; 10) &nbsp; &nbsp; &nbsp; &nbsp;return i * 100; &nbsp; &nbsp;else &nbsp; &nbsp; &nbsp; &nbsp;return i * 10;} &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(ternary(9)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(ternary(10)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(standardIfElse(9)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(standardIfElse(10)); &nbsp; }}��������xxxxxxxxxx900100900100���Կ�����ternary() �еĴ������̡�Ȼ����standardIfElse() �еĴ�����������Ҳ�Ҫ������¼�롣������������ѡ��Ԫ�����ʱ�������Ȩ��һ�����ס��ַ������������������ Java ����һ��������;�������ַ������������ǰ��չʾ���ˡ������� + �Ĵ�ͳ���岻���������ʹ��Ҳ���ǱȽ���Ȼ�ġ���һ���ܿ������������������� C++ �������ˡ���������ء����ƣ��Ա� C++ ����ԱΪ���������������������ĺ��塣���ź����ǣ��� C++ ��һЩ���ƽ���Ժ�����ø��ӡ���Ҫ�����Ա������Լ�����ʱ����Դ�����ȫ�Ŀ��ǡ���Ȼ�� Java ��ʵ����������ػ��Ʋ������£��� C# ��չʾ�ģ������м򵥵���������أ�����������Թ��ڸ��ӣ���� Java ��δʵ����������ע�⵽���� String + ʱ��һЩ��Ȥ������������ʽ��һ�� String ���Ϳ�ͷ�����������Զ���˫���� &quot;&quot; ��ע�ĵ��ַ�����ת��Ϊ�ַ���������ô��������������󶼱������ַ���������ʾ����xxxxxxxxxx// operators/StringOperators.javapublic class StringOperators { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;int x = 0, y = 1, z = 2; &nbsp; &nbsp; &nbsp; &nbsp;String s = \"x, y, z \"; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(s + x + y + z); &nbsp; &nbsp; &nbsp; &nbsp;// �� x ת��Ϊ�ַ��� &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(x + \" \" + s); &nbsp; &nbsp; &nbsp; &nbsp;s += \"(summed) = \"; &nbsp; &nbsp; &nbsp; &nbsp;// �������� &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(s + (x + y + z)); &nbsp; &nbsp; &nbsp; &nbsp;// Integer.toString()�����ļ�д: &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"\" + x); &nbsp; }}��������xxxxxxxxxxx, y, z 0120 x, y, zx, y, z (summed) = 30ע���������е� 1 �������ִ�н���� 012 ������ 3��������Ϊ����������ֱ�ת��Ϊ���ַ�����ʽȻ�����ַ������� s ���ӡ��ڵ� 2 ���������У�����������ͷ�ı���ת��Ϊ���ַ������ɴ˿��Կ���������ת�������ݵ�λ���޹أ�ֻҪ������һ���������ַ������ͣ��������ַ������ݶ�����ת��Ϊ�ַ�����ʽ�����ӡ����һ�������䣬���ǿ��Կ��� += ���������ƴ�����Ҳ���ַ������ӽ�����ظ�ֵ���������� s������ () ���Կ��Ʊ���ʽ�ļ���˳���Ա�����ʾ int ֮ǰ�������ʵ����͡���ע���������е����һ�����ӣ����Ǿ����ῴ��һ�����ַ��� &quot;&quot; ����һ���������͵����ݡ�����������ʽ�ؽ���ת��Ϊ�ַ������Դ��深������ʽ���÷��������������ʹ�� Integer.toString()������������ʹ�������ʱ�����׷���һ�������ǣ��ڻ�û���������ʽ�ļ��㷽ʽʱ����ͼ�������� ()���� Java ��Ҳһ���� �� C++ �����������ܷ��������˵Ĵ���.����ʾ����xxxxxxxxxxwhile(x = y) {// ...}��Ȼ������Աԭ���ǲ��Եȼ��� ==�����Ǹ�ֵ =�������� y �� 0 �Ļ����� C/C++ �У������ĸ�ֵ�����ܻ᷵�� true�����ǣ�����Ĵ���ʾ����������ѭ�������� Java �У������ı���ʽ���������ת��Ϊһ������ֵ�� ������������ͼ����� int ������ת��ΪԤ��Ӧ���յĲ������͡�������ǽ�������ͼ����ǰ�յ������ڴ�����ˣ�Java �����������������巢���Ŀ��ܡ�Ψһ����������⣺������ x �� y ���ǲ���ֵ������ x=y ��һ���߼�����ʽ������֮�⣬֮ǰ���Ǹ����ӣ��ܴ�����Ǵ����� C/C++ ����Ƶ�һ�����⻹��ʹ�ð�λ���롱 &amp; �͡��� | ���㣬�����߼����롱 &amp;&amp; �͡��� ||������ = �� == һ��������һ���ַ���ȻҪ�ȼ��������򵥡��� Java �У�������ͬ���ɷ�ֹ��һ�㣬��Ϊ������������ǿ��ʹ����һ�ֲ����������͡�����ת��������ת������Casting���������ǡ���һ��ģ��ƥ�䡱�����ʵ���ʱ��Java �Ὣһ�����������Զ�ת������һ�֡����磬��������Ϊ float ������ֵһ������ֵ��������Ὣ int �Զ�ת���� float�����ǿ����ڳ���δ�Զ�ת��ʱ��ʽ��ǿ�Ƶ�ʹ�����ͷ���ת����Ҫִ��ǿ��ת������Ҫ��������������ͷ����κ�ֵ���������ڣ�������ʾ��xxxxxxxxxx// operators/Casting.javapublic class Casting { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;int i = 200; &nbsp; &nbsp; &nbsp; &nbsp;long lng = (long)i; &nbsp; &nbsp; &nbsp; &nbsp;lng = i; // û�б�Ҫ���������� &nbsp; &nbsp; &nbsp; &nbsp;long lng2 = (long)200; &nbsp; &nbsp; &nbsp; &nbsp;lng2 = 200; &nbsp; &nbsp; &nbsp; &nbsp;// �������� &nbsp; &nbsp; &nbsp; &nbsp;i = (int)lng2; // Cast required &nbsp; }}��Ȼ�������������ȥת��һ����ֵ���͵ı����������������������Ƕ���ģ���Ϊ���������ڱ�Ҫʱ�Զ����� int ������Ϊ long �͡���Ȼ��Ϊ�˳����߼������������Լ����⣬����Ҳ������ʽ������ת��������������£�����ת����ֻ���ڴ������ʱ���Գ�����Ҫ�ԡ��� C/C++ �У�����ת����ʱ������ͷʹ���� Java �����ת������һ�ֱȽϰ�ȫ�Ĳ��������ǣ������������ͽ��С�����ת������Narrowing Conversion���Ĳ������������ϴ����������ת����������С�����ͣ������ܻᷢ����Ϣ��ʧ��Σ�ա���ʱ����������ǿ�����ǽ���ת�ͣ��ñ����������ǣ��ò�������Σ�գ�������������ô������ô�Բ�������ȷ��Ҫת�������͡� ���ڡ�����ת������Widening conversion�����򲻱ؽ�����ʽ������ת������Ϊ�ϴ����͵����ݿ϶������ɽ�С���͵����ݣ���������κ���Ϣ�Ķ�ʧ�����˲������͵����ݣ�Java �����κλ������͵�����ת��Ϊ��һ�ֻ������͵����ݡ����⣬���ǲ��ܽ�������ת���ġ�Ϊ�˽�һ����ת��Ϊ��һ�����ͣ���Ҫʹ������ķ��������潫��ѧϰ������ڸ�����֮���������/����ת�ͣ����磬������������ת��Ϊ����������֮��Ȼ�������ڡ���ʯ�����޷�ת��Ϊ�������ģ����ضϺ�������ִ�С�����ת����ʱ������ע�����ݵĽضϺ��������⡣���Ӹ���ֵת��Ϊ����ֵ��Java ����ʲô�أ����磺������ 29.7 ��ת��Ϊ����ֵ��������� 29 ���� 30 �أ������Ǵ���ʾ����xxxxxxxxxx// operators/CastingNumbers.java// ����ת�� float �� double ������Ϊ��������public class CastingNumbers { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;double above = 0.7, below = 0.4; &nbsp; &nbsp; &nbsp; &nbsp;float fabove = 0.7f, fbelow = 0.4f; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"(int)above: \" + (int)above); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"(int)below: \" + (int)below); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"(int)fabove: \" + (int)fabove); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"(int)fbelow: \" + (int)fbelow); &nbsp; }}��������xxxxxxxxxx(int)above: 0(int)below: 0(int)fabove: 0(int)fbelow: 0��ˣ����ǣ��� float �� double ת��Ϊ����ֵʱ��С��λ�����ضϡ�������Խ�������������룬����ʹ�� java.lang.Math �� round() ������xxxxxxxxxx// operators/RoundingNumbers.java// float �� double �������ݵ���������public class RoundingNumbers { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;double above = 0.7, below = 0.4; &nbsp; &nbsp; &nbsp; &nbsp;float fabove = 0.7f, fbelow = 0.4f; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"Math.round(above): \" + Math.round(above)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"Math.round(below): \" + Math.round(below)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"Math.round(fabove): \" + Math.round(fabove)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp; &nbsp;\"Math.round(fbelow): \" + Math.round(fbelow)); &nbsp; }}��������xxxxxxxxxxMath.round(above): 1Math.round(below): 0Math.round(fabove): 1Math.round(fbelow): 0��Ϊ round() ������ java.lang ��һ���֣�������������ͨ�� import �Ϳ���ʹ�á�����������ᷢ�֣�������Ƕ�С�� int �Ļ����������ͣ��� char��byte �� short��ִ���κ�������λ��������Щֵ����ִ�в���֮ǰ��������Ϊ int�����ҽ��ֵ������Ϊ int����������ʹ�ý�С�����ͣ�����ʹ��ǿ��ת�����������·����һ����С�����ͣ�������ܻᶪʧ���ȣ���ͨ��������ʽ���������������Ǿ�������ʽ������������͡�float �ͺ� double ����ˣ������ double �͵ģ�int �� long ��ӣ������ long �͡�Java û�� sizeof�� C/C++ �У�������Ҫ�õ� sizeof() ��������ȡ�����������ֽڴ�С��C/C++ ��ʹ�� sizeof() ����˵������ԭ����Ϊ����ֲ�ԣ���ͬ�����ڲ�ͬ�����Ͽ����в�ͬ�Ĵ�С�������ڽ��д�С���е�����ʱ������Ա�������Щ�����ж�������������������磬һ̨��������� 32 λ����������������һֻ̨�� 16 λ���档��Ȼ���ڵ�һ̨�����У�����ɱ�������ֵ�����ԣ���ֲ���� C/C++ ����Ա��Ϊͷʹ��һ�����⡣Java ����Ҫ sizeof() ��������������������Ϊ�������͵Ĵ�С�ڲ�ͬƽ̨������ͬ�ġ����ǲ��ؿ��������ε���ֲ���� ���� Java ��������һ�֡���ƽ̨�޹ء������ԡ�������ܽ�����ʾ���ֱ�������չʾ����Щ���������ܱ������ض���������������ϣ�����Ĵ���ʾ���Ƕ���������ʾ�����ظ���ֻ�������������еĻ������͡�����ļ��ܱ���ȷ�ر��룬��Ϊ���Ѿ��ѱ��벻ͨ�����ǲ�����ע�� // �����ˡ�����ʾ����xxxxxxxxxx// operators/AllOps.java// �������л������͵����������// ������Щ���ܱ� Java ���������ܵ�public class AllOps { &nbsp; &nbsp;// ����ֵ�Ľ��ղ��ԣ� &nbsp; &nbsp;void f(boolean b) {} &nbsp; &nbsp;void boolTest(boolean x, boolean y) { &nbsp; &nbsp; &nbsp; &nbsp;// ����������� &nbsp; &nbsp; &nbsp; &nbsp;//- x = x * y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x / y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x % y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x + y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x - y; &nbsp; &nbsp; &nbsp; &nbsp;//- x++; &nbsp; &nbsp; &nbsp; &nbsp;//- x--; &nbsp; &nbsp; &nbsp; &nbsp;//- x = +y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = -y; &nbsp; &nbsp; &nbsp; &nbsp;// ��ϵ��������߼�������� &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &gt; y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &gt;= y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &lt; y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &lt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x == y); &nbsp; &nbsp; &nbsp; &nbsp;f(x != y); &nbsp; &nbsp; &nbsp; &nbsp;f(!y); &nbsp; &nbsp; &nbsp; &nbsp;x = x &amp;&amp; y; &nbsp; &nbsp; &nbsp; &nbsp;x = x || y; &nbsp; &nbsp; &nbsp; &nbsp;// ��λ������� &nbsp; &nbsp; &nbsp; &nbsp;//- x = ~y; &nbsp; &nbsp; &nbsp; &nbsp;x = x &amp; y; &nbsp; &nbsp; &nbsp; &nbsp;x = x | y; &nbsp; &nbsp; &nbsp; &nbsp;x = x ^ y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &lt;&lt; 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &gt;&gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;// ���ϸ�ֵ�� &nbsp; &nbsp; &nbsp; &nbsp;//- x += y; &nbsp; &nbsp; &nbsp; &nbsp;//- x -= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x *= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x /= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x %= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x &lt;&lt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x &gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x &gt;&gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &amp;= y; &nbsp; &nbsp; &nbsp; &nbsp;x ^= y; &nbsp; &nbsp; &nbsp; &nbsp;x |= y; &nbsp; &nbsp; &nbsp; &nbsp;// ����ת���� &nbsp; &nbsp; &nbsp; &nbsp;//- char c = (char)x; &nbsp; &nbsp; &nbsp; &nbsp;//- byte b = (byte)x; &nbsp; &nbsp; &nbsp; &nbsp;//- short s = (short)x; &nbsp; &nbsp; &nbsp; &nbsp;//- int i = (int)x; &nbsp; &nbsp; &nbsp; &nbsp;//- long l = (long)x; &nbsp; &nbsp; &nbsp; &nbsp;//- float f = (float)x; &nbsp; &nbsp; &nbsp; &nbsp;//- double d = (double)x; &nbsp; } &nbsp; &nbsp;void charTest(char x, char y) { &nbsp; &nbsp; &nbsp; &nbsp;// ����������� &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x * y); &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x / y); &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x % y); &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x + y); &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x - y); &nbsp; &nbsp; &nbsp; &nbsp;x++; &nbsp; &nbsp; &nbsp; &nbsp;x--; &nbsp; &nbsp; &nbsp; &nbsp;x = (char) + y; &nbsp; &nbsp; &nbsp; &nbsp;x = (char) - y; &nbsp; &nbsp; &nbsp; &nbsp;// ��ϵ���߼�������� &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x == y); &nbsp; &nbsp; &nbsp; &nbsp;f(x != y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(!x); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &amp;&amp; y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x || y); &nbsp; &nbsp; &nbsp; &nbsp;// ��λ������� &nbsp; &nbsp; &nbsp; &nbsp;x= (char)~y; &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x &amp; y); &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x | y); &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x ^ y); &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x &lt;&lt; 1); &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x &gt;&gt; 1); &nbsp; &nbsp; &nbsp; &nbsp;x = (char)(x &gt;&gt;&gt; 1); &nbsp; &nbsp; &nbsp; &nbsp;// ���ϸ�ֵ�� &nbsp; &nbsp; &nbsp; &nbsp;x += y; &nbsp; &nbsp; &nbsp; &nbsp;x -= y; &nbsp; &nbsp; &nbsp; &nbsp;x *= y; &nbsp; &nbsp; &nbsp; &nbsp;x /= y; &nbsp; &nbsp; &nbsp; &nbsp;x %= y; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;&lt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &amp;= y; &nbsp; &nbsp; &nbsp; &nbsp;x ^= y; &nbsp; &nbsp; &nbsp; &nbsp;x |= y; &nbsp; &nbsp; &nbsp; &nbsp;// ����ת�� &nbsp; &nbsp; &nbsp; &nbsp;//- boolean bl = (boolean)x; &nbsp; &nbsp; &nbsp; &nbsp;byte b = (byte)x; &nbsp; &nbsp; &nbsp; &nbsp;short s = (short)x; &nbsp; &nbsp; &nbsp; &nbsp;int i = (int)x; &nbsp; &nbsp; &nbsp; &nbsp;long l = (long)x; &nbsp; &nbsp; &nbsp; &nbsp;float f = (float)x; &nbsp; &nbsp; &nbsp; &nbsp;double d = (double)x; &nbsp; } &nbsp; &nbsp;void byteTest(byte x, byte y) { &nbsp; &nbsp; &nbsp; &nbsp;// ����������� &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x* y); &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x / y); &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x % y); &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x + y); &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x - y); &nbsp; &nbsp; &nbsp; &nbsp;x++; &nbsp; &nbsp; &nbsp; &nbsp;x--; &nbsp; &nbsp; &nbsp; &nbsp;x = (byte) + y; &nbsp; &nbsp; &nbsp; &nbsp;x = (byte) - y; &nbsp; &nbsp; &nbsp; &nbsp;// ��ϵ���߼�������� &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x == y); &nbsp; &nbsp; &nbsp; &nbsp;f(x != y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(!x); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &amp;&amp; y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x || y); &nbsp; &nbsp; &nbsp; &nbsp;//��λ������� &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)~y; &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x &amp; y); &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x | y); &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x ^ y); &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x &lt;&lt; 1); &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x &gt;&gt; 1); &nbsp; &nbsp; &nbsp; &nbsp;x = (byte)(x &gt;&gt;&gt; 1); &nbsp; &nbsp; &nbsp; &nbsp;// ���ϸ�ֵ�� &nbsp; &nbsp; &nbsp; &nbsp;x += y; &nbsp; &nbsp; &nbsp; &nbsp;x -= y; &nbsp; &nbsp; &nbsp; &nbsp;x *= y; &nbsp; &nbsp; &nbsp; &nbsp;x /= y; &nbsp; &nbsp; &nbsp; &nbsp;x %= y; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;&lt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &amp;= y; &nbsp; &nbsp; &nbsp; &nbsp;x ^= y; &nbsp; &nbsp; &nbsp; &nbsp;x |= y; &nbsp; &nbsp; &nbsp; &nbsp;// ����ת���� &nbsp; &nbsp; &nbsp; &nbsp;//- boolean bl = (boolean)x; &nbsp; &nbsp; &nbsp; &nbsp;char c = (char)x; &nbsp; &nbsp; &nbsp; &nbsp;short s = (short)x; &nbsp; &nbsp; &nbsp; &nbsp;int i = (int)x; &nbsp; &nbsp; &nbsp; &nbsp;long l = (long)x; &nbsp; &nbsp; &nbsp; &nbsp;float f = (float)x; &nbsp; &nbsp; &nbsp; &nbsp;double d = (double)x; &nbsp; } &nbsp; &nbsp;void shortTest(short x, short y) { &nbsp; &nbsp; &nbsp; &nbsp;// ����������� &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x * y); &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x / y); &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x % y); &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x + y); &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x - y); &nbsp; &nbsp; &nbsp; &nbsp;x++; &nbsp; &nbsp; &nbsp; &nbsp;x--; &nbsp; &nbsp; &nbsp; &nbsp;x = (short) + y; &nbsp; &nbsp; &nbsp; &nbsp;x = (short) - y; &nbsp; &nbsp; &nbsp; &nbsp;// ��ϵ���߼�������� &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x == y); &nbsp; &nbsp; &nbsp; &nbsp;f(x != y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(!x); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &amp;&amp; y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x || y); &nbsp; &nbsp; &nbsp; &nbsp;// ��λ������� &nbsp; &nbsp; &nbsp; &nbsp;x = (short) ~ y; &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x &amp; y); &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x | y); &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x ^ y); &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x &lt;&lt; 1); &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x &gt;&gt; 1); &nbsp; &nbsp; &nbsp; &nbsp;x = (short)(x &gt;&gt;&gt; 1); &nbsp; &nbsp; &nbsp; &nbsp;// Compound assignment: &nbsp; &nbsp; &nbsp; &nbsp;x += y; &nbsp; &nbsp; &nbsp; &nbsp;x -= y; &nbsp; &nbsp; &nbsp; &nbsp;x *= y; &nbsp; &nbsp; &nbsp; &nbsp;x /= y; &nbsp; &nbsp; &nbsp; &nbsp;x %= y; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;&lt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &amp;= y; &nbsp; &nbsp; &nbsp; &nbsp;x ^= y; &nbsp; &nbsp; &nbsp; &nbsp;x |= y; &nbsp; &nbsp; &nbsp; &nbsp;// ����ת���� &nbsp; &nbsp; &nbsp; &nbsp;//- boolean bl = (boolean)x; &nbsp; &nbsp; &nbsp; &nbsp;char c = (char)x; &nbsp; &nbsp; &nbsp; &nbsp;byte b = (byte)x; &nbsp; &nbsp; &nbsp; &nbsp;int i = (int)x; &nbsp; &nbsp; &nbsp; &nbsp;long l = (long)x; &nbsp; &nbsp; &nbsp; &nbsp;float f = (float)x; &nbsp; &nbsp; &nbsp; &nbsp;double d = (double)x; &nbsp; } &nbsp; &nbsp;void intTest(int x, int y) { &nbsp; &nbsp; &nbsp; &nbsp;// ����������� &nbsp; &nbsp; &nbsp; &nbsp;x = x * y; &nbsp; &nbsp; &nbsp; &nbsp;x = x / y; &nbsp; &nbsp; &nbsp; &nbsp;x = x % y; &nbsp; &nbsp; &nbsp; &nbsp;x = x + y; &nbsp; &nbsp; &nbsp; &nbsp;x = x - y; &nbsp; &nbsp; &nbsp; &nbsp;x++; &nbsp; &nbsp; &nbsp; &nbsp;x--; &nbsp; &nbsp; &nbsp; &nbsp;x = +y; &nbsp; &nbsp; &nbsp; &nbsp;x = -y; &nbsp; &nbsp; &nbsp; &nbsp;// ��ϵ���߼�������� &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x == y); &nbsp; &nbsp; &nbsp; &nbsp;f(x != y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(!x); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &amp;&amp; y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x || y); &nbsp; &nbsp; &nbsp; &nbsp;// ��λ������� &nbsp; &nbsp; &nbsp; &nbsp;x = ~y; &nbsp; &nbsp; &nbsp; &nbsp;x = x &amp; y; &nbsp; &nbsp; &nbsp; &nbsp;x = x | y; &nbsp; &nbsp; &nbsp; &nbsp;x = x ^ y; &nbsp; &nbsp; &nbsp; &nbsp;x = x &lt;&lt; 1; &nbsp; &nbsp; &nbsp; &nbsp;x = x &gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;x = x &gt;&gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;// ���ϸ�ֵ�� &nbsp; &nbsp; &nbsp; &nbsp;x += y; &nbsp; &nbsp; &nbsp; &nbsp;x -= y; &nbsp; &nbsp; &nbsp; &nbsp;x *= y; &nbsp; &nbsp; &nbsp; &nbsp;x /= y; &nbsp; &nbsp; &nbsp; &nbsp;x %= y; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;&lt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &amp;= y; &nbsp; &nbsp; &nbsp; &nbsp;x ^= y; &nbsp; &nbsp; &nbsp; &nbsp;x |= y; &nbsp; &nbsp; &nbsp; &nbsp;// ����ת���� &nbsp; &nbsp; &nbsp; &nbsp;//- boolean bl = (boolean)x; &nbsp; &nbsp; &nbsp; &nbsp;char c = (char)x; &nbsp; &nbsp; &nbsp; &nbsp;byte b = (byte)x; &nbsp; &nbsp; &nbsp; &nbsp;short s = (short)x; &nbsp; &nbsp; &nbsp; &nbsp;long l = (long)x; &nbsp; &nbsp; &nbsp; &nbsp;float f = (float)x; &nbsp; &nbsp; &nbsp; &nbsp;double d = (double)x; &nbsp; } &nbsp; &nbsp;void longTest(long x, long y) { &nbsp; &nbsp; &nbsp; &nbsp;// ����������� &nbsp; &nbsp; &nbsp; &nbsp;x = x * y; &nbsp; &nbsp; &nbsp; &nbsp;x = x / y; &nbsp; &nbsp; &nbsp; &nbsp;x = x % y; &nbsp; &nbsp; &nbsp; &nbsp;x = x + y; &nbsp; &nbsp; &nbsp; &nbsp;x = x - y; &nbsp; &nbsp; &nbsp; &nbsp;x++; &nbsp; &nbsp; &nbsp; &nbsp;x--; &nbsp; &nbsp; &nbsp; &nbsp;x = +y; &nbsp; &nbsp; &nbsp; &nbsp;x = -y; &nbsp; &nbsp; &nbsp; &nbsp;// ��ϵ���߼�������� &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x == y); &nbsp; &nbsp; &nbsp; &nbsp;f(x != y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(!x); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &amp;&amp; y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x || y); &nbsp; &nbsp; &nbsp; &nbsp;// ��λ������� &nbsp; &nbsp; &nbsp; &nbsp;x = ~y; &nbsp; &nbsp; &nbsp; &nbsp;x = x &amp; y; &nbsp; &nbsp; &nbsp; &nbsp;x = x | y; &nbsp; &nbsp; &nbsp; &nbsp;x = x ^ y; &nbsp; &nbsp; &nbsp; &nbsp;x = x &lt;&lt; 1; &nbsp; &nbsp; &nbsp; &nbsp;x = x &gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;x = x &gt;&gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;// ���ϸ�ֵ�� &nbsp; &nbsp; &nbsp; &nbsp;x += y; &nbsp; &nbsp; &nbsp; &nbsp;x -= y; &nbsp; &nbsp; &nbsp; &nbsp;x *= y; &nbsp; &nbsp; &nbsp; &nbsp;x /= y; &nbsp; &nbsp; &nbsp; &nbsp;x %= y; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;&lt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &gt;&gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;x &amp;= y; &nbsp; &nbsp; &nbsp; &nbsp;x ^= y; &nbsp; &nbsp; &nbsp; &nbsp;x |= y; &nbsp; &nbsp; &nbsp; &nbsp;// ����ת���� &nbsp; &nbsp; &nbsp; &nbsp;//- boolean bl = (boolean)x; &nbsp; &nbsp; &nbsp; &nbsp;char c = (char)x; &nbsp; &nbsp; &nbsp; &nbsp;byte b = (byte)x; &nbsp; &nbsp; &nbsp; &nbsp;short s = (short)x; &nbsp; &nbsp; &nbsp; &nbsp;int i = (int)x; &nbsp; &nbsp; &nbsp; &nbsp;float f = (float)x; &nbsp; &nbsp; &nbsp; &nbsp;double d = (double)x; &nbsp; } &nbsp; &nbsp;void floatTest(float x, float y) { &nbsp; &nbsp; &nbsp; &nbsp;// ����������� &nbsp; &nbsp; &nbsp; &nbsp;x = x * y; &nbsp; &nbsp; &nbsp; &nbsp;x = x / y; &nbsp; &nbsp; &nbsp; &nbsp;x = x % y; &nbsp; &nbsp; &nbsp; &nbsp;x = x + y; &nbsp; &nbsp; &nbsp; &nbsp;x = x - y; &nbsp; &nbsp; &nbsp; &nbsp;x++; &nbsp; &nbsp; &nbsp; &nbsp;x--; &nbsp; &nbsp; &nbsp; &nbsp;x = +y; &nbsp; &nbsp; &nbsp; &nbsp;x = -y; &nbsp; &nbsp; &nbsp; &nbsp;// ��ϵ���߼�������� &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x == y); &nbsp; &nbsp; &nbsp; &nbsp;f(x != y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(!x); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &amp;&amp; y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x || y); &nbsp; &nbsp; &nbsp; &nbsp;// ��λ������� &nbsp; &nbsp; &nbsp; &nbsp;//- x = ~y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &amp; y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x | y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x ^ y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &lt;&lt; 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &gt;&gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;// ���ϸ�ֵ�� &nbsp; &nbsp; &nbsp; &nbsp;x += y; &nbsp; &nbsp; &nbsp; &nbsp;x -= y; &nbsp; &nbsp; &nbsp; &nbsp;x *= y; &nbsp; &nbsp; &nbsp; &nbsp;x /= y; &nbsp; &nbsp; &nbsp; &nbsp;x %= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x &lt;&lt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x &gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x &gt;&gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x &amp;= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x ^= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x |= y; &nbsp; &nbsp; &nbsp; &nbsp;// ����ת���� &nbsp; &nbsp; &nbsp; &nbsp;//- boolean bl = (boolean)x; &nbsp; &nbsp; &nbsp; &nbsp;char c = (char)x; &nbsp; &nbsp; &nbsp; &nbsp;byte b = (byte)x; &nbsp; &nbsp; &nbsp; &nbsp;short s = (short)x; &nbsp; &nbsp; &nbsp; &nbsp;int i = (int)x; &nbsp; &nbsp; &nbsp; &nbsp;long l = (long)x; &nbsp; &nbsp; &nbsp; &nbsp;double d = (double)x; &nbsp; } &nbsp; &nbsp;void doubleTest(double x, double y) { &nbsp; &nbsp; &nbsp; &nbsp;// ����������� &nbsp; &nbsp; &nbsp; &nbsp;x = x * y; &nbsp; &nbsp; &nbsp; &nbsp;x = x / y; &nbsp; &nbsp; &nbsp; &nbsp;x = x % y; &nbsp; &nbsp; &nbsp; &nbsp;x = x + y; &nbsp; &nbsp; &nbsp; &nbsp;x = x - y; &nbsp; &nbsp; &nbsp; &nbsp;x++; &nbsp; &nbsp; &nbsp; &nbsp;x--; &nbsp; &nbsp; &nbsp; &nbsp;x = +y; &nbsp; &nbsp; &nbsp; &nbsp;x = -y; &nbsp; &nbsp; &nbsp; &nbsp;// ��ϵ���߼�������� &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &gt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt; y); &nbsp; &nbsp; &nbsp; &nbsp;f(x &lt;= y); &nbsp; &nbsp; &nbsp; &nbsp;f(x == y); &nbsp; &nbsp; &nbsp; &nbsp;f(x != y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(!x); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x &amp;&amp; y); &nbsp; &nbsp; &nbsp; &nbsp;//- f(x || y); &nbsp; &nbsp; &nbsp; &nbsp;// ��λ������� &nbsp; &nbsp; &nbsp; &nbsp;//- x = ~y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &amp; y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x | y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x ^ y; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &lt;&lt; 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x = x &gt;&gt;&gt; 1; &nbsp; &nbsp; &nbsp; &nbsp;// ���ϸ�ֵ�� &nbsp; &nbsp; &nbsp; &nbsp;x += y; &nbsp; &nbsp; &nbsp; &nbsp;x -= y; &nbsp; &nbsp; &nbsp; &nbsp;x *= y; &nbsp; &nbsp; &nbsp; &nbsp;x /= y; &nbsp; &nbsp; &nbsp; &nbsp;x %= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x &lt;&lt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x &gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x &gt;&gt;&gt;= 1; &nbsp; &nbsp; &nbsp; &nbsp;//- x &amp;= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x ^= y; &nbsp; &nbsp; &nbsp; &nbsp;//- x |= y; &nbsp; &nbsp; &nbsp; &nbsp;// ����ת���� &nbsp; &nbsp; &nbsp; &nbsp;//- boolean bl = (boolean)x; &nbsp; &nbsp; &nbsp; &nbsp;char c = (char)x; &nbsp; &nbsp; &nbsp; &nbsp;byte b = (byte)x; &nbsp; &nbsp; &nbsp; &nbsp;short s = (short)x; &nbsp; &nbsp; &nbsp; &nbsp;int i = (int)x; &nbsp; &nbsp; &nbsp; &nbsp;long l = (long)x; &nbsp; &nbsp; &nbsp; &nbsp;float f = (float)x; &nbsp; }}ע�� ��boolean ���͵����������޵ġ�����Ϊ�丳ֵ true �� false��Ҳ�ɲ�������ֵ�Ƿ��� true �� false�����㲻�ܶ������Ӽ����������㡣�� char��byte �� short �����У����ǿ��Կ�������������ġ�����ת����Ч�������Ǳ���Ҫ��ʽǿ������ת�����ܽ�������¸�ֵΪԭʼ���͡����� int ���͵���������ת������ΪĬ�Ͼ��� int �͡���Ȼ���ǲ�����ͣ����˼����һ���Ƿ�ȫ������������� int ���������ʱ������п��ܳ��� int �͵ķ�Χ����������½���ᷢ�����������Ĵ���ʾ����xxxxxxxxxx// operators/Overflow.java// �����ˣ��ڴ����public class Overflow { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;int big = Integer.MAX_VALUE; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"big = \" + big); &nbsp; &nbsp; &nbsp; &nbsp;int bigger = big * 4; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"bigger = \" + bigger); &nbsp; }}��������xxxxxxxxxxbig = 2147483647bigger = -4������û�б����򾯸棬����ʱһ�п����������쳣����Ȼ��Java ������ģ����ǻ����㹻���㡣���� char��byte ���� short����ϸ�ֵ������Ҫ����ת������ʹΪ����ִ��ת�Ͳ�����Ҳ������ֱ������������ͬ�Ľ�������⣬ʡ������ת������ʹ�����Եø��Ӽ�������֮���� boolean ���⣬�����κ����ֻ������ͼ䶼�ɽ�������ת���������ǽ�������ת������ʱ����Ҫע�����ķ�Χ�Ƿ�������������Ǿͺܿ����ڲ�֪�����ж�ʧ���ȡ�����С��������ѽӴ���һ�� C �﷨��������ԣ���ô����ѧϰ Java �������ʱʵ����û���κ����ߡ������������Ѷȣ���ô���Ƽ���Ҫ��ȥ www.OnJava8.com �ۿ� ��Thinking in C�� ����Ƶ�̳�������һЩǰ��֪ʶ������&nbsp;&nbsp;�� 5 �� ���������������ִ�й����п����������粢����ѡ�� �� Java �У�����Ҫִ�п������������ѡ��Java ʹ���� C ������ִ�п�����䣬��˶�����Ϥ C/C++ ��̵�����˵���ⲿ�������ᳵ��·�������������̱�����Զ��й�ͨ��ĳ�ֿ�����䡣�� Java �У��漰�Ĺؼ��ְ��� if-else��while��do-while��for��return��break ��ѡ����� switch�� Java ����֧�ֱ���ڸ���� goto����������ĳЩ���ⳡ������Ȼ������֮��Ч�ķ������� ������ˣ��� Java �������Ծɿ��Խ������Ƶ��߼���ת������֮���͵� goto �÷����Ƹ��ࡣtrue �� false���е�������䶼������������ʽ�ġ��桱�򡰼١�������ִ��·���������� a == b������������������ʽ == ���Ƚ� a �� b ��ֵ�Ƿ���ȡ� �ñ���ʽ���� true �� false������ʾ����xxxxxxxxxx// control/TrueFalse.javapublic class TrueFalse { public static void main(String[] args) { System.out.println(1 == 1); System.out.println(1 == 2); }}��������xxxxxxxxxxtrue falseͨ����һ�µ�ѧϰ������֪���κι�ϵ����������Բ���������䡣 ע������ Java ��ʹ����ֵ��Ϊ����ֵ�ǷǷ��ģ��������ֲ����� C/C++ ���Ǳ������ģ�����Щ�����У����桱Ϊ���㣬�����١����㣩��������ڲ���������ʹ��һ���ǲ���ֵ����ô������Ҫʹ����������ʽ������ boolean ���͵Ľ�������� if(a != 0)��if-elseif-else ����ǿ��Ƴ���ִ���������������ʽ�� ���� else �ǿ�ѡ�ģ���˿�����������ʽ�� if������ʾ����xxxxxxxxxxif(Boolean-expression) ��statement����xxxxxxxxxxif(Boolean-expression) ��statement��else &nbsp;��statement����������ʽ��Boolean-expression���������� boolean ���͵Ľ����ִ����� statement �ȿ������Էֺ� ; ��β��һ������䣬Ҳ�����ǰ����ڴ����� &#123;&#125; �ڵĵĸ������ ���� ����ڴ������ڵ�һ�����䡣 ���������ἰ��statement��һ�ʣ��Ա�ʾ���Ƶ�ִ����䡣������һ���й� if-else �������ӡ�test() �������Ը�֪��������ֵ֮��Ĵ�С��ϵ������ʾ����xxxxxxxxxx// control/IfElse.javapublic class IfElse { &nbsp;static int result = 0; &nbsp;static void test(int testval, int target) { &nbsp; &nbsp;if(testval &gt; target) &nbsp; &nbsp; &nbsp;result = +1; &nbsp; &nbsp;else if(testval &lt; target) // [1] &nbsp; &nbsp; &nbsp;result = -1; &nbsp; &nbsp;else &nbsp; &nbsp; &nbsp;result = 0; // Match } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;test(10, 5); &nbsp; &nbsp;System.out.println(result); &nbsp; &nbsp;test(5, 10); &nbsp; &nbsp;System.out.println(result); &nbsp; &nbsp;test(5, 5); &nbsp; &nbsp;System.out.println(result); }}��������xxxxxxxxxx1-10ע����else if �����¹ؼ��֣������� else �������һ���� if ��䡣Java �� C/C++ ͬ�������ɸ�ʽ���ı�����ԣ���ͨ�����ǻ��� Java ������������в����ײ������Ĺ淶���Ա������߿ɶ��ԡ��������while��do-while �� for ��������ѭ����䣨��ʱҲ�Ƶ�����䣩��ֻ�п���ѭ���Ĳ�������ʽ������Ϊ false��ѭ�����Ż�ֹͣ��whilewhile ѭ������ʽ�ǣ�xxxxxxxxxxwhile(Boolean-expression) &nbsp;statementִ��������ÿһ��ѭ��ǰ���жϲ�������ʽ����ֵ�Ƿ�Ϊ true�������ɲ����������ֱ�������ض�����������ʾ����xxxxxxxxxx// control/WhileTest.java// ��ʾ while ѭ��public class WhileTest { &nbsp;static boolean condition() { &nbsp; &nbsp;boolean result = Math.random() &lt; 0.99; &nbsp; &nbsp;System.out.print(result + \", \"); &nbsp; &nbsp;return result; } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;while(condition()) &nbsp; &nbsp; &nbsp;System.out.println(\"Inside 'while'\"); &nbsp; &nbsp;System.out.println(\"Exited 'while'\"); }}��������xxxxxxxxxxtrue, Inside 'while'true, Inside 'while'true, Inside 'while'true, Inside 'while'true, Inside 'while'...________...________...________...________...true, Inside 'while'true, Inside 'while'true, Inside 'while'true, Inside 'while'false, Exited 'while'condition() ����ʹ�õ��� Math �����̬���� random()���÷����������ǲ��� 0 �� 1 ֮�� (���� 0���������� 1) ��һ�� double ֵ��result ��ֵ��ͨ���Ƚ������ &lt; ������ boolean ���͵Ľ����������̨��� boolean ��ֵʱ�����Զ�����ת��Ϊ��Ӧ��������ʽ true �� false���˴� while ��������ʽ������������ condition() ���� false ʱֹͣѭ������do-whiledo-while �ĸ�ʽ���£�xxxxxxxxxxdo statementwhile(Boolean-expression);while �� do-while ֮���Ψһ�����ǣ���ʹ��������ʽ���ؽ��Ϊ false�� do-while ���Ҳ���ٻ�ִ��һ�Ρ� �� while ѭ�����У��粼������ʽ�״η��صĽ����Ϊ false����ôѭ�����ڵ���䲻�ᱻִ�С�ʵ��Ӧ���У�while ��ʽ�� do-while ��Ϊ���á�forfor ѭ����������õĵ�����ʽ�� ��ѭ���ڵ�һ�ε���֮ǰִ�г�ʼ�����������ִ�в�������ʽ������ÿ�ε�������ʱ������ĳ����ʽ�Ĳ�����for ѭ������ʽ�ǣ�xxxxxxxxxxfor(initialization; Boolean-expression; step) &nbsp;statement��ʼ�� (initialization) ����ʽ����������ʽ (Boolean-expression) �����߲��� (step) ���㣬������Ϊ�ա�ÿ�ε���֮ǰ�����жϲ�������ʽ�Ľ���Ƿ������һ��������Ϊ false�������� for ѭ���岢����ִ�к�����롣 ÿ��ѭ������ʱ������ִ��һ�β�����for ѭ��ͨ�����ڡ����������񡣴���ʾ����xxxxxxxxxx// control/ListCharacters.java public class ListCharacters { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;for(char c = 0; c &lt; 128; c++) &nbsp; &nbsp; &nbsp;if(Character.isLowerCase(c)) &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"value: \" + (int)c + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" character: \" + c); }}��������ǰ 10 �У���xxxxxxxxxxvalue: 97 character: avalue: 98 character: bvalue: 99 character: cvalue: 100 character: dvalue: 101 character: evalue: 102 character: fvalue: 103 character: gvalue: 104 character: hvalue: 105 character: ivalue: 106 character: j ...ע�������� c ���� for ѭ��ִ��ʱ�ű�����ģ����������������Ŀ�ͷ��c ��������Χ���� for ѭ�����ڡ���ͳ��������������� C ��Ҫ���ڴ���飨block��ǰ��������б������ܹ�ʹ�á����������������ڴ�����ʱ��Ϊ��Щ���������ڴ�ռ䡣�� Java �� C++ �У����ǿ�����������ʹ�ñ������������ҿ�������Ҫʱ�Ŷ�������� ������Ȼ�ı�����ʹ���ǵĴ�������ױ������� 1������ʹ���� java.lang.Character ��װ�࣬���಻�������˻������� char ��ֵ������װ��һЩ���õķ���������������õ��˾�̬���� isLowerCase() ���ж��ַ��Ƿ�ΪСд�����Ų������� Java �ж�������������ﲢ��ָ����ƽ�����ڷָ�����ͷ��������Ķ��ŷָ���������һ���÷����� for ѭ���ĳ�ʼ���Ͳ��������ж��������������ǿ���ʹ�ö��ŷָ������䣬����˳�������Щ��䡣ע����Ҫ����ı���������ͬ������ʾ����xxxxxxxxxx// control/CommaOperator.java public class CommaOperator { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;for(int i = 1, j = i + 10; i &lt; 5; i++, j = i * 2) { &nbsp; &nbsp; &nbsp;System.out.println(\"i = \" + i + \" j = \" + j); &nbsp; } }}��������xxxxxxxxxxi = 1 j = 11i = 2 j = 4i = 3 j = 6i = 4 j = 8������ int �������������� i �� j��ʵ���ϣ��ڳ�ʼ���������ǿ��Զ�������������ͬ���ͱ�����ע������ Java �У������� for ѭ���ڿ��Ʊ���ʽ�ж�������� ���ǲ��ܽ��˷�����������ѭ������ѡ�������һ��ʹ�á�ͬʱ�����ǿ��Կ����������ڳ�ʼ�������ڲ������֣���䶼��˳��ִ�еġ�for-in �﷨Java 5 �����˸�Ϊ���ġ���ǿ�� for ѭ�����﷨����������ͼ��ϡ�������ϸ�ڣ��ɲο� ���� �� ���� �½����ݣ����󲿷��ĵ�Ҳ����Ϊ for-each �﷨������Ϊ�˲��� Java 8 ������ forEach() ��������������ҳ�֮Ϊ for-in ѭ���� ��Python �������Ƶ��������磺for x in sequence����ע��������ܻ��������ط�������ͬ�з���for-in ������ȥ���� int �����Ͳ���������ѭ�������� ����������������ȡ float �����е�Ԫ�ء�����ʾ����xxxxxxxxxx// control/ForInFloat.java import java.util.*; public class ForInFloat { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp;float[] f = new float[10]; &nbsp; &nbsp;for(int i = 0; i &lt; 10; i++) &nbsp; &nbsp; &nbsp;f[i] = rand.nextFloat(); &nbsp; &nbsp;for(float x : f) &nbsp; &nbsp; &nbsp;System.out.println(x); }}��������xxxxxxxxxx0.727115750.399826350.53094540.05341220.160206560.577997570.188478650.41701370.516602040.73734957����������չʾ�˴�ͳ for ѭ�����÷����������������� for-in ���÷�������ʾ����xxxxxxxxxxfor(float x : f) {������䶨����һ�� float ���͵ı��� x���̶���ÿһ�� f ��Ԫ�ظ�ֵ�������κ�һ����������ķ���������ʹ�� for-in ѭ���﷨������Ԫ�ء����� String ����һ������ toCharArray()������ֵ����Ϊ char ���飬���ǿ��Ժ����׵��� for-in ѭ���б�����������ʾ����xxxxxxxxxx// control/ForInString.java public class ForInString { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;for(char c: \"An African Swallow\".toCharArray()) &nbsp; &nbsp; &nbsp;System.out.print(c + \" \"); }}��������xxxxxxxxxxA n &nbsp; A f r i c a n &nbsp; S w a l l o w�ܿ��������� ���� �½���ѧϰ����for-in ѭ���������κοɵ�����iterable���� ����ͨ����for ѭ����䶼����һ��������ֵ�����в���������ʾ����xxxxxxxxxxfor(int i = 0; i &lt; 100; i++)������ˣ������ȴ���һ�� int ���飬���������޷�ʹ�� for-in ѭ����������Ϊ�򻯲��Թ��̣������� onjava ���з�װ�� Range �࣬������ range() �������Զ�����ǡ�������顣�� ��װ��Implementation Hiding����һ�������ǽ����˾�̬���루static import���������˽�ϸ�ھͿ���ֱ��ʹ�á� �йؾ�̬������﷨�������� import ����п�����xxxxxxxxxx// control/ForInInt.java import static onjava.Range.*; public class ForInInt { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;for(int i : range(10)) // 0..9 &nbsp; &nbsp; &nbsp;System.out.print(i + \" \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;for(int i : range(5, 10)) // 5..9 &nbsp; &nbsp; &nbsp;System.out.print(i + \" \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;for(int i : range(5, 20, 3)) // 5..20 step 3 &nbsp; &nbsp; &nbsp;System.out.print(i + \" \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;for(int i : range(20, 5, -3)) // Count down &nbsp; &nbsp; &nbsp;System.out.print(i + \" \"); &nbsp; &nbsp;System.out.println(); }}��������xxxxxxxxxx0 1 2 3 4 5 6 7 8 95 6 7 8 95 8 11 14 1720 17 14 11 8range() �����ѱ� ���������أ�ͬ�������������б������Ͳ�ͬ���������� range() �����ж���������ʽ����һ�ֲ����� 0 ����Χ���ޣ�����������ֵ���ڶ��ֲ�������һ��������������������Χ�ڵ�����ֵ����������ʽ��һ������ֵ�������ÿ�ε�����Ϊ��ֵ�������� range() ���������Եݼ���range() �޲η����Ǹ���������򵥵İ汾���й����ݻ��ڱ����Ժ���ܡ�range() ��ʹ������˴���ɶ��ԣ��� for-in ѭ���ڱ�������Ӧ����Ĵ���ʾ����������ע�⣬System.out.print() ����������з����������ǿ��Էֶ����ͬһ�С�for-in �﷨���Խ�ʡ���Ǳ�д�����ʱ�䡣 ����Ҫ���ǣ�������˴���ɶ����Լ����õ�����������ͼ����ȡ�����ÿ��Ԫ�أ���������ϸ˵�������ϸ�ڣ�������������������ѡ������Ԫ�أ� �����Ƽ�ʹ�� for-in �﷨��return�� Java ���м����ؼ��ִ�����������֧������ζ�����κβ��Լ��ɷ�������Щ�ؼ��ְ��� return��break��continue ����ת������ǩ���ķ��������������������е� goto��return �ؼ���������������ã�1.ָ��һ����������ֵ (�ڷ����������ͷ� void �������)��2.�˳���ǰ���������������� 1 ��ֵ�����ǿ������� return ����Щ�ص�����д���� IfElse.java �ļ��е� test() ����������ʾ����xxxxxxxxxx// control/TestWithReturn.java public class TestWithReturn { &nbsp;static int test(int testval, int target) { &nbsp; &nbsp;if(testval &gt; target) &nbsp; &nbsp; &nbsp;return +1; &nbsp; &nbsp;if(testval &lt; target) &nbsp; &nbsp; &nbsp;return -1; &nbsp; &nbsp;return 0; // Match } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;System.out.println(test(10, 5)); &nbsp; &nbsp;System.out.println(test(5, 10)); &nbsp; &nbsp;System.out.println(test(5, 5)); }}��������xxxxxxxxxx1-10���ﲻ��Ҫ else����Ϊ�÷���ִ�е� return �ͽ����ˡ�����ڷ���ǩ���ж����˷���ֵ����Ϊ void����ô�ڴ���ִ�н���ʱ����һ����ʽ�� return�� Ҳ����˵���ǲ����������ڷ�������ʽ�ذ��� return ��䡣 ע���������ķ��������ķ���ֵ����Ϊ�� void ���ͣ���ô�����ȷ��ÿ������·��������һ��ֵ��break �� continue���κε������������ڣ�������ʹ�� break �� continue ������ѭ�������̡� ���У�break ��ʾ������ǰѭ���塣�� continue ��ʾֹͣ����ѭ������ʼ��һ��ѭ������������չʾ break �� continue �� for��while ѭ���е�ʹ�á�����ʾ����xxxxxxxxxx// control/BreakAndContinue.java// Break �� continue �ؼ��� import static onjava.Range.*; public class BreakAndContinue { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;for(int i = 0; i &lt; 100; i++) { // [1] &nbsp; &nbsp; &nbsp;if(i == 74) break; // ����ѭ�� &nbsp; &nbsp; &nbsp;if(i % 9 != 0) continue; // ��һ��ѭ�� &nbsp; &nbsp; &nbsp;System.out.print(i + \" \"); &nbsp; } &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;// ʹ�� for-in ѭ��: &nbsp; &nbsp;for(int i : range(100)) { // [2] &nbsp; &nbsp; &nbsp;if(i == 74) break; // ����ѭ�� &nbsp; &nbsp; &nbsp;if(i % 9 != 0) continue; // ��һ��ѭ�� &nbsp; &nbsp; &nbsp;System.out.print(i + \" \"); &nbsp; } &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;int i = 0; &nbsp; &nbsp;// \"����ѭ��\": &nbsp; &nbsp;while(true) { // [3] &nbsp; &nbsp; &nbsp;i++; &nbsp; &nbsp; &nbsp;int j = i * 27; &nbsp; &nbsp; &nbsp;if(j == 1269) break; // ����ѭ�� &nbsp; &nbsp; &nbsp;if(i % 10 != 0) continue; // ѭ������ &nbsp; &nbsp; &nbsp;System.out.print(i + \" \"); &nbsp; } }}������:xxxxxxxxxx0 9 18 27 36 45 54 63 720 9 18 27 36 45 54 63 7210 20 30 40[1] ����� for ѭ���У�i ��ֵ��Զ����ﵽ 100����Ϊһ�� i ���� 74��break ���ͻ��ж�ѭ����ͨ����ֻ���ڲ�֪���ж�������ʱ����ʱ������Ҫ break����Ϊ i ���ܱ� 9 ������continue ���ͻ�ʹѭ����ͷ��ʼ����ʹ i ����)������ܹ���������ֵ��ʾ������ [2] ʹ�� for-in �﷨�������ͬ�� [3] ���� while ѭ����ѭ���ڵ� break ������ֹѭ����ע����continue ���ɽ�����Ȩ�ƻ�ѭ���Ķ�����������ִ�� continue ֮����κβ����� ��ˣ�ֻ�е� i ��ֵ�ɱ� 10 ����ʱ�Ż������������У���ʾֵ 0����Ϊ 0��9 ���� 0������һ������ѭ������ʽ�� for(;;)�� �ڱ��������������� while(true) ���죬ʹ��������ȫȡ������ı��Ʒζ������������ gotogoto �ؼ��� ������ڳ�����������г��֡���ʵ�ϣ�goto ��Դ�������assembly language�������еĳ�����ƣ��������� A �������������������������������������ɱ����������Ĵ��룬��ᷢ�������������г���˴�������ת����֮�������Ĵ���ֱ��������Ӳ�� CPU �У�Java Ҳ������Լ��ġ������롱���ֽ��룩��ֻ�������������� Java �������ģ�Java Virtual Machine����һ��Դ�뼶����ת�� goto��Ϊ����������ɨ���أ����������Ǵ�һ����ת����һ��������ʲô�취��ʶ�����Ŀ��������أ����� Edsger Dijkstra���������� ��Goto �к��� �ۣ�Goto considered harmful���Ժ�goto ��Ӵ�ʧ�衣�������˽��齫���ӹؼ������޳������������ἰ�ľ�����������ǲ�Ӧ�����������ˡ����ⲻ�� goto�������ڹ���ʹ�� goto���ڼ���������£�goto ʵ�����ǿ������̵���ѷ�ʽ������ goto ���� Java ��һ�������֣����䲢δ����ʽ���á�����˵�� Java �в���֧�� goto��Ȼ������ break �� continue �������ؼ��ֵ����ϣ��������ܿ���һЩ goto ��Ӱ�ӡ����ǲ�������һ����ת�������ж�ѭ������һ�ַ�����֮���԰��������� goto ������һ�����ۣ�����������ʹ������ͬ�Ļ��ƣ���ǩ������ǩ���Ǻ����һ��ð�ŵı�ʶ��������ʾ����xxxxxxxxxxlabel1:�� Java ��˵��Ψһ�õ���ǩ�ĵط�����ѭ�����֮ǰ����һ��˵����ʵ����Ҫ������ѭ������ǰ�� ���� �ڱ�ǩ��ѭ��֮�������κ���䶼�ǲ����ǵġ�����ѭ��֮ǰ���ñ�ǩ��Ψһ�����ǣ�����ϣ��������Ƕ����һ��ѭ������һ�����ء��������� break �� continue �ؼ���ͨ��ֻ�жϵ�ǰѭ�������������ǩһ��ʹ�ã����Ǿͻ��жϲ���ת����ǩ���ڵĵط���ʼִ�С�����ʾ����xxxxxxxxxxlabel1:outer-iteration { &nbsp;inner-iteration { &nbsp;// ... &nbsp;break; // [1] &nbsp;// ... &nbsp;continue; // [2] &nbsp;// ... &nbsp;continue label1; // [3] &nbsp;// ... &nbsp;break label1; // [4] }}[1] break �ж��ڲ�ѭ���������ⲿѭ�������� [2] continue �ƻ��ڲ�ѭ������ʼ������������ 3 �У�continue label1 ȴͬʱ�ж��ڲ�ѭ���Լ��ⲿѭ���������� label1 ���� [3] �����ʵ���Ǽ���ѭ������ȴ���ⲿѭ����ʼ�� [4] break label1 Ҳ���ж�����ѭ�������ص� label1 �������������½���ѭ����Ҳ����˵����ʵ������ȫ��ֹ������ѭ���������� for ѭ����һ�����ӣ�xxxxxxxxxx// control/LabeledFor.java// ���䡰��ǩ break���� for ѭ����ʹ�� break �� continue public class LabeledFor { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;int i = 0; &nbsp; &nbsp;outer: // �˴�����������ִ����� &nbsp; &nbsp;for(; true ;) { // ����ѭ�� &nbsp; &nbsp; &nbsp;inner: // �˴�����������ִ����� &nbsp; &nbsp; &nbsp;for(; i &lt; 10; i++) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i = \" + i); &nbsp; &nbsp; &nbsp; &nbsp;if(i == 2) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"continue\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;continue; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;if(i == 3) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"break\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i++; // ���� i ��Զ�޷�������� &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // ������� &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;if(i == 7) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"continue outer\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i++; &nbsp;// ���� i ��Զ�޷�������� &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// ������� &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;continue outer; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;if(i == 8) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"break outer\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break outer; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;for(int k = 0; k &lt; 5; k++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(k == 3) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"continue inner\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;continue inner; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;// �ڴ˴��޷� break �� continue ��ǩ }}��������xxxxxxxxxxi = 0continue inneri = 1continue inneri = 2continuei = 3breaki = 4continue inneri = 5continue inneri = 6continue inneri = 7continue outeri = 8break outerע�� break ���ж� for ѭ���������ڵִ� for ѭ����ĩβ֮ǰ����������ʽ����ִ�С����� break �����˵�������ʽ�����Ե������� i==3 �������ֱ��ִ�С��� i==7 ������£�continue outer ���Ҳ�ᵽ��ѭ������������Ҳ������������������Ҳ��ֱ�ӵ����ġ����û�� break outer ��䣬��û�а취��һ���ڲ�ѭ�����ҵ����ⲿѭ����·������������ break ����ֻ���ж����ڲ��ѭ�������� continue ͬ����ˣ��� ��Ȼ���������ж�ѭ����ͬʱ�˳��������򵥵���һ�� return ���ɡ����������������չʾ�˴���ǩ�� break �Լ� continue ����� while ѭ���е��÷���xxxxxxxxxx// control/LabeledWhile.java// ����ǩ�� break �� conitue �� while ѭ���е�ʹ�� public class LabeledWhile { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;int i = 0; &nbsp; &nbsp;outer: &nbsp; &nbsp;while(true) { &nbsp; &nbsp; &nbsp;System.out.println(\"Outer while loop\"); &nbsp; &nbsp; &nbsp;while(true) { &nbsp; &nbsp; &nbsp; &nbsp;i++; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i = \" + i); &nbsp; &nbsp; &nbsp; &nbsp;if(i == 1) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"continue\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;continue; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;if(i == 3) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"continue outer\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;continue outer; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;if(i == 5) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"break\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;if(i == 7) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"break outer\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break outer; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; } &nbsp; } }}��������xxxxxxxxxxOuter while loopi = 1continuei = 2i = 3continue outerOuter while loopi = 4i = 5breakOuter while loopi = 6i = 7break outerͬ���Ĺ����������� while���򵥵�һ�� continue ���˻����ڲ�ѭ���Ŀ�ͷ����������������ִ�С����б�ǩ�� continue �ᵽ���ǩ��λ�ã������½���������Ǹ���ǩ�����ѭ����break ���жϵ�ǰѭ���������뵱ǰ��ǩ��ĩβ������ǩ�� break ���жϵ�ǰѭ�������������Ǹ���ǩָʾ��ѭ����ĩβ�����Ҫ��ס���ص��ǣ��� Java ����Ҫʹ�ñ�ǩ��Ψһ���ɾ�����Ϊ��ѭ��Ƕ�״��ڣ�������Ӷ��Ƕ���� break �� continue��break �� continue ��ǩ�ڱ����е�ʹ��Ƶ����Խϵ� (��ǰ�������к���ʹ�û�û������)���������Ǻ����ڴ����￴�����ǡ��� Dijkstra �� ��Goto �к��� �����У�����Եľ��Ǳ�ǩ������ goto�����۲쵽 BUG �������ƺ����ų����б�ǩ������������2����ǩ�� goto ʹ�ó������Է��������ǣ�Java ��ǩ��������ⷽ������⣬��Ϊ���ǵ�Ӧ�ó����ܵ����ƣ��޷���������ʱ��ʽ������ơ��ɴ�Ҳ������һ����Ȥ�����Σ����������������ƣ�����ʹ���������Ը����м�ֵ��switchswitch ��ʱҲ������Ϊһ��ѡ����䡣������������ʽ��ֵ��switch �����Դ�һϵ�д�����ѡ��һ��ȥִ�С����ĸ�ʽ���£�xxxxxxxxxxswitch(integral-selector) { case integral-value1 : statement; break; case integral-value2 : statement; break; case integral-value3 : statement; break; case integral-value4 : statement; break; case integral-value5 : statement; break; // ... default: statement;}���У�integral-selector ������ѡ�����ӣ���һ���ܹ���������ֵ�ı���ʽ��switch �ܹ����������ʽ�Ľ����ÿ�� integral-value ������ֵ����Ƚϡ�����������ģ���ִ�ж�Ӧ����䣨�򵥻򸴺���䣬���в�����Ҫ���ţ�����û�з�������ģ���ִ�� default ��䡣������Ķ����У���һ�ע�⵽ÿ�� case ����һ�� break ��β��������ʹִ��������ת�� switch �����ĩβ�����ǹ��� switch ����һ�ִ�ͳ��ʽ���� break �ǿ�ѡ�ġ���ʡ�� break�� �����ִ�к���� case ���Ĵ��룬ֱ������һ�� break Ϊֹ��ͨ�����ǲ��������������������о���ĳ���Ա��˵��Ҳ���ܹ��Ƽ����á�ע������ default ���û�� break����Ϊִ�������ѵ��� break ����תĿ�ĵء���Ȼ��������ǵ���̷�����ԭ����ȫ������ default ����ĩβ����һ�� break����������û���κ�ʵ�ʵ����á�switch �����һ��ʵ�ֶ�·ѡ��ĸɾ������һ�ַ�ʽ�������һϵ��ִ��·������ѡһ����������Ҫ��ʹ��һ��ѡ�����ӣ����ұ����� int �� char ����������ֵ�����磬������һ���ִ����߸�������Ϊѡ������ʹ�ã���ô������ switch ������ǲ��Ṥ���ġ����ڷ��������ͣ�Java 7 ���ϰ汾�е� String �ͳ��⣩�������ʹ��һϵ�� if ��䡣 ����һ�µĽ�β �У����ǽ����˽⵽ö���������������� switch �����������ŵؽ�����������ơ�����������ӿ����������ĸ�����ж�������Ԫ�����Ǹ�����ĸ��xxxxxxxxxx// control/VowelsAndConsonants.java // switch ִ��������ʾimport java.util.*; public class VowelsAndConsonants { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp;for(int i = 0; i &lt; 100; i++) { &nbsp; &nbsp; &nbsp;int c = rand.nextInt(26) + 'a'; &nbsp; &nbsp; &nbsp;System.out.print((char)c + \", \" + c + \": \"); &nbsp; &nbsp; &nbsp;switch(c) { &nbsp; &nbsp; &nbsp; &nbsp;case 'a': &nbsp; &nbsp; &nbsp; &nbsp;case 'e': &nbsp; &nbsp; &nbsp; &nbsp;case 'i': &nbsp; &nbsp; &nbsp; &nbsp;case 'o': &nbsp; &nbsp; &nbsp; &nbsp;case 'u': System.out.println(\"vowel\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; &nbsp;case 'y': &nbsp; &nbsp; &nbsp; &nbsp;case 'w': System.out.println(\"Sometimes vowel\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; &nbsp;default: &nbsp;System.out.println(\"consonant\"); &nbsp; &nbsp; } &nbsp; } }}��������xxxxxxxxxxy, 121: Sometimes voweln, 110: consonantz, 122: consonantb, 98: consonantr, 114: consonantn, 110: consonanty, 121: Sometimes vowelg, 103: consonantc, 99: consonantf, 102: consonanto, 111: vowelw, 119: Sometimes vowelz, 122: consonant ...���� Random.nextInt(26) ����� 0 �� 25 ֮���һ��ֵ�����������ϼ���һ��ƫ���� a�����ɲ���Сд��ĸ���� case ����У�ʹ�õ�����������ַ�Ҳ��������ڱȽϵ�����ֵ����ע�� case ����ܹ��ѵ���һ��Ϊһ�δ����γɶ���ƥ�䣬��ֻҪ���϶��������е�һ�֣���ִ���Ƕ��ر�Ĵ��롣��ʱҲӦ��ע�⽫ break ��������ض� case ��ĩβ������������̻��������ִ�У���������� case�������������У�xxxxxxxxxxint c = rand.nextInt(26) + 'a';�˴� Random.nextInt() ������ 0~25 ֮���һ����� int ֵ���������ӵ� a �ϡ����ʾ a ���Զ���ת��Ϊ int ��ִ�мӷ���Ϊ�˰� c �����ַ���ӡ�����뽫��ת��Ϊ char�����򣬽������������switch �ַ���Java 7 ���������ַ����� switch ���÷��� ����չʾ�˴�һ�� String ��ѡ�����ֵ�Ĵ�ͳ�������Լ���ʽ������xxxxxxxxxx// control/StringSwitch.java public class StringSwitch { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;String color = \"red\"; &nbsp; &nbsp;// �ϵķ�ʽ: ʹ�� if-then �ж� &nbsp; &nbsp;if(\"red\".equals(color)) { &nbsp; &nbsp; &nbsp;System.out.println(\"RED\"); &nbsp; } else if(\"green\".equals(color)) { &nbsp; &nbsp; &nbsp;System.out.println(\"GREEN\"); &nbsp; } else if(\"blue\".equals(color)) { &nbsp; &nbsp; &nbsp;System.out.println(\"BLUE\"); &nbsp; } else if(\"yellow\".equals(color)) { &nbsp; &nbsp; &nbsp;System.out.println(\"YELLOW\"); &nbsp; } else { &nbsp; &nbsp; &nbsp;System.out.println(\"Unknown\"); &nbsp; } &nbsp; &nbsp;// �µķ���: �ַ������� switch &nbsp; &nbsp;switch(color) { &nbsp; &nbsp; &nbsp;case \"red\": &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"RED\"); &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp;case \"green\": &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"GREEN\"); &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp;case \"blue\": &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"BLUE\"); &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp;case \"yellow\": &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"YELLOW\"); &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp;default: &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Unknown\"); &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; } }}��������xxxxxxxxxxREDREDһ�������� switch�������������ʵ����һ���߼���չ���﷨�ǡ��µı��뷽ʽ��ʹ�ý���������������������ά������Ϊ switch �ַ����ĵڶ������ӣ��������·��� Math.random()�� ���Ƿ������ 0 �� 1 ��ֵ���������ǲ�����ֵ 1 �أ�����ѧ�����У������� (0,1)�� [0,1)��(0,1] ��[0,1] �е������أ��������ű�ʾ���������������ű�ʾ������������������һ�������ṩ�𰸵Ĳ��Գ��� ���������в�������Ϊ String ���󴫵ݣ�������ǿ��� switch ����������Ҫ��ʲô�� ��ô�������ˣ�����û����ṩ���� �������� args ������ͻᵼ�³���ʧ�ܡ� ���������⣬������ҪԤ�ȼ������ĳ��ȣ�������Ϊ 0����ʹ�����ַ��� &quot;&quot; ���������ѡ�� args �����еĵ�һ��Ԫ�أ�xxxxxxxxxx// control/RandomBounds.java // Math.random() ����� 0.0 �� 1.0 ��// {java RandomBounds lower}import onjava.*; public class RandomBounds { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;new TimedAbort(3); &nbsp; &nbsp;switch(args.length == 0 ? \"\" : args[0]) { &nbsp; &nbsp; &nbsp;case \"lower\": &nbsp; &nbsp; &nbsp; &nbsp;while(Math.random() != 0.0) &nbsp; &nbsp; &nbsp; &nbsp; ; // �������� &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Produced 0.0!\"); &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp;case \"upper\": &nbsp; &nbsp; &nbsp; &nbsp;while(Math.random() != 1.0) &nbsp; &nbsp; &nbsp; &nbsp; ; // �������� &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Produced 1.0!\"); &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp;default: &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Usage:\"); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"\\tRandomBounds lower\"); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"\\tRandomBounds upper\"); &nbsp; &nbsp; &nbsp; &nbsp;System.exit(1); &nbsp; } }}Ҫ���иó��������������һ���xxxxxxxxxxjava RandomBounds lower// ����java RandomBounds upperʹ�� onjava ���е� TimedAbort ���ʹ�������������ֹ���ӽ���������ƺ� Math.random() ���������ֵ�ﲻ���� 0.0 �� 1.0�� ����Ǹò������׻����ĵط�����Ҫ���� 0 �� 1 ֮�����в�ͬ double ��ֵ�Ŀ����ԣ���ô������Եĺķѵ�ʱ����ܳ���һ���˵������ˡ� ��������ֱ�Ӹ�����ȷ�Ľ����Math.random() �Ľ������Χ���� 0.0 �������� 1.0�� ����ѧ�����У����� [0,1������ʾ���ɴ˿�֪�����Ǳ���С�ķ���ʵ�鲢�˽����ǵľ����ԡ�����С�������ܽ������ǶԴ������������г��ֵĻ������Ե�̽�������㣬��������ȼ�������ת����ѡ��͵����� ����������׼���ã���ʼ�����������ͺ���ʽ��̵�����ɡ� ��һ�µ����ݺ����� Java ����е���Ҫ���⣺�������ʼ���������������ţ����������װ��implementation hiding���ĺ��ĸ���� 6 �� ��ʼ��������&quot;����ȫ&quot;�ı������ɱ�̴��۰�����������֮һ����������ȫ�����⣺��ʼ����������C �����кܶ�� bug ������Ϊ����Ա���ǳ�ʼ�����µġ������Ǻܶ�����ʹ���߲�֪����γ�ʼ�����������������Ǳ����ȥ��ʼ��������������һ����������⣬��Ϊ����ʹ��һ��Ԫ�������º�Ͳ���ȥ�������Ԫ�أ�����������������������������������Ԫ��ʹ�õ���Դ�������ᱻ���գ�ֱ���������������е���Դ���ر����ڴ棩��C++ �����˹������ĸ������һ������ķ�����ÿ����һ��������������ͻᱻ�Զ����á�Java �����˹������ĸ�����⻹ʹ���������ռ�����Garbage Collector, GC��ȥ�Զ����ղ��ٱ�ʹ�õĶ�����ռ����Դ����һ�½����۳�ʼ�������������⣬�Լ��� Java �ж����ǵ�֧�֡����ù�������֤��ʼ���������Ϊÿ���ഴ��һ�� initialize() �������÷�������ʾ����ʹ����֮ǰ��Ҫ�ȵ����������ҵ��ǣ��û�����üǵ�ȥ���������� Java �У���������ͨ����������֤ÿ������ĳ�ʼ�������һ�����й���������ô Java �����û�ʹ�ö���֮ǰ��������մ�����ɣ��Զ����ö���Ĺ������������Ӷ���֤��ʼ�����¸���ս��������������������������������⣺��һ�����κ�������������������������Ԫ�ص�������ͻ���ڶ����Ǳ���������ʼ��֪���������������ƣ��Ӷ���������C++ �Ľ�������������������������߼��ģ����� Java ��ʹ����ͬ���ķ�ʽ��������������������ͬ���ڳ�ʼ���������Զ����ù�����������������ġ�����ʾ���ǰ�����һ�����������ࣺxxxxxxxxxx// housekeeping/SimpleConstructor.java// Demonstration of a simple constructor class Rock { &nbsp; &nbsp;Rock() { // ����һ�������� &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"Rock \"); &nbsp; }} public class SimpleConstructor { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; 10; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Rock(); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxxRock Rock Rock Rock Rock Rock Rock Rock Rock Rock���ڣ�������һ������ʱ��new Rock() ���ڴ汻���䣬�����������á���������֤�˶�������ʹ����֮ǰ��������ȷ�ĳ�ʼ������һ����Ҫע�⣬��������������������ͬ������Ҫ��������ĸСд�ı�̷���� C++ �У��޲ι���������ΪĬ�Ϲ���������������� Java ����֮ǰʹ���˺ܶ��ꡣ���ǣ�����һЩԭ��Java ������Ǿ���ʹ���޲ι�����������ƣ��ң����ߣ���Ϊ���ֽз���׾����û�б�Ҫ�������Ҵ������ʹ��Ĭ�Ϲ�������Java 8 ������ default �ؼ������η������������ˣ��һ������޲ι������Ľз��ɡ�����������һ��������������Ҳ���Դ��������������δ���һ������֮ǰ�����������޸ģ�ʹ�ù���������һ��������xxxxxxxxxx// housekeeping/SimpleConstructor2.java// Constructors can have arguments class Rock2 { &nbsp; &nbsp;Rock2(int i) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"Rock \" + i + \" \"); &nbsp; }} public class SimpleConstructor2 { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; 8; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Rock2(i); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxxRock 0 Rock 1 Rock 2 Rock 3 Rock 4 Rock 5 Rock 6 Rock 7����� Tree ��һ�����췽����ֻ����һ������������ʾ���ĸ߶ȣ���ô�������������������һ����:xxxxxxxxxxTree t = new Tree(12); // 12-foot ����� Tree(int) ��Ψһ�Ĺ���������ô�������Ͳ��������������κη�ʽ���� Tree ���͵Ķ���������������һ����Ҫ�����⣬ʹ�ô�����׶������磬������Ĵ�����У��㿴������ initialize() ��������ʽ���ã����Ӹ�����������initialize() ����Ӧ�������Ĵ������롣�� Java �У�����Ĵ������ʼ����ͳһ�ĸ�����߲��ɷָ������û�з���ֵ������һ������ķ����������ͷ�������Ϊ void ����ͨ������ͬ����ͨ�������Է��ؿ�ֵ���㻹��ѡ���������ر�����ͣ���������û�з���ֵ��ȴͬʱҲû�и���ѡ�����أ�new ����ʽ��Ȼ�����˸մ����Ķ�������ã�������������ȴû�з����κ�ֵ����������з���ֵ��������Ҳ�����Լ�ѡ����������ʲô����ô�������ͻ���֪������������ô�����Ǹ�����ֵ���������ֵû�н����ߣ������������κα�������ж��߱���һ����Ҫ���Ծ������������㴴��һ������ʱ���ͻ���˶��������ڴ�ռ���������������Ϊ����������ͨ������ָ�����еĶ������Ժͷ���������������ϵͳ����������޸ġ��ͺñ�дɢ�ġ���Ŀ��������߹�ͨ������������ϸ΢�Ĳ��ӳ�䵽��������л����һ�����⡣ͨ������ͬ�Ĵʿ��Ա�����ֲ�ͬ�ĺ��塪�����Ǳ�&quot;����&quot;�ˡ��ر��ǵ�����Ĳ���Сʱ�����������á����˵&quot;��ϴ����&quot;��&quot;��ϴ��&quot;��&quot;��ϴ��&quot;�������ӲҪ��ô˵�ͻ��Եú��޴���&quot;��ϴ�����ķ�ʽϴ����&quot;��&quot;��ϴ���ķ�ʽϴ��&quot;��&quot;��ϴ���ķ�ʽϴ��&quot;����Ϊ���ڸ�������Ҫ������Ϊ�Ķ�����������������Զ�����&quot;����&quot;�ԣ����Լ�ʹ©�������ʣ���Ҳ�����׺��塣�㲻��Ҫ��ÿ�����ʹ�ò�ͬ�Ĵʻ㡪�����Դ��������ƶϳ����塣�����������ԣ������� C ���ԣ�Ҫ��Ϊÿ������������Щ�����о�����Ϊ�������ṩһ����һ�޶��ı�ʶ�������ԣ��㲻����һ�� print() �������ܴ�ӡ���ͣ�Ҳ�ܴ�ӡ�����͡���ÿ�������������벻ͬ���� Java (C++) �У�����һ������Ҳ��ʹ�˱���ʹ�÷������أ�����������Ϊ�������������϶�����������ͬ������һ������ֻ����һ��������������ô����ôͨ����ͬ�ķ�ʽ����һ�������أ����磬���봴��һ���࣬�����ĳ�ʼ����ʽ�����֣�һ���Ǳ�׼����ʽ����һ���Ǵ��ļ��ж�ȡ��Ϣ�ķ�ʽ������Ҫ�������������޲ι���������һ�� String ���Ͳ����Ĺ��������ò��������ļ���������������������ͬ�����֡�����������ͬ����ˣ����������Ǳ�Ҫ�ģ�����������������ͬ�ķ����������յĲ�����ͬ�����ܷ������ض��ڹ���������Ҫ�ģ�����Ҳ���Զ��κη����ܷ���ؽ������ء�����չʾ��������ع������ͷ�����xxxxxxxxxx// housekeeping/Overloading.java// Both constructor and ordinary method overloading class Tree { &nbsp; &nbsp;int height; &nbsp; &nbsp;Tree() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Planting a seedling\"); &nbsp; &nbsp; &nbsp; &nbsp;height = 0; &nbsp; } &nbsp; &nbsp;Tree(int initialHeight) { &nbsp; &nbsp; &nbsp; &nbsp;height = initialHeight; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Creating new Tree that is \" + height + \" feet tall\"); &nbsp; } &nbsp; &nbsp;void info() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Tree is \" + height + \" feet tall\"); &nbsp; } &nbsp; &nbsp;void info(String s) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(s + \": Tree is \" + height + \" feet tall\"); &nbsp; }}public class Overloading { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; 5; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Tree t = new Tree(i); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;t.info(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;t.info(\"overloaded method\"); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;new Tree(); &nbsp; }}�����xxxxxxxxxxCreating new Tree that is 0 feet tallTree is 0 feet talloverloaded method: Tree is 0 feet tallCreating new Tree that is 1 feet tallTree is 1 feet talloverloaded method: Tree is 1 feet tallCreating new Tree that is 2 feet tallTree is 2 feet talloverloaded method: Tree is 2 feet tallCreating new Tree that is 3 feet tallTree is 3 feet talloverloaded method: Tree is 3 feet tallCreating new Tree that is 4 feet tallTree is 4 feet talloverloaded method: Tree is 4 feet tallPlanting a seedlingһ�� Tree ����ȿ�����һ�����磬ʹ���޲ι�����������Ҳ������һ�����������ѳ���������Ѿ���һ���߶ȣ���ʱ�򣬾���Ҫʹ���вι�������������Ҳ�����Զ��ַ�ʽ���� info() ���������磬��������ӡ�������Ϣ���Ϳ���ʹ�� info(String) ������������޻���˵���Ϳ���ʹ�� info() ����������������������ȫ��ͬ�ĸ����������֣���ʹ�÷������أ���Ϳ���ʹ��һ������������һ������������ط��������������������ͬ��Java ����ô֪������õ����ĸ��أ���һ���򵥵Ĺ���ÿ�������صķ��������ж�һ�޶��Ĳ����б�������΢˼���£��ͻ�������ˣ�����ͨ�������б��Ĳ�ͬ������������ͬ�����ķ���������Ҳûʲô��ʽ�ˡ����������Ը��ݲ����б��еĲ���˳�������ֲ�ͬ�ķ��������������ɴ�������ά�������磺xxxxxxxxxx// housekeeping/OverloadingOrder.java// Overloading based on the order of the arguments public class OverloadingOrder { &nbsp; &nbsp;static void f(String s, int i) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"String: \" + s + \", int: \" + i); &nbsp; } &nbsp; &nbsp;static void f(int i, String s) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"int: \" + i + \", String: \" + s); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;f(\"String first\", 1); &nbsp; &nbsp; &nbsp; &nbsp;f(99, \"Int first\"); &nbsp; }}�����xxxxxxxxxxString: String first, int: 1int: 99, String: Int first���� f() ����������ͬ�Ĳ��������ǲ���˳��ͬ����������Ϳ����������ǡ���������������������Ϳ����Զ��ӽ�С������ת��Ϊ�ϴ�����͡����������ؽ��ʱ����������е�����������һ�����������ӣ�xxxxxxxxxx// housekeeping/PrimitiveOverloading.java// Promotion of primitives and overloading public class PrimitiveOverloading { &nbsp; &nbsp;void f1(char x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f1(char)\"); &nbsp; } &nbsp; &nbsp;void f1(byte x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f1(byte)\"); &nbsp; } &nbsp; &nbsp;void f1(short x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f1(short)\"); &nbsp; } &nbsp; &nbsp;void f1(int x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f1(int)\"); &nbsp; } &nbsp; &nbsp;void f1(long x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f1(long)\"); &nbsp; } &nbsp; &nbsp;void f1(float x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f1(float)\"); &nbsp; } &nbsp; &nbsp;void f1(double x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f1(double)\"); &nbsp; } &nbsp; &nbsp;void f2(byte x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f2(byte)\"); &nbsp; } &nbsp; &nbsp;void f2(short x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f2(short)\"); &nbsp; } &nbsp; &nbsp;void f2(int x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f2(int)\"); &nbsp; } &nbsp; &nbsp;void f2(long x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f2(long)\"); &nbsp; } &nbsp; &nbsp;void f2(float x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f2(float)\"); &nbsp; } &nbsp; &nbsp;void f2(double x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f2(double)\"); &nbsp; } &nbsp; &nbsp;void f3(short x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f3(short)\"); &nbsp; } &nbsp; &nbsp;void f3(int x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f3(int)\"); &nbsp; } &nbsp; &nbsp;void f3(long x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f3(long)\"); &nbsp; } &nbsp; &nbsp;void f3(float x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f3(float)\"); &nbsp; } &nbsp; &nbsp;void f3(double x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f3(double)\"); &nbsp; } &nbsp; &nbsp;void f4(int x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f4(int)\"); &nbsp; } &nbsp; &nbsp;void f4(long x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f4(long)\"); &nbsp; } &nbsp; &nbsp;void f4(float x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f4(float)\"); &nbsp; } &nbsp; &nbsp;void f4(double x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f4(double)\"); &nbsp; } &nbsp; &nbsp;void f5(long x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f5(long)\"); &nbsp; } &nbsp; &nbsp;void f5(float x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f5(float)\"); &nbsp; } &nbsp; &nbsp;void f5(double x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f5(double)\"); &nbsp; } &nbsp; &nbsp;void f6(float x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f6(float)\"); &nbsp; } &nbsp; &nbsp;void f6(double x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f6(double)\"); &nbsp; } &nbsp; &nbsp;void f7(double x) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"f7(double)\"); &nbsp; } &nbsp; &nbsp;void testConstVal() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"5: \"); &nbsp; &nbsp; &nbsp; &nbsp;f1(5);f2(5);f3(5);f4(5);f5(5);f6(5);f7(5); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;void testChar() { &nbsp; &nbsp; &nbsp; &nbsp;char x = 'x'; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"char: \"); &nbsp; &nbsp; &nbsp; &nbsp;f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;void testByte() { &nbsp; &nbsp; &nbsp; &nbsp;byte x = 0; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"byte: \"); &nbsp; &nbsp; &nbsp; &nbsp;f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;void testShort() { &nbsp; &nbsp; &nbsp; &nbsp;short x = 0; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"short: \"); &nbsp; &nbsp; &nbsp; &nbsp;f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;void testInt() { &nbsp; &nbsp; &nbsp; &nbsp;int x = 0; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"int: \"); &nbsp; &nbsp; &nbsp; &nbsp;f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;void testLong() { &nbsp; &nbsp; &nbsp; &nbsp;long x = 0; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"long: \"); &nbsp; &nbsp; &nbsp; &nbsp;f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;void testFloat() { &nbsp; &nbsp; &nbsp; &nbsp;float x = 0; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"float: \"); &nbsp; &nbsp; &nbsp; &nbsp;f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;void testDouble() { &nbsp; &nbsp; &nbsp; &nbsp;double x = 0; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"double: \"); &nbsp; &nbsp; &nbsp; &nbsp;f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;PrimitiveOverloading p = new PrimitiveOverloading(); &nbsp; &nbsp; &nbsp; &nbsp;p.testConstVal(); &nbsp; &nbsp; &nbsp; &nbsp;p.testChar(); &nbsp; &nbsp; &nbsp; &nbsp;p.testByte(); &nbsp; &nbsp; &nbsp; &nbsp;p.testShort(); &nbsp; &nbsp; &nbsp; &nbsp;p.testInt(); &nbsp; &nbsp; &nbsp; &nbsp;p.testLong(); &nbsp; &nbsp; &nbsp; &nbsp;p.testFloat(); &nbsp; &nbsp; &nbsp; &nbsp;p.testDouble(); &nbsp; }}�����xxxxxxxxxx5: f1(int)f2(int)f3(int)f4(int)f5(long)f6(float)f7(double)char: f1(char)f2(int)f3(int)f4(int)f5(long)f6(float)f7(double)byte: f1(byte)f2(byte)f3(short)f4(int)f5(long)f6(float)f7(double)short: f1(short)f2(short)f3(short)f4(int)f5(long)f6(float)f7(double)int: f1(int)f2(int)f3(int)f4(int)f5(long)f6(float)f7(double)long: f1(long)f2(long)f3(long)f4(long)f5(long)f6(float)f7(double)float: f1(float)f2(float)f3(float)f4(float)f5(float)f6(float)f7(double)double: f1(double)f2(double)f3(double)f4(double)f5(double)f6(double)f7(double)�������Ĳ������ʹ��ڷ����������յĲ������ͣ��������������ת��������㲻���Ļ����������ͻᱨ��������ֵ��������������������&quot;Ϊʲôֻ��ͨ�������Ͳ����б�������ͨ�������ķ���ֵ���ַ�����?&quot;����������������������������ͬ�������Ͳ��������Ǻ��������֣�xxxxxxxxxxvoid f(){}int f() {return 1;}��Щ����£������������׾Ϳ��Դ�������׼ȷ�ƶϳ��õ����ĸ��������� int x = f()�����ǣ�����Ե���һ�������Һ��Է���ֵ�����������һ�������ĸ����ã���Ϊ�㲻�ں�����ֵ��ֻ�������÷�����Щ�¡����������ֱ�ӵ��� f()��Java �������Ͳ�֪����������ĸ��������Ķ���Ҳ�������ԡ���Ϊ���ԭ�������㲻�ܸ��ݷ���ֵ�����������صķ�����Ϊ��֧�������ԣ�Java 8 ��һЩ��������������˲²��׼ȷ�ȣ�����ͨ����˵���������á��޲ι�������ǰ����˵��һ���޲ι��������ǲ����ղ����Ĺ���������������һ��&quot;Ĭ�ϵĶ���&quot;������㴴��һ���࣬����û�й���������ô�������ͻ��Զ�Ϊ�㴴��һ���޲ι����������磺xxxxxxxxxx// housekeeping/DefaultConstructor.javaclass Bird {}public class DefaultConstructor { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Bird bird = new Bird(); // Ĭ�ϵ� &nbsp; }}����ʽ new Bird() ������һ���¶��󣬵������޲ι������������� Bird ���в�û����ʽ�Ķ����޲ι��������������û�й�������������δ���һ�������ء�����,һ������ʽ�ض����˹������������вλ����޲Σ����������Ͳ����Զ�Ϊ�㴴���޲ι����������£�xxxxxxxxxx// housekeeping/NoSynthesis.javaclass Bird2 { &nbsp; &nbsp;Bird2(int i) {} &nbsp; &nbsp;Bird2(double d) {}}public class NoSynthesis { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;//- Bird2 b = new Bird2(); // No default &nbsp; &nbsp; &nbsp; &nbsp;Bird2 b2 = new Bird2(1); &nbsp; &nbsp; &nbsp; &nbsp;Bird2 b3 = new Bird2(1.0); &nbsp; }}���������� new Bird2() ������������ʾ�Ҳ���ƥ��Ĺ�������������û�й�����ʱ����������˵&quot;��һ����Ҫ����������ô����Ϊ�㴴��һ����&quot;��������������й���������������˵&quot;���Ѿ�д�˹������ˣ����Կ϶�֪��������ʲô�������û�д���Ĭ�Ϲ�������˵���㱾���Ͳ���Ҫ&quot;��this �ؼ�������������ͬ���͵Ķ��� a �� b�������������ε�������������� peel() ������xxxxxxxxxx// housekeeping/BananaPeel.java class Banana { &nbsp; &nbsp;void peel(int i) { &nbsp; &nbsp; &nbsp; &nbsp;/*...*/ &nbsp; }}public class BananaPeel { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Banana a = new Banana(), b = new Banana(); &nbsp; &nbsp; &nbsp; &nbsp;a.peel(1); &nbsp; &nbsp; &nbsp; &nbsp;b.peel(2); &nbsp; }}���ֻ��һ������ peel() ����ô��ô֪�����õ��Ƕ��� a �� peel()�������Ƕ��� b �� peel() �����أ�����������һЩ�ײ㹤���������������������д���롣peel() �����е�һ���������ܵش�����һ��ָ�������������á���ˣ����������еķ�������������������xxxxxxxxxxBanana.peel(a, 1)Banana.peel(b, 1)�������ڲ�ʵ�ֵģ��㲻����ֱ����ô��д���룬������������ܣ�����˵�����׷�����ʲô�����������ڷ����ڲ��������öԵ�ǰ��������á����ǣ����������Ǳ����ܵش�������������������ڲ����б��С�������ǣ���һ���ؼ���: this ��this �ؼ���ֻ���ڷǾ�̬�����ڲ�ʹ�á��������һ������ķ���ʱ��this ������һ���������á��������Դ���������һ���Դ�������á��������һ����ķ�����������������еķ�������Ҫʹ�� this��ֱ�ӵ��ü��ɣ�this �Զ���Ӧ���������������ˡ�����������������xxxxxxxxxx// housekeeping/Apricot.java public class Apricot { &nbsp; &nbsp;void pick() { &nbsp; &nbsp; &nbsp; &nbsp;/* ... */ &nbsp; } &nbsp; &nbsp;void pit() { &nbsp; &nbsp; &nbsp; &nbsp;pick(); &nbsp; &nbsp; &nbsp; &nbsp;/* ... */ &nbsp; }}�� pit() �����У������ʹ�� this.pick()������û�б�Ҫ���������Զ�Ϊ��������Щ��this �ؼ���ֻ����һЩ������ʽʹ�õ�ǰ�������õ����ⳡ�ϡ����磬���� return ����з��ضԵ�ǰ��������á�xxxxxxxxxx// housekeeping/Leaf.java// Simple use of the \"this\" keyword public class Leaf { &nbsp; &nbsp;int i = 0; &nbsp; &nbsp;Leaf increment() { &nbsp; &nbsp; &nbsp; &nbsp;i++; &nbsp; &nbsp; &nbsp; &nbsp;return this; &nbsp; } &nbsp; &nbsp;void print() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i = \" + i); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Leaf x = new Leaf(); &nbsp; &nbsp; &nbsp; &nbsp;x.increment().increment().increment().print(); &nbsp; }}�����xxxxxxxxxxi = 3��Ϊ increment() ͨ�� this �ؼ��ַ��ص�ǰ��������ã��������ͬ�Ķ����Ͽ������׵�ִ�ж�β�����this �ؼ������������������ݵ�ǰ����ʱҲ�����ã�xxxxxxxxxx// housekeeping/PassingThis.java class Person { &nbsp; &nbsp;public void eat(Apple apple) { &nbsp; &nbsp; &nbsp; &nbsp;Apple peeled = apple.getPeeled(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Yummy\"); &nbsp; }} public class Peeler { &nbsp; &nbsp;static Apple peel(Apple apple) { &nbsp; &nbsp; &nbsp; &nbsp;// ... remove peel &nbsp; &nbsp; &nbsp; &nbsp;return apple; // Peeled &nbsp; }} public class Apple { &nbsp; &nbsp;Apple getPeeled() { &nbsp; &nbsp; &nbsp; &nbsp;return Peeler.peel(this); &nbsp; }} public class PassingThis { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;new Person().eat(new Apple()); &nbsp; }}�����xxxxxxxxxxYummyApple ��ΪĳЩԭ�򣨱���˵�������еķ����ڶ�������ظ����֣��㲻������ظ������������һ���ⲿ���߷��� Peeler.peel() ��һЩ��Ϊ������ʹ�� this ���ܽ��������ݸ��ⲿ�������ڹ������е��ù�����������һ������д�˶������������ʱ������һ���������е�����һ������������������ظ�����ͨ�� this �ؼ���ʵ�������ĵ��á�ͨ������˵ this����ζ��&quot;�������&quot;��&quot;��ǰ����&quot;�����������ɶԵ�ǰ��������á���һ���������У������ this һ�������б�ʱ��������һ����˼����ͨ����ֱ�ӵķ�ʽ��ʽ�ص���ƥ������б��Ĺ�������xxxxxxxxxx// housekeeping/Flower.java// Calling constructors with \"this\" public class Flower { &nbsp; &nbsp;int petalCount = 0; &nbsp; &nbsp;String s = \"initial value\"; &nbsp; &nbsp;Flower(int petals) { &nbsp; &nbsp; &nbsp; &nbsp;petalCount = petals; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Constructor w/ int arg only, petalCount = \" + petalCount); &nbsp; } &nbsp; &nbsp;Flower(String ss) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Constructor w/ string arg only, s = \" + ss); &nbsp; &nbsp; &nbsp; &nbsp;s = ss; &nbsp; } &nbsp; &nbsp;Flower(String s, int petals) { &nbsp; &nbsp; &nbsp; &nbsp;this(petals); &nbsp; &nbsp; &nbsp; &nbsp;//- this(s); // Can't call two! &nbsp; &nbsp; &nbsp; &nbsp;this.s = s; // Another use of \"this\" &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"String &amp; int args\"); &nbsp; } &nbsp; &nbsp;Flower() { &nbsp; &nbsp; &nbsp; &nbsp;this(\"hi\", 47); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"no-arg constructor\"); &nbsp; } &nbsp; &nbsp;void printPetalCount() { &nbsp; &nbsp; &nbsp; &nbsp;//- this(11); // Not inside constructor! &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"petalCount = \" + petalCount + \" s = \" + s); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Flower x = new Flower(); &nbsp; &nbsp; &nbsp; &nbsp;x.printPetalCount(); &nbsp; }}�����xxxxxxxxxxConstructor w/ int arg only, petalCount = 47String &amp; int argsno-arg constructorpetalCount = 47 s = hi�ӹ����� Flower(String s, int petals) ���Կ���������ֻ��ͨ�� this ����һ�ι����������⣬�������ȵ��ù�����������������ᱨ�����������ͬ��չʾ�� this ����һ���÷��������б��еı����� s �ͳ�Ա������ s ��ͬ������������������ͨ�� this.s ������ָ���ǳ�Ա���� s���Ӷ������ظ����㾭������ Java �����п��������÷���ͬʱ������Ҳ���γ�������д������ printPetalCount() �����У�����������������һ��������֮��ķ�������ù�������static �ĺ�����ס�� this �ؼ��ֵ����ݣ����� static ���εķ����и�����������⣺static �����в������ this���㲻���ھ�̬�����е��÷Ǿ�̬��������֮���ԣ�����̬������Ϊ��������ģ�����Ҫ�κζ�����ʵ�ϣ�����Ǿ�̬��������ҪĿ�ģ���̬��������������ȫ�ַ���һ�������� Java �в�����ȫ�ַ�����һ�����еľ�̬�������Ա������ľ�̬�����;�̬���Է��ʡ�һЩ����Ϊ��̬���������������ģ���Ϊ���ǵ�ȷ����ȫ�ַ��������塣ʹ�þ�̬��������Ϊ������ this��������û����һ����������Ϣ����ȷ������㷢�ִ����г����˴����� static �������͸����¿����Լ�������ˡ�Ȼ����static �ĸ����ʵ�ã�����ʱ��Ҫ�õ������������Ƿ����&quot;�������&quot;�����������ۼ�ȥ���۰ɡ���������������Ա���˽��ʼ������Ҫ�ԣ���ͨ���������������Ҫ�ԡ��Ͼ���˭��ȥ����һ�� int �أ�����ʹ����һ������Ͳ������������ǰ�ȫ�ġ�Java ���������������������ö���ռ�õ��ڴ档�����ڿ���һ������������㴴���Ķ�����ͨ�� new �������ڴ�ģ�������������ֻ֪������ͷ��� new �����Ķ�����ڴ棬��������֪����λ��ղ��� new ������ڴ档Ϊ�˴������������Java ���������ж���һ����Ϊ finalize() �ķ��������Ĺ���ԭ��&quot;�ٶ�&quot;�������ģ�������������׼�����ն�����ڴ�ʱ�����Ȼ������ finalize() ������������һ�ֵ��������ն�������ʱ���Ż��������ն���ռ�õ��ڴ档������������ʹ�� finalize() ����������������ʱ��һЩ��Ҫ������������finalize() ��һ��Ǳ�ڵı�����壬��ΪһЩ����Ա�������� C++ ����Ա����һ��ʼ��������Ϊ�� C++ �е�����������C++ �����ٶ���ʱ���������������������б�Ҫ��ȷ����һ�£��� C++ �У��������Ǳ����ٵģ���һ�� bug-free �ĳ����У������� Java �У����󲢷����Ǳ��������գ����߻��仰˵��������ܲ����������ա��������ղ���ͬ������������ζ�����㲻����Ҫĳ������֮ǰ���������ִ��ĳЩ����������Լ�ȥ����Java û�������������Ƶĸ�������������Լ�����һ����ͨ�ķ�����������������������磬�����ڴ����Ĺ����лὫ�Լ����Ƶ���Ļ�ϡ����������ȷ�ش���Ļ�Ͻ����������������Զ�ò�������������� finalize() �����м���ĳ�ֲ������ܣ���ô���������շ���ʱ��finalize() ���������ã�����֤һ���ᷢ������ͼ��ͻᱻ������Ҫ��&quot;��������&quot;û�з�����ͼ�����Իᱣ��������Ҳ����ᷢ�֣�ֻҪ����û�б����ڴ��������һ�̣�����ռ�õĿռ����Ҳ�ò����ͷš��������ִ�н�����������������һֱû���ͷ��㴴�����κζ�����ڴ棬�򵱳����˳�ʱ����Щ��Դ��ȫ������������ϵͳ�����������ǡ���ģ���Ϊ�������ձ���Ҳ�п�����Ҫ�ǲ�ʹ�������ǾͲ���֧���ⲿ�ֿ����ˡ�finalize() ����;����㲻�ܽ� finalize() ��Ϊͨ�õ�������������ô���������ʲô���أ���������Ҫ��ס�ĵ� 3 �㣺��������ֻ���ڴ��йء�Ҳ����˵��ʹ���������յ�Ψһԭ�����Ϊ�˻��ճ�����ʹ�õ��ڴ档���Զ��������������йص��κ���Ϊ��˵�������� finalize() ������������Ҳ����ͬ�ڴ漰������йء������Ƿ���ζ����������а�����������finalize() ������Ӧ����ȷ�ͷ���Щ�����أ����ǣ����۶�������δ����ģ��������������Ḻ���ͷŶ�����ռ�õ������ڴ档��ͽ��� finalize() ���������Ƶ�һ�������������ͨ��ĳ�ִ�������ʽ֮��ķ�ʽΪ��������˴洢�ռ䡣����������ܻ��룬Java ������Զ������������ô���ܷ�����������֮������ finalize() ����������Ϊ�ڷ����ڴ�ʱ���ܲ��������� C �����е����������� Java �е�ͨ�����������������Ҫ������ʹ��&quot;���ط���&quot;������£����ط�����һ���� Java ���Ե��÷� Java ���Դ������ʽ�����ڱ��ط��������ۣ���������Ӱ�� 2 ��ĸ�¼ B�������ط���Ŀǰֻ֧�� C �� C++���������ǿ��Ե�����������д�Ĵ��룬����ʵ���Ͽ��Ե����κδ��롣�ڷ� Java �����У�Ҳ������� C �� malloc() ����ϵ��������洢�ռ䣬���ҳ��ǵ��� free() ��������Ȼ�洢�ռ���Զ�ò����ͷţ�����ڴ�й¶�����ǣ�free() �� C �� C++ �еĺ�������������Ҫ�� finalize() �������ñ��ط����������������������������˲������ʹ�� finalize() �������ԣ���ȷʵ���ǽ�����ͨ�����������ĺ��ʳ�������ô����ͨ����������������ִ���أ������ʵʩ����Ҫ����һ�������û���������Ҫ������ʱ�����ִ�����������ķ�����������ȥ�൱ֱ�ӣ���ȴ�� C++ �е�&quot;��������&quot;�ĸ������еִ����� C++ �У����ж��󶼻ᱻ���٣�����˵Ӧ�ñ����١������ C++ �д�����һ���ֲ�������ջ�ϴ������� Java �в��У�����ʱ�����ٶ�����������&quot;�һ�����&quot;Ϊ�߽�ġ��˶����������ĩβ��������������� new �����ģ������� Java �У�����ô������Ա���� C++ �� delete ������ʱ��Java �в����ڣ����ͻ������Ӧ�������������������Ա���ǵ��� delete����ô��Զ����������������������ͻᵼ���ڴ�й¶���������������Ҳ����õ����������� bug ���Ѹ��٣�Ҳ���� C++ ����Աת�� Java ��һ����Ҫ���ء��෴���� Java �У�û�������ͷŶ���� delete����Ϊ������������������ͷŴ洢�ռ䡣�������Է�ǳ����Ϊ�����������������յĴ��ڣ�ʹ�� Java û������������Ȼ��������ѧϰ�����룬������������������Ĵ��ڲ�������ȫ����������������Ҿ��Բ���ֱ�ӵ��� finalize()��������Ҳ����һ�ֽ�������������ϣ�����г��ͷŴ洢�ռ�֮����������������ǵ���ȷ����ĳ��ǡ���� Java ��������͵�ͬ��ʹ�����������ˣ�ֻ��û�������㡣��ס��������&quot;��������&quot;����&quot;�ս�&quot;��������֤һ���ᷢ������� Java �������JVM����δ�����ڴ�ľ������Σ������ܲ����˷�ʱ��ִ�����������Իָ��ڴ档�ս�����ͨ��������ָ�� finalize() ������봴��������&quot;����&quot;����������ȷ�ص������ǡ����Կ�������finalize() ֻ�Դ󲿷ֳ���Ա�����õ���һЩ��ɬ�ڴ������������ˡ����ǣ�finalize() ����һ����Ȥ���÷�������������ÿ�ζ�Ҫ�� finalize() ���е��ã�����Ƕ����ս���������֤������ĳ�����󲻸���Ȥʱ����Ҳ���������������ˣ��������Ӧ�ô���ĳ��״̬������״̬����ռ�õ��ڴ���Ա���ȫ���ͷŵ������磬������������һ���򿪵��ļ����ڶ�����������֮ǰ����ԱӦ�ùر�����ļ���ֻҪ�����д���û�б��ʵ������Ĳ��֣�����ʹ��ں����޵� bug��finalize() �����������շ������������������������Ǳ����á����ĳ�� finalize() �Ķ���ʹ�� bug �����֣���ô�Ϳ��Ծݴ��ҳ��������ڡ�������������������ĵġ������Ǹ��򵥵����ӣ�ʾ���� finalize() �Ŀ���ʹ�÷�ʽ��xxxxxxxxxx// housekeeping/TerminationCondition.java// Using finalize() to detect a object that// hasn't been properly cleaned up import onjava.*; class Book { &nbsp; &nbsp;boolean checkedOut = false; &nbsp; &nbsp;Book(boolean checkOut) { &nbsp; &nbsp; &nbsp; &nbsp;checkedOut = checkOut; &nbsp; } &nbsp; &nbsp;void checkIn() { &nbsp; &nbsp; &nbsp; &nbsp;checkedOut = false; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;protected void finalize() throws Throwable { &nbsp; &nbsp; &nbsp; &nbsp;if (checkedOut) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Error: checked out\"); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;// Normally, you'll also do this: &nbsp; &nbsp; &nbsp; &nbsp;// super.finalize(); // Call the base-class version &nbsp; }} public class TerminationCondition { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Book novel = new Book(true); &nbsp; &nbsp; &nbsp; &nbsp;// Proper cleanup: &nbsp; &nbsp; &nbsp; &nbsp;novel.checkIn(); &nbsp; &nbsp; &nbsp; &nbsp;// Drop the reference, forget to clean up: &nbsp; &nbsp; &nbsp; &nbsp;new Book(true); &nbsp; &nbsp; &nbsp; &nbsp;// Force garbage collection &amp; finalization: &nbsp; &nbsp; &nbsp; &nbsp;System.gc(); &nbsp; &nbsp; &nbsp; &nbsp;new Nap(1); // One second delay &nbsp; } }�����xxxxxxxxxxError: checked out�������ս������ǣ����е� Book �����ڱ���������֮ǰ���뱻�Ǽǡ����� main() �����У���һ����û�еǼǡ�Ҫ��û�� finalize() ��������֤�ս�������������ѷ������ bug�������ע�⵽ʹ���� @Override��@ ��ζ������һ��ע�⣬ע���ǹ��ڴ���Ķ�����Ϣ���������ע����߱������ⲻ��żȻ���ض�����ÿ�������ж����ڵ� finalize() ������������Ա֪���Լ�����ʲô��������ȷ����û��ƴ��������������ȷ���Ǹ����������ڻ����С�ע��Ҳ�ǶԶ��ߵ����ѣ�@Override �� Java 5 ���룬�� Java 7 �и��ƣ�����ͨƪ����֡�ע�⣬System.gc() ����ǿ�ƽ����սᶯ�������Ǽ�ʹ����ô����ֻҪ�ظ���ִ�г��򣨼�����򽫷�������Ĵ洢�ռ�������������ն�����ִ�У�������Ҳ���ҳ������ Book ������Ӧ�����Ǽ������汾�� finalize() ҲҪ��һЩ��Ҫ�����飬ʹ�� super �������������� Book.finalize() �п����������������У�����ע�͵��ˣ���Ϊ����Ҫ�����쳣�����������ǵ����ڻ�û���漰����������������ι����������ǰ�ù������ԣ��ڶ��Ϸ������Ĵ���ʮ�ָ߰����������Ȼ����� Java �����ж��󣨻������ͳ��⣩�ڶ��Ϸ���ķ�ʽҲʮ�ָ߰���Ȼ���������������ܺ����Ե���߶���Ĵ����ٶȡ�������������֡����洢�ռ���ͷ�Ӱ���˴洢�ռ�ķ��䣬����ȷʵ��ĳЩ Java ������Ĺ�����ʽ����Ҳ��ζ�ţ�Java �Ӷѿռ������ٶȿ��Ժ�����������ջ�Ϸ���ռ���ٶ������������磬����԰� C++ ��Ķ������һ��Ժ�ӣ�����ÿ�����󶼸�������Լ��ĵ��̡�һ��ʱ��󣬶�����ܱ����٣������̱��븴�á���ĳЩ Java ������У��ѵ�ʵ�ֽ�Ȼ��ͬ��������һ�����ʹ���ÿ����һ���¶���������ǰ�ƶ�һ������ζ�Ŷ���洢�ռ�ķ����ٶ��ر�졣Java ��&quot;��ָ��&quot;ֻ�Ǽ򵥵��ƶ�����δ�����������������Ч���� C++ ��ջ�Ϸ���ռ��Ч���൱����Ȼʵ�ʹ����У��ڲ��ǹ������滹���������⿪���������ⲿ�ֿ����Ȳ��ϲ��ҿ��ÿռ俪�����������ʶ���ˣ�Java �еĶѲ�����ȫ���ʹ�����������Ҫ�������Ļ����Ʊػᵼ��Ƶ�����ڴ�ҳ����ȡ��������ƽ��Ƴ�Ӳ�̣���˻��Ե���Ҫӵ�б�ʵ����Ҫ������ڴ档ҳ����Ȼ�����Ӱ�����ܡ����գ��ڴ������㹻��Ķ�����ڴ���Դ���ľ������е��������������������Ľ��롣��������ʱ��һ�߻����ڴ棬һ��ʹ���еĶ���������У�����&quot;��ָ��&quot;�Ϳ��Ժ����׵��ƶ������������ʹ��Ŀ�ʼ����Ҳ�;���������ҳ���������������ͨ���������ж���ʵ����һ�ָ��ٵġ������޿ռ�ɷ���Ķ�ģ�͡�Ҫ������ Java �е��������գ����˽�����ϵͳ�е��������ջ��ƽ�����а�����һ�ּ򵥵��ٶȺ������������ջ��ƽ������ü�����ÿ�������к���һ�����ü�������ÿ��������ָ��ö���ʱ�����ü����� 1���������뿪���������Ϊ null ʱ�����ü����� 1����ˣ��������ü�����һ�������������ڳ����������������Ƶ�������ĸ������������������������ȫ��������б���������ĳ����������ü���Ϊ 0 ʱ�����ͷ���ռ�õĿռ䣨���ǣ����ü���ģʽ�������ڼ���Ϊ 0 ʱ�����ͷŶ��󣩡�������ƴ���һ��ȱ�㣺�������֮�����ѭ�����ã���ô���ǵ����ü�������Ϊ 0���ͻ����Ӧ�ñ����յ��޷������յ���������������������ԣ���λ������ѭ����������Ĺ������������ü���������˵���������յĹ�����ʽ�����ƺ���δ��Ӧ�����κ�һ�� Java �����ʵ���С��ڸ���Ĳ����У��������������ǻ������ü������������ݵ��ǣ���������&quot;��&quot;�Ķ���һ��������׷�ݵ�������ջ��̬�洢���е����á���������������ܻᴩ�����������Σ��ɴˣ������ջ��̬�洢���������������е����ã��㽫�ᷢ������&quot;��&quot;�Ķ��󡣶��ڷ��ֵ�ÿ�����ã�����׷���������õĶ���Ȼ���Ǹö���������������ã���˷������У�ֱ��������&quot;��Դ��ջ��̬�洢��������&quot;���γɵ��������硣�������ʹ��Ķ���һ����&quot;��&quot;�ġ�ע�⣬�����˶����ѭ�����õ����⣬��Щ���󲻻ᱻ���֣����Ҳ�ͱ��Զ������ˡ������ַ�ʽ�£�Java �����������һ������Ӧ���������ռ�����������δ����ҵ��Ĵ�����ȡ���ڲ�ͬ�� Java �����ʵ�֡�������һ����������ֹͣ-���ƣ�stop-and-copy��������˼�壬����Ҫ����ͣ��������У������ں�̨����ģʽ����Ȼ�����д��Ķ���ӵ�ǰ�Ѹ��Ƶ���һ���ѣ�û�и��Ƶľ�����Ҫ���������յġ����⣬�����󱻸��Ƶ��¶�ʱ��������һ������һ���������У�Ȼ��Ϳ��԰���ǰ�������������򵥡�ֱ�ӵط����¿ռ��ˡ��������һ�����Ƶ���һ��������ָ���������ö�����������λ��ջ��̬�洢�������ÿ���ֱ�ӱ������������ܻ�������ָ����Щ��������ã������ڱ����Ĺ����в��ܱ��ҵ������������һ�����񣬽��ɵ�ַӳ�䵽�µ�ַ����������ν��&quot;���ƻ�����&quot;Ч�ʵ�����Ҫ��Ϊ����ԭ����һ�����������ѣ�Ȼ��������������Ķ�֮���������ڣ���ά����ʵ����Ҫ��һ���Ŀռ䡣ĳЩ Java ������Դ�����Ĵ�����ʽ�ǣ�����Ӷ��з��伸��ϴ���ڴ棬���ƶ�����������Щ����ڴ�֮�䡣������ڸ��Ʊ�����һ����������ȶ�״̬֮�󣬿���ֻ�������������������û��������������ˣ����ƻ�������Ȼ�Ὣ�����ڴ��һ�����Ƶ���һ��������˷ѡ�Ϊ�˱�������״����һЩ Java ���������м�飺Ҫ��û���������������ͻ�ת������һ��ģʽ����&quot;����Ӧ&quot;��������ģʽ��Ϊ���-��ɨ��mark-and-sweep����Sun ��˾���ڰ汾�� Java �����һֱʹ�����ּ�������һ����;���ԣ�&quot;���-��ɨ&quot;��ʽ�ٶ��൱�������ǵ���֪������ֻ���������������������������ʱ�������ٶȾͺܿ��ˡ�&quot;���-��ɨ&quot;�����ݵ�˼·��Ȼ�Ǵ�ջ�;�̬�洢���������������е����ã��ҳ����д��Ķ��󡣵��ǣ�ÿ���ҵ�һ�������󣬾͸�������һ����ǣ�������������ֻ�е���ǹ�����ɺ����������ſ�ʼ�������������У�û�б�ǵĶ��󽫱��ͷţ����ᷢ���κθ��ƶ�����&quot;���-��ɨ&quot;��ʣ�µĶѿռ��ǲ������ģ�����������Ҫ��ϣ���õ������ռ�Ļ�������Ҫ��������ʣ�µĶ���&quot;ֹͣ-����&quot;ָ���������������ն��������ں�̨���еģ��෴���������ն���������ͬʱ�����򽫻���ͣ���� Oracle ��˾���ĵ��лᷢ�֣�����ο����׽�����������Ϊ�����ȼ��ĺ�̨���̣��������ڰ汾�� Java �������������ôʵ�������������ġ��������ڴ�ϵ�ʱ����������������ͣ����ͬ����&quot;���-��ɨ&quot;����Ҳ�����ڳ�����ͣ������²��ܽ��С���ǰ���������������۵� Java ������У��ڴ�����Խϴ��&quot;��&quot;Ϊ��λ���������ϴ�����ռ�õ����Ŀ顣�ϸ���˵��&quot;ֹͣ-����&quot;Ҫ�����ͷžɶ���֮ǰ�������Ƚ����д�����ӾɶѸ��Ƶ��¶ѣ��⵼���˴������ڴ渴����Ϊ�����˿飬�����������Ϳ��԰Ѷ����Ƶ������Ŀ顣ÿ���鶼�����������¼�Լ��Ƿ��ͨ�����������ĳ�������ã���������� 1����������������ϴλ��ն���֮���·���Ŀ������������Դ���������������ʱ������а����������������ᶨ�ڽ������������������������Ͷ�����Ȼ���Ḵ�ƣ�ֻ������������ӣ�������С�Ͷ������Щ���򱻸��Ʋ�������Java ���������ӣ�������ж��󶼺��ȶ����������յ�Ч�ʽ��͵Ļ������л���&quot;���-��ɨ&quot;��ʽ��ͬ����Java ����������&quot;���-��ɨ&quot;��Ч��������ѿռ���ֺܶ���Ƭ���ͻ��л���&quot;ֹͣ-����&quot;��ʽ�������&quot;����Ӧ&quot;������������Ը��������µĳƺ���&quot;����Ӧ�ġ��ִ��ġ�ֹͣ-���ơ����-��ɨ&quot;ʽ��������������Java ������������฽�Ӽ������������ٶȡ�������������������йصģ�����Ϊ&quot;��ʱ&quot;��Just-In-Time, JIT���������ļ��������ּ������԰ѳ���ȫ���򲿷ַ���ɱ��ػ����룬���Բ���Ҫ JVM �����з��룬������еø��졣����Ҫװ��ĳ���ࣨͨ���Ǵ�������ĵ�һ������ʱ�������������ҵ��� .class �ļ���Ȼ�󽫸�����ֽ���װ���ڴ档������ü�ʱ�������������д��룬����������������ȱ�㣺һ�����ּ��ض����ᴩ�����������������ڣ��ۼ�������Ҫ������ʱ�䣻���ǻ����ӿ�ִ�д���ĳ��ȣ��ֽ���Ҫ�ȼ�ʱ������չ����ı��ػ�����С�ࣩܶ����ᵼ��ҳ����ȣ��Ӷ�һ�����ͳ����ٶȡ���һ��������Ϊ������������ζ�ż�ʱ������ֻ���ڱ�Ҫ��ʱ��ű�����롣��������δ��ִ�еĴ���Ҳ����ѹ�����ᱻ JIT ���롣�°� JDK �е� Java HotSpot �����Ͳ��������Ƶ�����������ÿ��ִ��һ�ξ��Ż�һЩ������ִ�еĴ���Խ�࣬�����ٶȾ�Խ�졣��Ա��ʼ��Java ������֤���б�����ʹ��ǰ���ܵõ�ǡ���ĳ�ʼ�������ڷ����ľֲ����������ֱ�֤���Ա���ʱ����ķ�ʽ���֣��������д�ɣ�xxxxxxxxxxvoid f() { &nbsp; &nbsp;int i; &nbsp; &nbsp;i++;}���õ�һ��������Ϣ�������� i ������δ��ʼ��������������Ϊ i ��һ��Ĭ��ֵ������δ��ʼ���ľֲ��������п����ǳ���Ա����������Բ���Ĭ��ֵ�������ڸ�����ʧ��ǿ�Ƴ���Ա�ṩһ����ʼֵ�������ܰ����ҳ�������� bug��Ҫ����ĳ�Ա�����ǻ������ͣ�����ͻ�����Щ��ͬ��������&quot;����Զ���&quot;һ�����������ģ����ÿ�������������ݳ�Ա��֤������һ����ʼֵ������ĳ��������֤�������������ʾ���ǵ�ֵ��xxxxxxxxxx// housekeeping/InitialValues.java// Shows default initial values public class InitialValues { &nbsp; &nbsp;boolean t; &nbsp; &nbsp;char c; &nbsp; &nbsp;byte b; &nbsp; &nbsp;short s; &nbsp; &nbsp;int i; &nbsp; &nbsp;long l; &nbsp; &nbsp;float f; &nbsp; &nbsp;double d; &nbsp; &nbsp;InitialValues reference; &nbsp; &nbsp;void printInitialValues() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Data type Initial value\"); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"boolean \" + t); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"char[\" + c + \"]\"); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"byte \" + b); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"short \" + s); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"int \" + i); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"long \" + l); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"float \" + f); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"double \" + d); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"reference \" + reference); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;new InitialValues().printInitialValues(); &nbsp; }}�����xxxxxxxxxxData type Initial valueboolean falsechar[NUL]byte 0short 0int 0long 0float 0.0double 0.0reference null�ɼ��������ݳ�Ա�ĳ�ֵû�и�����������ȷʵ�г�ֵ��char ֵΪ 0��������ʾΪ�հף��������������ٲ������&quot;δ��ʼ������&quot;�ķ����ˡ������ﶨ��һ����������ʱ������������ʼ������ô���þͻᱻ��ֵΪ null��ָ����ʼ����ô��һ����������ֵ�أ�һ�ֺ�ֱ�ӵķ������ڶ������Ա�����ĵط�Ϊ�丳ֵ�����´����޸��� InitialValues ���Ա�����Ķ��壬ֱ���ṩ�˳�ֵ��xxxxxxxxxx// housekeeping/InitialValues2.java// Providing explicit initial values public class InitialValues2 { &nbsp; &nbsp;boolean bool = true; &nbsp; &nbsp;char ch = 'x'; &nbsp; &nbsp;byte b = 47; &nbsp; &nbsp;short s = 0xff; &nbsp; &nbsp;int i = 999; &nbsp; &nbsp;long lng = 1; &nbsp; &nbsp;float f = 3.14f; &nbsp; &nbsp;double d = 3.14159;}��Ҳ������ͬ���ķ�ʽ��ʼ���ǻ������͵Ķ������ Depth ��һ���࣬��ô������������������һ�����󲢳�ʼ������xxxxxxxxxx// housekeeping/Measurement.java class Depth {} public class Measurement { &nbsp; &nbsp;Depth d = new Depth(); &nbsp; &nbsp;// ...}���û��Ϊ d �����ֵ�ͳ���ʹ�������ͻ��������ʱ���󣬸����������һ���쳣����ϸ��&quot;�쳣&quot;�½ڣ�����Ҳ����ͨ������ĳ���������ṩ��ֵ��xxxxxxxxxx// housekeeping/MethodInit.java public class MethodInit { &nbsp; &nbsp;int i = f(); &nbsp; &nbsp;int f() { &nbsp; &nbsp; &nbsp; &nbsp;return 11; &nbsp; } }����������Դ��в���������Щ����������δ��ʼ�������Ա��������ˣ�������ôд��xxxxxxxxxx// housekeeping/MethodInit2.java public class MethodInit2 { &nbsp; &nbsp;int i = f(); &nbsp; &nbsp;int j = g(i); &nbsp; &nbsp;int f() { &nbsp; &nbsp; &nbsp; &nbsp;return 11; &nbsp; } &nbsp; &nbsp;int g(int n) { &nbsp; &nbsp; &nbsp; &nbsp;return n * 10; &nbsp; }}�����㲻����ôд��xxxxxxxxxx// housekeeping/MethodInit3.java public class MethodInit3 { &nbsp; &nbsp;//- int j = g(i); // Illegal forward reference &nbsp; &nbsp;int i = f(); &nbsp; &nbsp;int f() { &nbsp; &nbsp; &nbsp; &nbsp;return 11; &nbsp; } &nbsp; &nbsp;int g(int n) { &nbsp; &nbsp; &nbsp; &nbsp;return n * 10; &nbsp; }}��Ȼ�������������ȷ��ȡ���ڳ�ʼ����˳�򣬶�������뷽ʽ�޹ء����ԣ�������ǡ���ض�&quot;��ǰ����&quot;�����˾��档���ֳ�ʼ����ʽ��ֱ�ۣ����и����ƣ��� InitialValues ��ÿ����������ͬ�ĳ�ֵ����ʱ���ȷ��������Ҫ�ģ�����ʱȴ��Ҫ���������ԡ���������ʼ�������ù��������г�ʼ�������ַ�ʽ��������������ԣ���Ϊ�����������ʱ���÷������г�ʼ�������ǣ����޷���ֹ�Զ���ʼ���Ľ��У������ڹ�����������֮ǰ��������ˣ����ʹ�����´��룺xxxxxxxxxx// housekeeping/Counter.java public class Counter { &nbsp; &nbsp;int i; &nbsp; &nbsp;Counter() { &nbsp; &nbsp; &nbsp; &nbsp;i = 7; &nbsp; } &nbsp; &nbsp;// ...}i ���Ȼᱻ��ʼ��Ϊ 0��Ȼ���Ϊ 7���������еĻ������ͺ����ã������ڶ���ʱ����ȷָ����ֵ�ı���������������ǳ����ġ���ˣ�����������ǿ����һ��Ҫ�ڹ�������ĳ���ط�����ʹ������֮ǰ��ʼ��Ԫ�ء�����ʼ�����ѵõ��˱�֤��,��ʼ����˳�������б��������˳����������ǳ�ʼ����˳�򡣼�ʹ��������ɢ���ڷ�������֮�䣬�����Ի����κη�����������������������֮ǰ�õ���ʼ�������磺xxxxxxxxxx// housekeeping/OrderOfInitialization.java// Demonstrates initialization order// When the constructor is called to create a// Window object, you'll see a message: class Window { &nbsp; &nbsp;Window(int marker) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Window(\" + marker + \")\"); &nbsp; }} class House { &nbsp; &nbsp;Window w1 = new Window(1); // Before constructor &nbsp; &nbsp;House() { &nbsp; &nbsp; &nbsp; &nbsp;// Show that we're in the constructor: &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"House()\"); &nbsp; &nbsp; &nbsp; &nbsp;w3 = new Window(33); // Reinitialize w3 &nbsp; } &nbsp; &nbsp;Window w2 = new Window(2); // After constructor &nbsp; &nbsp;void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"f()\"); &nbsp; } &nbsp; &nbsp;Window w3 = new Window(3); // At end} public class OrderOfInitialization { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;House h = new House(); &nbsp; &nbsp; &nbsp; &nbsp;h.f(); // Shows that construction is done &nbsp; }}�����xxxxxxxxxxWindow(1)Window(2)Window(3)House()Window(33)f()�� House ���У�����Ѽ��� Window ����Ķ���ɢ���ڸ�������֤������ȫ�����ڵ��ù���������������֮ǰ�õ���ʼ�������⣬w3 �ڹ������б��ٴθ�ֵ��������ɼ������� w3 ����ʼ�������Σ�һ���ڵ��ù�����ǰ��һ���ڹ����������ڼ䣨��һ�����õĶ��󽫱�����������Ϊ�������գ�����էһ�����ܾ���Ч�ʲ��ߣ�����֤����ȷ�ĳ�ʼ�������룬���������һ�����ع�������������û�г�ʼ�� w3��ͬʱ�ڶ��� w3 ʱû�и����ֵ���ǻ���������ĺ���أ���̬���ݵĳ�ʼ�����۴������ٸ����󣬾�̬���ݶ�ֻռ��һ�ݴ洢����static �ؼ��ֲ���Ӧ���ھֲ�����������ֻ�����������ԣ��ֶΡ��򣩡����һ���ֶ��Ǿ�̬�Ļ������ͣ���û�г�ʼ��������ô���ͻ��û������͵ı�׼��ֵ��������Ƕ������ã���ô����Ĭ�ϳ�ֵ���� null������ڶ���ʱ���г�ʼ������ô��̬�����������͸��Ǿ�̬����һ��������������ʾ�˾�̬�洢���Ǻ�ʱ��ʼ���ģ�xxxxxxxxxx// housekeeping/StaticInitialization.java// Specifying initial values in a class definition class Bowl { &nbsp; &nbsp;Bowl(int marker) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Bowl(\" + marker + \")\"); &nbsp; } &nbsp; &nbsp;void f1(int marker) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"f1(\" + marker + \")\"); &nbsp; }} class Table { &nbsp; &nbsp;static Bowl bowl1 = new Bowl(1); &nbsp; &nbsp;Table() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Table()\"); &nbsp; &nbsp; &nbsp; &nbsp;bowl2.f1(1); &nbsp; } &nbsp; &nbsp;void f2(int marker) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"f2(\" + marker + \")\"); &nbsp; } &nbsp; &nbsp;static Bowl bowl2 = new Bowl(2);} class Cupboard { &nbsp; &nbsp;Bowl bowl3 = new Bowl(3); &nbsp; &nbsp;static Bowl bowl4 = new Bowl(4); &nbsp; &nbsp;Cupboard() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Cupboard()\"); &nbsp; &nbsp; &nbsp; &nbsp;bowl4.f1(2); &nbsp; } &nbsp; &nbsp;void f3(int marker) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"f3(\" + marker + \")\"); &nbsp; } &nbsp; &nbsp;static Bowl bowl5 = new Bowl(5);} public class StaticInitialization { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"main creating new Cupboard()\"); &nbsp; &nbsp; &nbsp; &nbsp;new Cupboard(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"main creating new Cupboard()\"); &nbsp; &nbsp; &nbsp; &nbsp;new Cupboard(); &nbsp; &nbsp; &nbsp; &nbsp;table.f2(1); &nbsp; &nbsp; &nbsp; &nbsp;cupboard.f3(1); &nbsp; } &nbsp; &nbsp;static Table table = new Table(); &nbsp; &nbsp;static Cupboard cupboard = new Cupboard();}�����xxxxxxxxxxBowl(1)Bowl(2)Table()f1(1)Bowl(4)Bowl(5)Bowl(3)Cupboard()f1(2)main creating new Cupboard()Bowl(3)Cupboard()f1(2)main creating new Cupboard()Bowl(3)Cupboard()f1(2)f2(1)f3(1)Bowl ��չʾ��Ĵ������� Table �� Cupboard �����ǵ��ඨ���а��� Bowl ���͵ľ�̬���ݳ�Ա��ע�⣬�ھ�̬���ݳ�Ա����֮ǰ��Cupboard �����ȶ�����һ�� Bowl ���͵ķǾ�̬��Ա b3��������ɼ�����̬��ʼ��ֻ���ڱ�Ҫʱ�̲Ż���С���������� Table ����Ҳ������ Table.bowl1 �� Table.bowl2����ô��̬�� Bowl ����� bowl1 �� bowl2 ��Զ���ᱻ������ֻ���ڵ�һ�� Table ���󱻴������򱻷��ʣ�ʱ�����ǲŻᱻ��ʼ�����˺󣬾�̬���󲻻��ٴα���ʼ������ʼ����˳�����Ǿ�̬�����������֮ǰû�б���ʼ���Ļ�����Ȼ���ǷǾ�̬���󣬴�����п��Կ�����Ҫִ�� main() ������������� StaticInitialization �࣬���ľ�̬���� table �� cupboard ��󱻳�ʼ������ᵼ�����Ƕ�Ӧ����Ҳ�����أ����������Ƕ�������̬�� Bowl �������� Bowl ��Ҳ�ᱻ���ء���ˣ����������ĳ����У����е��඼���� main() ����֮ǰ�����ء�ʵ�����ͨ��������ˣ���Ϊ�ڵ��͵ĳ����У�������������ʾ������������������ͨ�� static ��ϵ����������һ�´�������Ĺ��̣������и���Ϊ Dog ���ࣺ��ʹû����ʽ��ʹ�� static �ؼ��֣�������ʵ����Ҳ�Ǿ�̬���������ԣ����״δ��� Dog ���͵Ķ�������״η��� Dog ��ľ�̬����������ʱ��Java ��������������·���в��ң��Զ�λ Dog.class���������� Dog.class �󣨺����ѧ�����⽫����һ�� Class ���󣩣��йؾ�̬��ʼ�������ж�������ִ�С���ˣ���̬��ʼ��ֻ�����״μ��� Class ����ʱ��ʼ��һ�Ρ����� new Dog() ��������ʱ�����Ȼ��ڶ���Ϊ Dog ��������㹻�Ĵ洢�ռ䡣����Ĵ洢�ռ����Ȼᱻ���㣬���Ὣ Dog �����е����л���������������ΪĬ��ֵ�����ֻᱻ��Ϊ 0�������ͺ��ַ���Ҳ��ͬ�������ñ���Ϊ null��ִ�����г������ֶζ��崦�ĳ�ʼ��������ִ�й��������㽫����&quot;����&quot;��һ�¿���������ܻ�ǣ�浽�ܶද�������䵱�漰�̳е�ʱ����ʽ�ľ�̬��ʼ������Խ�һ�龲̬��ʼ����������������һ�������&quot;��̬�Ӿ�&quot;����ʱ������̬�飩�С�������������xxxxxxxxxx// housekeeping/Spoon.java public class Spoon { &nbsp; &nbsp;static int i; &nbsp; &nbsp;static { &nbsp; &nbsp; &nbsp; &nbsp;i = 47; &nbsp; }}�⿴���������������ʵ������ֻ��һ�θ��� static �ؼ��ֺ���Ĵ���顣��������̬��ʼ������һ������δ����ִ��һ�Σ����״δ��������Ķ�����״η��������ľ�̬��Ա����������Ҫ��������Ķ���ʱ�����磺xxxxxxxxxx// housekeeping/ExplicitStatic.java// Explicit static initialization with \"static\" clause class Cup { &nbsp; &nbsp;Cup(int marker) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Cup(\" + marker + \")\"); &nbsp; } &nbsp; &nbsp;void f(int marker) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"f(\" + marker + \")\"); &nbsp; }} class Cups { &nbsp; &nbsp;static Cup cup1; &nbsp; &nbsp;static Cup cup2; &nbsp; &nbsp;static { &nbsp; &nbsp; &nbsp; &nbsp;cup1 = new Cup(1); &nbsp; &nbsp; &nbsp; &nbsp;cup2 = new Cup(2); &nbsp; } &nbsp; &nbsp;Cups() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Cups()\"); &nbsp; }} public class ExplicitStatic { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Inside main()\"); &nbsp; &nbsp; &nbsp; &nbsp;Cups.cup1.f(99); // [1] &nbsp; } &nbsp; &nbsp;// static Cups cups1 = new Cups(); // [2] &nbsp; &nbsp;// static Cups cups2 = new Cups(); // [2]}�����xxxxxxxxxxInside mainCup(1)Cup(2)f(99)������ͨ����Ϊ [1] ���з��ʾ�̬�� cup1 ���󣬻��ǰѱ�Ϊ [1] ����ȥ��������ȥ���б�Ϊ [2] �����д��루ȥ�� [2] ��ע�ͣ���Cups �ľ�̬��ʼ����������ִ�С����ͬʱע�� [1] �� [2] ������ô Cups �ľ�̬��ʼ���Ͳ�����С����⣬�ѱ�Ϊ [2] ����ע�Ͷ�ȥ������ֻȥ��һ������̬��ʼ��ֻ��ִ��һ�Ρ��Ǿ�̬ʵ����ʼ��Java �ṩ�˱���Ϊʵ����ʼ���������﷨��������ʼ��ÿ������ķǾ�̬���������磺xxxxxxxxxx// housekeeping/Mugs.java// Instance initialization class Mug { &nbsp; &nbsp;Mug(int marker) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Mug(\" + marker + \")\"); &nbsp; }} public class Mugs { &nbsp; &nbsp;Mug mug1; &nbsp; &nbsp;Mug mug2; &nbsp; { // [1] &nbsp; &nbsp; &nbsp; &nbsp;mug1 = new Mug(1); &nbsp; &nbsp; &nbsp; &nbsp;mug2 = new Mug(2); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"mug1 &amp; mug2 initialized\"); &nbsp; } &nbsp; &nbsp;Mugs() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Mugs()\"); &nbsp; } &nbsp; &nbsp;Mugs(int i) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Mugs(int)\"); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Inside main()\"); &nbsp; &nbsp; &nbsp; &nbsp;new Mugs(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"new Mugs() completed\"); &nbsp; &nbsp; &nbsp; &nbsp;new Mugs(1); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"new Mugs(1) completed\"); &nbsp; }}�����xxxxxxxxxxInside mainMug(1)Mug(2)mug1 &amp; mug2 initializedMugs()new Mugs() completedMug(1)Mug(2)mug1 &amp; mug2 initializedMugs(int)new Mugs(1) completed������������̬����飬ֻ�������� static �ؼ��֡������﷨����֧��&quot;�����ڲ���&quot;���μ�&quot;�ڲ���&quot;һ�£��ĳ�ʼ���Ǳ���ģ�������Ҳ����ʹ������֤ĳЩ����һ���ᷢ�����������ĸ������������á������������ʵ����ʼ���Ӿ���������������֮ǰִ�еġ������ʼ����������ͬ���͵ġ���һ����ʶ�����Ʒ�װ��һ���һ���������л���������������С�������ͨ���������±������ [] �������ʹ�õġ�Ҫ����һ���������ã�ֻ��Ҫ�����������Ϸ����ţ�xxxxxxxxxxint[] a1;������Ҳ�ɷ��ڱ�ʶ���ĺ��棬���ߵĺ�����һ���ģ�xxxxxxxxxxint a1[];���ָ�ʽ���� C �� C++ ����Ա��ϰ�ߡ�����ǰһ�ָ�ʽ�������������Ͼ�������������&quot;һ�� int ������&quot;�������в������ָ�ʽ��������������ָ������Ĵ�С�����ְ����Ǵ����й�&quot;����&quot;�������ϡ�����ӵ�е�ֻ�Ƕ������һ�����ã����Ѿ�Ϊ�����÷������㹻�Ĵ洢�ռ䣩�����ǻ�û�и���������������κοռ䡣Ϊ�˸����鴴����Ӧ�Ĵ洢�ռ䣬����д��ʼ������ʽ���������飬��ʼ���������Գ����ڴ�����κεط�������Ҳ����ʹ��һ������ĳ�ʼ������ʽ���������ڴ�������ĵط����֡���������ĳ�ʼ������һ�Ի�������������ֵ��ɡ���������£��洢�ռ�ķ��䣨�൱��ʹ�� new�� ���ɱ������������磺xxxxxxxxxxint[] a1 = {1, 2, 3, 4, 5};��ôΪʲô�ڻ�û�������ʱ����һ�����������أ�xxxxxxxxxxint[] a2;�� Java �п��Խ�һ�����鸳ֵ����һ�����飬���Կ���������xxxxxxxxxxa2 = a1;��ʵ��������ֻ�Ǹ�����һ�����ã�����������ʾ��������xxxxxxxxxx// housekeeping/ArraysOfPrimitives.java public class ArraysOfPrimitives { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;int[] a1 = {1, 2, 3, 4, 5}; &nbsp; &nbsp; &nbsp; &nbsp;int[] a2; &nbsp; &nbsp; &nbsp; &nbsp;a2 = a1; &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; a2.length; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a2[i] += 1; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; a1.length; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"a1[\" + i + \"] = \" + a1[i]); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxxa1[0] = 2;a1[1] = 3;a1[2] = 4;a1[3] = 5;a1[4] = 6;a1 ��ʼ���ˣ����� a2 û�У����a2 �ں��汻������һ�����顣���� a1 �� a2 ����ͬ����ı��������ͨ�� a2 �������޸��� a1 ��Ҳ�ܿ��������е����飨�����Ƕ������黹�ǻ����������飩����һ���̶���Ա length����������������ж��ٸ�Ԫ�أ��㲻�ܶ����޸ġ��� C �� C++ ���ƣ�Java �������Ҳ�Ǵ� 0 ��ʼ�ģ�����ʹ�õ�����±����� length - 1����������߽磬C �� C++ ��Ĭ�Ͻ��ܣ���������������ڴ棬���������ǽ�� bug �����ɴ˶��������� Java ������ʳ�������߽�ʱ���ᱨ����ʱ�����쳣�����Ӷ�����������⡣��̬���鴴������ڱ�д����ʱ����ȷ����������Ҫ���ٸ�Ԫ�أ���ô����ô���أ������ֱ��ʹ�� new �������д���Ԫ�ء����������У����ܴ������ǻ����������飬new ��Ȼ���Թ����������� new ���������Ļ����������飩��xxxxxxxxxx// housekeeping/ArrayNew.java// Creating arrays with newimport java.util.*; public class ArrayNew { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;int[] a; &nbsp; &nbsp; &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp; &nbsp; &nbsp;a = new int[rand.nextInt(20)]; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"length of a = \" + a.length); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Arrays.toString(a)); &nbsp; }}�����xxxxxxxxxxlength of a = 18[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]����Ĵ�С��ͨ�� Random.nextInt() ���ȷ���ģ���������᷵�� 0 ���������֮���һ��ֵ�� ��������ԣ�����������Ĵ���ȷʵ��������ʱ���еġ����⣬�����������������Ԫ���еĻ�����������ֵ���Զ���ʼ��Ϊ��ֵ���������ֺ��ַ��� 0�����ڲ������� false����Arrays.toString() �� java.util ��׼����еķ����������һά����Ŀɴ�ӡ�汾�������У�����Ҳ�����ڶ����ͬʱ���г�ʼ����xxxxxxxxxxint[] a = new int[rand.nextInt(20)];������ܵĻ���Ӧ�þ�����ô��������㴴����һ���ǻ������͵����飬��ô�㴴������һ���������顣�����͵İ�װ���� Integer Ϊ��������һ������ǻ������ͣ�xxxxxxxxxx// housekeeping/ArrayClassObj.java// Creating an array of nonprimitive objects import java.util.*; public class ArrayClassObj { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp; &nbsp; &nbsp;Integer[] a = new Integer[rand.nextInt(20)]; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"length of a = \" + a.length); &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; a.length; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a[i] = rand.nextInt(500); // Autoboxing &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Arrays.toString(a)); &nbsp; }}�����xxxxxxxxxxlength of a = 18[55, 193, 361, 461, 429, 368, 200, 22, 207, 288, 128, 51, 89, 309, 278, 498, 361, 20]�����ʹʹ�� new ��������֮��xxxxxxxxxxInteger[] a = new Integer[rand.nextInt(20)];��ֻ��һ���������飬ֱ��ͨ�������µ� Integer ����ͨ���Զ�װ�䣩�����Ѷ���ֵ�����ã���ʼ�����������xxxxxxxxxxa[i] = rand.nextInt(500);��������˴������󣬵���ͼʹ�������еĿ����ã��ͻ�������ʱ�����쳣��Ҳ�����û��������������б�����ʼ�����飬��������ʽ��xxxxxxxxxx// housekeeping/ArrayInit.java// Array initializationimport java.util.*; public class ArrayInit { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Integer[] a = { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1, 2, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3, // Autoboxing &nbsp; &nbsp; &nbsp; }; &nbsp; &nbsp; &nbsp; &nbsp;Integer[] b = new Integer[] { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1, 2, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3, // Autoboxing &nbsp; &nbsp; &nbsp; }; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Arrays.toString(a)); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(Arrays.toString(b)); &nbsp; }}�����xxxxxxxxxx[1, 2, 3][1, 2, 3]����������ʽ�У���ʼ���б������һ�������ǿ�ѡ�ģ���һ����ʹά�����б���ø����ף������ܵ�һ����ʽ�����ã��������������ޣ���Ϊ��ֻ���������鶨�崦���ڶ��ֺ͵�������ʽ���������κεط����������ڷ������ڲ������磬�㴴����һ�� String ���飬���䴫�ݸ���һ����� main() ���������£�xxxxxxxxxx// housekeeping/DynamicArray.java// Array initialization public class DynamicArray { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Other.main(new String[] {\"fiddle\", \"de\", \"dum\"}); &nbsp; }} class Other { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;for (String s: args) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(s + \" \"); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxxfiddle de dumOther.main() �Ĳ������ڵ��ô������ģ���������������ڷ������ô��ṩ���滻�Ĳ������ɱ�����б��������һ������ C �����еĿɱ�����б���C ͨ��������Ϊ&quot;varargs&quot;���������͵��÷����������Ӧ���ڲ�������������δ֪�ĳ��ϡ��������е��඼���̳��� Object �ࣨ���ű���Ľ�չ�����Դ��и������ʶ������������Դ���һ���� Object ����Ϊ�����ķ��������������������ã�xxxxxxxxxx// housekeeping/VarArgs.java// Using array syntax to create variable argument lists class A {} public class VarArgs { &nbsp; &nbsp;static void printArray(Object[] args) { &nbsp; &nbsp; &nbsp; &nbsp;for (Object obj: args) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(obj + \" \"); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;printArray(new Object[] {47, (float) 3.14, 11.11}); &nbsp; &nbsp; &nbsp; &nbsp;printArray(new Object[] {\"one\", \"two\", \"three\"}); &nbsp; &nbsp; &nbsp; &nbsp;printArray(new Object[] {new A(), new A(), new A()}); &nbsp; }}�����xxxxxxxxxx47 3.14 11.11one two threeA@15db9742 A@6d06d69c A@7852e922printArray() �Ĳ����� Object ���飬ʹ�� for-in �﷨�����ʹ�ӡ�����ÿһ���׼ Java �����������������ݣ������ﴴ��������Ķ��󣬴�ӡ�����������������������һ�� @ �����Լ����ʮ���������֡������Ĭ����Ϊ�����û�ж��� toString() �����Ļ�������ὲ������������Ǵ�ӡ�����Ͷ���ĵ�ַ������ܿ���������������д�� Java 5 ֮ǰ�Ĵ��룬���ǿ��Բ����ɱ�Ĳ����б����� Java 5 �У����������Ѿõ��������������˽����������� printArray() �п�����������xxxxxxxxxx// housekeeping/NewVarArgs.java// Using array syntax to create variable argument lists public class NewVarArgs { &nbsp; &nbsp;static void printArray(Object... args) { &nbsp; &nbsp; &nbsp; &nbsp;for (Object obj: args) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(obj + \" \"); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;// Can take individual elements: &nbsp; &nbsp; &nbsp; &nbsp;printArray(47, (float) 3.14, 11.11); &nbsp; &nbsp; &nbsp; &nbsp;printArray(47, 3.14F, 11.11); &nbsp; &nbsp; &nbsp; &nbsp;printArray(\"one\", \"two\", \"three\"); &nbsp; &nbsp; &nbsp; &nbsp;printArray(new A(), new A(), new A()); &nbsp; &nbsp; &nbsp; &nbsp;// Or an array: &nbsp; &nbsp; &nbsp; &nbsp;printArray((Object[]) new Integer[] {1, 2, 3, 4}); &nbsp; &nbsp; &nbsp; &nbsp;printArray(); // Empty list is OK &nbsp; }}�����xxxxxxxxxx47 3.14 11.1147 3.14 11.11one two threeA@15db9742 A@6d06d69c A@7852e9221 2 3 4���˿ɱ�����������Ҳ������ʽ�ر�д�����﷨�ˣ�����ָ������ʱ��������ʵ���ϻ�Ϊ��������顣���ȡ����Ȼ��һ�����飬�����Ϊʲô printArray() ����ʹ�� for-in ���������ԭ�򡣵��ǣ��ⲻ����ֻ�Ǵ�Ԫ���б���������Զ�ת����ע�����ĵ����ڶ��У�һ�� Integer ���飨ͨ���Զ�װ�䴴������ת��Ϊһ�� Object ���飨Ϊ���Ƴ��������ľ��棩�����Ҵ��ݸ��� printArray()����Ȼ���������ᷢ������һ�����飬����ִ��ת������ˣ��������һ��������԰����ǵ����б����ݣ���������Ѿ�����һ�����飬�÷���������ǵ����ɱ�����б������ܡ���������һ�б������ɱ�����ĸ�������Ϊ 0�������п�ѡ��β�����ʱ����һ���Ի��а�����xxxxxxxxxx// housekeeping/OptionalTrailingArguments.java public class OptionalTrailingArguments { &nbsp; &nbsp;static void f(int required, String... trailing) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"required: \" + required + \" \"); &nbsp; &nbsp; &nbsp; &nbsp;for (String s: trailing) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(s + \" \"); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;f(1, \"one\"); &nbsp; &nbsp; &nbsp; &nbsp;f(2, \"two\", \"three\"); &nbsp; &nbsp; &nbsp; &nbsp;f(0); &nbsp; }}�����xxxxxxxxxxrequired: 1 onerequired: 2 two threerequired: 0��γ���չʾ�����ʹ�ó��� Object ��֮�����͵Ŀɱ�����б���������еĿɱ�������� String ���󡣿ɱ�����б��п���ʹ���κ����͵Ĳ����������������͡���������չʾ�˿ɱ�����б���Ϊ��������Σ���������б���û���κ�Ԫ�أ���ôת��Ϊ��СΪ 0 �����飺xxxxxxxxxx// housekeeping/VarargType.java public class VarargType { &nbsp; &nbsp;static void f(Character... args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(args.getClass()); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\" length \" + args.length); &nbsp; } &nbsp; &nbsp;static void g(int... args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(args.getClass()); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\" length \" + args.length) &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;f('a'); &nbsp; &nbsp; &nbsp; &nbsp;f(); &nbsp; &nbsp; &nbsp; &nbsp;g(1); &nbsp; &nbsp; &nbsp; &nbsp;g(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"int[]: \"+ new int[0].getClass()); &nbsp; }}�����xxxxxxxxxxclass [Ljava.lang.Character; length 1class [Ljava.lang.Character; length 0class [I length 1class [I length 0int[]: class [IgetClass() �������� Object �࣬����&quot;������Ϣ&quot;һ����ȫ����ܡ��������������࣬���ڴ�ӡ����ʱ��������ʾ�������͵ı����ַ�����ǰ���� [ ��������һ�������������͵����飬I ��ʾ�������� int��Ϊ�˽���˫�ؼ�飬�������һ�д�����һ�� int ���飬��ӡ�������͡�����Ҳ��֤��ʹ�ÿɱ�����б����������Զ�װ�䣬��ʹ�õ��ǻ������͡�Ȼ�����ɱ�����б����Զ�װ����Ժ�г���������£�xxxxxxxxxx// housekeeping/AutoboxingVarargs.java public class AutoboxingVarargs { &nbsp; &nbsp;public static void f(Integer... args) { &nbsp; &nbsp; &nbsp; &nbsp;for (Integer i: args) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(i + \" \"); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;f(1, 2); &nbsp; &nbsp; &nbsp; &nbsp;f(4, 5, 6, 7, 8, 9); &nbsp; &nbsp; &nbsp; &nbsp;f(10, 11, 12); &nbsp; }}�����xxxxxxxxxx1 24 5 6 7 8 910 11 12ע����������ڵ��������б��н����ͻ����һ���Զ�װ����ƻ���ѡ��ذ� int ���͵Ĳ�������Ϊ Integer���ɱ�����б�ʹ�÷������ظ��Ӹ����ˣ�����է��֮���ƺ��㹻��ȫ��xxxxxxxxxx// housekeeping/OverloadingVarargs.java public class OverloadingVarargs { &nbsp; &nbsp;static void f(Character... args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"first\"); &nbsp; &nbsp; &nbsp; &nbsp;for (Character c: args) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\" \" + c); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;static void f(Integer... args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"second\"); &nbsp; &nbsp; &nbsp; &nbsp;for (Integer i: args) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\" \" + i); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(); &nbsp; } &nbsp; &nbsp;static void f(Long... args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"third\"); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;f('a', 'b', 'c'); &nbsp; &nbsp; &nbsp; &nbsp;f(1); &nbsp; &nbsp; &nbsp; &nbsp;f(2, 1); &nbsp; &nbsp; &nbsp; &nbsp;f(0); &nbsp; &nbsp; &nbsp; &nbsp;f(0L); &nbsp; &nbsp; &nbsp; &nbsp;//- f(); // Won's compile -- ambiguous &nbsp; }}�����xxxxxxxxxxfirst a b csecond 1second 2 1second 0third��ÿ������£�����������ʹ���Զ�װ����ƥ�����صķ�����Ȼ���������ȷƥ��ķ���������������ò��������� f()�����������޷�֪��Ӧ�õ����ĸ������ˡ���������������Ū��������������ܻ�ʹ�ͻ��˳���Ա�е����⡣����ܻ�ͨ����ĳ������������һ���ǿɱ�������������⣺xxxxxxxxxx// housekeeping/OverloadingVarargs2.java// {WillNotCompile} public class OverloadingVarargs2 { &nbsp; &nbsp;static void f(float i, Character... args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"first\"); &nbsp; } &nbsp; &nbsp;static void f(Character... args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"second\"); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;f(1, 'a'); &nbsp; &nbsp; &nbsp; &nbsp;f('a', 'b'); &nbsp; }}{WillNotCompile} ע�ͰѸ��ļ��ų����˱���� Gradle ����֮�⡣������ֶ�����������õ�����Ĵ�����Ϣ��xxxxxxxxxxOverloadingVarargs2.java:14:error:reference to f is ambiguous f('a', 'b');\\^both method f(float, Character...) in OverloadingVarargs2 and method f(Character...) in OverloadingVarargs2 match 1 error����������������������һ���ǿɱ�������Ϳ��Խ�������ˣ�xxxxxxxxxx// housekeeping/OverloadingVarargs3 public class OverloadingVarargs3 { &nbsp; &nbsp;static void f(float i, Character... args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"first\"); &nbsp; } &nbsp; &nbsp;static void f(char c, Character... args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"second\"); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;f(1, 'a'); &nbsp; &nbsp; &nbsp; &nbsp;f('a', 'b'); &nbsp; }}�����xxxxxxxxxxfirstsecond��Ӧ�����������ط�����һ���汾��ʹ�ÿɱ�����б�������ѹ����������ö������Java 5 ��������һ�����ƺ�С������ enum �ؼ��֣���ʹ����������ҪȺ�鲢ʹ��ö�����ͼ�ʱ�����Ժܷ���ش�������ǰ������Ҫ����һ��������������������Щֵ�����Ὣ��������������������ķ�Χ�ڣ����ʹ�����Ǹ��з��գ����Ҹ���ʹ�á�ö���������ڷǳ��ձ������C��C++ �������������Զ��Ѿ�ӵ�����ˡ��� Java 5 ֮ǰ��Java ����Ա�����˽�����ϸ�ڲ�������ϸ��ȥ��� enum ��Ч�������� Java Ҳ���� enum���������Ĺ��ܱ� C/C++ �е��걸�öࡣ�����Ǹ��򵥵����ӣ�xxxxxxxxxx// housekeeping/Spiciness.java public enum Spiciness { &nbsp; &nbsp;NOT, MILD, MEDIUM, HOT, FLAMING}���ﴴ����һ����Ϊ Spiciness ��ö�����ͣ����� 5 ��ֵ������ö�����͵�ʵ���ǳ�������˰����������������Ƕ��ô�д��ĸ��ʾ����������к��ж�����ʣ�ʹ���»��߷ָ�����Ҫʹ�� enum����Ҫ����һ�������͵����ã�Ȼ���丳ֵ��ĳ��ʵ����xxxxxxxxxx// housekeeping/SimpleEnumUse.java public class SimpleEnumUse { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Spiciness howHot = Spiciness.MEDIUM; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(howHot); &nbsp; }}�����xxxxxxxxxxMEDIUM���㴴�� enum ʱ�����������Զ�����һЩ���õ����ԡ����磬���ᴴ�� toString() �������Ա��㷽�����ʾĳ�� enum ʵ�������ƣ�������������е�������Կ��������������ᴴ�� ordinal() ������ʾĳ���ض� enum ����������˳��static values() �������� enum ����������˳��������Щ����ֵ���ɵ����飺xxxxxxxxxx// housekeeping/EnumOrder.java public class EnumOrder { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;for (Spiciness s: Spiciness.values()) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(s + \", ordinal \" + s.ordinal()); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxxNOT, ordinal 0MILD, ordinal 1MEDIUM, ordinal 2HOT, ordinal 3FLAMING, ordinal 4���� enum ����������һ���µ��������ͣ���������ؼ���ֻ�������� enum ����ʱ��������ĳЩ��������Ϊ������ںܴ�̶�������Խ� enum ���������κ��ࡣ��ʵ�ϣ�enum ȷʵ���࣬���Ҿ����Լ��ķ�����enum ��һ����ʵ�õ����ԣ������� switch �����ʹ�ã�xxxxxxxxxx// housekeeping/Burrito.java public class Burrito { &nbsp; &nbsp;Spiciness degree; &nbsp; &nbsp;public Burrito(Spiciness degree) { &nbsp; &nbsp; &nbsp; &nbsp;this.degree = degree; &nbsp; } &nbsp; &nbsp;public void describe() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(\"This burrito is \"); &nbsp; &nbsp; &nbsp; &nbsp;switch(degree) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case NOT: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"not spicy at all.\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case MILD: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case MEDIUM: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"a little hot.\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case HOT: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case FLAMING: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;default: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"maybe too hot\"); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Burrito plain = new Burrito(Spiciness.NOT), &nbsp; &nbsp; &nbsp; &nbsp;greenChile = new Burrito(Spiciness.MEDIUM), &nbsp; &nbsp; &nbsp; &nbsp;jalapeno = new Burrito(Spiciness.HOT); &nbsp; &nbsp; &nbsp; &nbsp;plain.describe(); &nbsp; &nbsp; &nbsp; &nbsp;greenChile.describe(); &nbsp; &nbsp; &nbsp; &nbsp;jalapeno.describe(); &nbsp; }}�����xxxxxxxxxxThis burrito is not spicy at all.This burrito is a little hot.This burrito is maybe too hot.���� switch �������޵Ŀ���ֵ������ѡ��������� enum �Ǿ��ѵ���ϡ�ע�⣬enum ������������ܹ���������ر��������Ŀ�ĵġ�ͨ��������Խ� enum ������һ�ִ����������͵ķ�ʽ��Ȼ��ʹ�����õ������͡������ǹؼ����ڣ������㲻�ù���ؿ������ǡ��� enum ������֮ǰ������뻨�Ѵ����ľ���ȥ����һ����ͬ��ö�����ͣ����ǰ�ȫ���õġ���Щ���ܶ����������ʹ�û����� enum �Ѿ��㹻�ˣ����ǻ���&quot;ö��&quot;һ���н��и������̽�֡�����С�������������ֿ��������ɵĳ�ʼ�����ƣ�Ӧ�ø������ǿ�İ�ʾ����ʼ���ڱ�������е���Ҫ��λ��C++ �ķ����� Bjarne Stroustrup ����� C++ �ڼ䣬����� C ���Ե�����Ч�ʽ��е���������з��֣�����ĳ�ʼ���ᵼ�´�����̴�����Щ������ѱ����֣�ͬ����������������Ҳ����ˡ���Ϊ�������ܱ�֤������ȷ�ĳ�ʼ����������û����ȷ�Ĺ��������ã��������Ͳ������������󣩣��������������ȫ�Ŀ��ƺͰ�ȫ���� C++ �У�����������Ҫ����Ϊ�� new �����Ķ�����뱻��ȷ�����١��� Java �У��������������Զ����ͷ����ж�����ڴ棬���Ժܶ�ʱ�����Ƶ����������Ͳ�̫��Ҫ�ˣ����ǵ�Ҫ�õ���ʱ������Լ����֣����ڲ���Ҫ������������Ϊ��ʱ��Java ����������������ؼ��˱�̣�����ǿ���ڴ�����ϵİ�ȫ�ԡ�һЩ��������������������������Դ����ͼ�κ��ļ������Ȼ��������������ȷʵ����������ʱ���������� Java ��������һ��ʼ�ͺ������������ֿ���������ɶ���Ӱ����ѿ�����������ʱ������ƣ�Java �����ܷ��������˺ܶ࣬�����ٶ�������Ȼ��������ĳЩ�ض����������ϰ�������Ҫ��֤���ж��󱻴�����ʵ���Ϲ��������������۵ø��Ӹ��ӡ��ر��ǵ�ͨ��������̳����������ʱ�����ֱ�֤��Ȼ������������ҪһЩ������﷨��֧�֡��ں�����½��У����ѧϰ��ϣ��̳��Լ��������Ӱ�칹�������� 7 �� ��װ���ʿ��ƣ���������ʵ�֣���&quot;�����ʵ�ֲ�ǡ��&quot;�йء�������������ߡ���������Щ��д�������ˡ�����֪��һ���õ���Ʒ���Ǿ���������ĥ�ű������ġ�������һ�δ�������ĳ��λ��һ��ʱ�䣬��һ����������������ܷ��ָ��õ�ʵ�ַ�ʽ�������ع���ԭ����֮һ���ع�������д�ɹ����Ĵ��룬ʹ֮���ӿɶ����׶����������ά�������ǣ����޸ĺ����ƴ����Ը���£�Ҳ���ھ޴��ѹ����ͨ�����ͻ��˳���Աϣ����Ĵ�����ĳЩ���汣�ֲ��䡣���������޸Ĵ��룬������ϣ�����뱣�ֲ��䡣�ɴ������������������е�һ���������⣺&quot;������ֱ䶯������Ͳ��������&quot;������������������������Ҫ������ʹ���߱�������������ʹ�õ��ǲ�����⣬����֪�����ʹ���������°汾������Ҫ��д���롣��һ���棬���Ŀ����߱������޸ĺ͸Ľ��������ɣ�����֤�ͻ����벻������Щ�Ķ�Ӱ�졣�����ͨ��Լ����������磬��⿪���߱���ͬ�����޸�����е�һ����ʱ�������Ƴ����еķ�������Ϊ���������ƻ��ͻ��˳���Ա�Ĵ��롣��֮�෴��������Ӹ��ӡ����г�Ա���Ե�����£���⿪�������֪����Щ���Ա��ͻ��˳���Աʹ�ã���ͬ���ᷢ������ЩֻΪʵ�������������ķ����ϣ�����Ҳ������Ƴɿɹ��ͻ��˳���Ա���õġ������⿪������ɾ���ɵ�ʵ�֣������µ�ʵ�֣�����������أ��κ���Щ��Ա�ĸĶ��������ƻ��ͻ��˳���Ա�Ĵ��롣�����⿪���߻ᱻ�����������޸��κ����Ϊ�˽����һ���⣬Java �ṩ�˷������η�����⿪����ָ����Щ���ڿͻ��˳���Ա�ǿ��õģ���Щ�ǲ����õġ����ʿ���Ȩ�޵ĵȼ�����&quot;���Ȩ��&quot;��&quot;��СȨ��&quot;�����ǣ�public��protected��������Ȩ�ޣ�û�йؼ��֣��� private��������һ�ε����ݣ�����ܻ��룬��Ϊһ���������ߣ���ᾡ���ܽ�һ�ж���Ϊ private������ͻ��˳���Ա��¶��Ը������ʹ�õķ������������ͨ�������ģ���������ʹ���������ԣ������� C����̺ͷ��ʲ����κ����Ƶ����ǵ�ֱ����Υ����Ȼ�����������ĸ���Ͷ��������ķ��ʿ�����Ȼ�����ơ�������Ȼ�������������ν�����������һ���ھ۵���ⵥԪ�С�Java ��ͨ�� package �ؼ��ּ��Կ��ƣ���������ͬ���»��ǲ�ͬ���»�Ӱ��������η������������¿�ʼ���㽫��ѧϰ��ν�����������ͬһ�����£�֮����������׷������η���ȫ�����塣���ĸ������ڰ���һ���࣬���Ǳ���֯��һ�������������ռ��¡����磬��׼ Java ��������һ�����߿⣬������֯�� java.util �����ռ��¡�java.util �к���һ���࣬���� ArrayList��ʹ�� ArrayList ��һ�ַ�ʽ������ȫ�� java.util.ArrayList��xxxxxxxxxx// hiding/FullQualification.java public class FullQualification { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;java.util.ArrayList list = new java.util.ArrayList(); &nbsp; }}���ַ�ʽʹ�ó����߳���ζ���������Ի�һ�ַ�ʽ��ʹ�� import �ؼ��֡������Ҫ����ĳ���࣬����Ҫ�� import �����������xxxxxxxxxx// hiding/SingleImport.javaimport java.util.ArrayList; public class SingleImport { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;ArrayList list = new ArrayList(); &nbsp; }}������Ϳ��Բ����޶��ʣ�ֱ��ʹ�� ArrayList �ˡ����Ƕ��� java.util ���µ������࣬�㻹�ǲ����á�Ҫ�����������е��ֻ࣬��ʹ�� * ��������������ʾ��������xxxxxxxxxximport java.util.*֮����ʹ�õ��룬��Ϊ���ṩһ�ֹ��������ռ�Ļ��ơ���������֮�䶼���໥����ġ��� A �еķ��� f() �������� B �о�����ͬǩ���ķ��� f() ��ͻ���������������ͻ�أ������㴴����һ�� Stack �࣬���㰲װ��һ̨�Ѿ��б�����д�� Stack ��Ļ����ϣ�����ô���أ�����������Ǳ�ڳ�ͻ������������Ҫ�� Java �ж������ռ������ȫ���Ƶ�ԭ��Ϊ�˽����ͻ������Ϊÿ���ഴ��һ��Ψһ��ʶ����ϡ���ĿǰΪֹ�Ĵ󲿷�ʾ����ֻ���ڵ����ļ�����Ϊ����ʹ�õģ�������δ�ܵ������ĸ��š����ǣ���Щʾ����ʵ�Ѿ�λ�ڰ����ˣ�����&quot;δ����&quot;����Ĭ�ϰ����⵱Ȼ��һ��ѡ��Ϊ�˼�������������ಿ�ֻᾡ���ܲ������ַ�ʽ�����ǣ���������Ϊ��ͬ�����ϵ����� Java ���򴴽��Ѻõ��������ʱ���ͱ�����ϸ�����Է�������ͻ��һ�� Java Դ�����ļ���Ϊһ�����뵥Ԫ����ʱҲ�����뵥Ԫ����ÿ�����뵥Ԫ���ļ�����׺������ .java���ڱ��뵥Ԫ�п�����һ�� public �࣬���������������ļ�����ͬ��������Сд������������׺�� .java����ÿ�����뵥Ԫ��ֻ����һ�� public �࣬��������������ܡ����������뵥Ԫ�л��������࣬��ô�ڰ�֮�����޷����ʵ���Щ��ģ���Ϊ���ǲ��� public �࣬��ʱ����֧���� public �ࡣ������֯������һ�� .java �ļ�ʱ��.java �ļ���ÿ���඼����һ������ļ���ÿ��������ļ����� .java �ļ���ÿ�����������ͬ��ֻ�Ǻ�׺���� .class����ˣ��ڱ��������� .java �ļ��󣬻�õ������� .class �ļ��������ʹ�ù����������ԣ���ô�����ϰ�߱�������һ���м��ļ���ͨ����Ϊ&quot;obj&quot;�ļ�����Ȼ����ʹ����������������ִ���ļ����������������������⣩����������ͬ���ļ������һ���������ⲻ�� Java �����ķ�ʽ���� Java �У������г�����һ�� .class �ļ������ǿ��Դ��ѹ����һ�� Java �ĵ��ļ���JAR��ʹ�� jar �ĵ�����������Java ������������ҡ����غͽ�����Щ�ļ��������һ�����ļ���ÿ��Դ�ļ�ͨ��������һ�� public ������������ķ� public �࣬���ÿ���ļ�����һ���������������Щ���������һ�𣬾���Ҫʹ�ùؼ��� package�������ʹ���� package ��䣬���������ļ��г���ע��֮��ĵ�һ�д��롣������������д��xxxxxxxxxxpackage hiding;��ζ��������뵥Ԫ��һ����Ϊ hiding ����һ���֡����仰˵�������������ı��뵥Ԫ�е� public ������λ����Ϊ hiding �ı���ɡ�¡��κ�����Ҫʹ�ø����ƣ�����ָ����������������ʹ�� import �ؼ��ֵ��� hiding����ע�⣬Java ����������һ��Сд����ʹ�м�ĵ���Ҳ��ҪСд�����շ�������ͬ�����磬�����ļ����� MyClass.java������ζ���ļ���ֻ����һ�� public �࣬������������ MyClass����СдҲ���ļ�����ͬ����xxxxxxxxxx// hiding/mypackage/MyClass.javapackage hiding.mypackage public class MyClass { &nbsp; &nbsp;// ...}���ڣ����������ʹ�� MyClass �� hiding.mypackage �е����� public �࣬�ͱ���ʹ�ùؼ��� import ��ʹ hiding.mypackage �е����ƿ��á�����һ��ѡ����ʹ�����������ƣ�xxxxxxxxxx// hiding/QualifiedMyClass.java public class QualifiedMyClass { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;hiding.mypackage.MyClass m = new hiding.mypackage.MyClass(); &nbsp; }}�ؼ��� import ʹ֮����ࣺxxxxxxxxxx// hiding/ImportedMyClass.javaimport hiding.mypackage.*; public class ImportedMyClass { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;MyClass m = new MyClass(); &nbsp; }}package �� import �������ؼ��ֽ���һ��ȫ�������ռ�ָ������Ӷ��������Ƴ�ͻ��������һ�޶��İ��������ע�⵽��һ������δ����������ɵ�һ���ļ����������ɺܶ� .class �ļ����ɣ��������ͱ���е㸴���ˡ�Ϊ�˱������������һ�ֺϺ��߼��������ǽ��ض����µ����� .class �ļ�������һ��Ŀ¼�¡�Ҳ����˵�����ò���ϵͳ���ļ��ṹ�Ĳ���ԡ����� Java ������������һ�ַ�ʽ���Ժ��㻹�������ǽ��� jar ����ʱ������һ�ַ�ʽ�������е��ļ�����һ����Ŀ¼��������������������⣺������һ�޶��İ����Ͳ��ҿ���������Ŀ¼�ṹĳ�����ࡣ����ͨ���� .class �ļ����ڵ�·��λ�ñ���� package ������ʵ�ֵġ����չ�����package ��������Ĵ����ߵķ�˳��� Internet �������������ѭ��������Ϊ Internet �����Ƕ�һ�޶��ģ�������� package ����ҲӦ���Ƕ�һ�޶��ģ����ᷢ�����Ƴ�ͻ�������û���Լ�����������͵ù���һ�鲻������������ظ�����ϣ������������������������һ�޶��� package ���ơ��������㷢�� Java ������룬��ô��Щ����ȥ��ȡһ��������ֵ�õġ��˼��ɵĵڶ������ǰ� package ���Ʒֽ��������ϵ�һ��Ŀ¼�����Ե� Java ����������Ҫ����һ�� .class �ļ�ʱ�����ܶ�λ�� .class �ļ����ڵ�λ�á����ȣ����ҳ��������� CLASSPATH��ͨ������ϵͳ���ã���ʱҲ��ͨ�� Java �İ�װ�������� Java �Ĺ������ã���CLASSPATH ����һ������Ŀ¼���������� .class �ļ��ĸ�Ŀ¼���Ӹ�Ŀ¼��ʼ��Java ��������ȡ��������ÿ������滻�ɷ�б�ܣ�����һ�����ڸ�Ŀ¼��·���������� foo.bar.baz ��� foo\\bar\\baz �� foo/bar/baz ��������ȡ������Ĳ���ϵͳ����Ȼ�����·���� CLASSPATH �Ĳ�ͬ�����ӣ�������������ЩĿ¼�в�����������������������ص� .class �ļ����������������ĳЩ�漰 Java ����������λ�õı�׼Ŀ¼����Ϊ��������㣬����˵�ҵ����� MindviewInc.com����֮��ת��ȫ����ΪСд����� com.mindviewinc���⽫��Ϊ�Ҵ�������Ķ�һ�޶���ȫ�����ơ���com��edu��org ����չ��֮ǰ�� Java ���ж��Ǵ�д������ Java 2 ֮��ͳһ��Сд�����Ҿ����ٴ���һ����Ϊ simple ����⣬�Ӷ�ϸ�����ƣ�xxxxxxxxxxpackage com.mindviewinc.simple;������������������������ļ��������ռ䱣��ɡ��xxxxxxxxxx// com/mindviewinc/simple/Vector.java// Creating a packagepackage com.mindviewinc.simple; public class Vector { &nbsp; &nbsp;public Vector() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"com.mindviewinc.simple.Vector\"); &nbsp; }}��ǰ������package ���������ļ��ĵ�һ�з�ע�ʹ��롣�ڶ����ļ�����ȥ��ࣺxxxxxxxxxx// com/mindviewinc/simple/List.java// Creating a packagepackage com.mindviewinc.simple; public class List { &nbsp; &nbsp;System.out.println(\"com.mindview.simple.List\");}�������ļ���λ���һ����ϵ���Ŀ¼�У����£�xxxxxxxxxxC:\\DOC\\Java\\com\\mindviewinc\\simple��ע�⣬�����ÿ���ļ��ĵ�һ��ע�Ͷ�ָ�����ļ���Դ����Ŀ¼���е�λ�á�����������Զ�������ȡ����ʹ�á���������ͷ�����·�����ῴ������ com.mindviewinc.simple������·���ĵ�һ�����أ�CLASSPATH ���������ᴦ�������һ����ϵĻ��������������£�xxxxxxxxxxCLASSPATH=.;D:\\JAVA\\LIB;C:\\DOC\\JavaCLASSPATH ���԰��������ͬ������·����������ʹ�� JAR �ļ�ʱ���е㲻һ�������������·��д��� JAR �ļ���ʵ�����ƣ����ܽ����� JAR �ļ����ڵ�Ŀ¼����ˣ�����һ����Ϊ grape.jar �� JAR �ļ�����·��Ӧ������xxxxxxxxxxCLASSPATH=.;D\\JAVA\\LIB;C:\\flavors\\grape.jarһ�����ú���·����������ļ��Ϳ��Է�������Ŀ¼��xxxxxxxxxx// hiding/LibTest.java// Uses the libraryimport com.mindviewinc.simple.*; public class LibTest { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Vector v = new Vector(); &nbsp; &nbsp; &nbsp; &nbsp;List l = new List(); &nbsp; }}�����xxxxxxxxxxcom.mindviewinc.simple.Vectorcom.mindviewinc.simple.List���������������� simple ��� import ���ʱ�������Ȼ��� CLASSPATH ָ����Ŀ¼�в�����Ŀ¼ com/mindviewinc/simple��Ȼ����ѱ�����ļ����ҳ���������ߣ��� Vector ������ Vector.class���� List ������ List.class����ע�⣬�������������Ҫ���ʵķ����������� public ���εġ����� Java ���ֶ��ԣ����� CLASSPATH ��һ���鷳���£������ʹ��ʱ��ô���ã�������汾�� JDK �������ܡ���ᷢ�ֵ��㰲װ�� JDK ʱ����ʹ������ CLASSPATH��Ҳ�ܹ���������л����� Java ���򡣵��ǣ�Ϊ�˱�������б���Ĵ���ʾ������https://github.com/BruceEckel/OnJava8-examples ȡ�ã�������뽫�������������Ļ���Ŀ¼���뵽 CLASSPATH �У� gradlew ������������� CLASSPATH�������������ֱ��ʹ�� javac �� java������ Gradle �Ļ�������Ҫ���� CLASSPATH������ͻ���ͨ�� * ����������������ͬ������������⣬�ᷢ��ʲô�����磬����������£�xxxxxxxxxximport com.mindviewinc.simple.*;import java.util.*;��Ϊ java.util.* Ҳ������ Vector �࣬��ʹ���Ǳ�ڵĳ�ͻ������ֻҪ�㲻д���³�ͻ�Ĵ��룬�Ͳ��������⡪�������ܺã�����͵����ܶ����ͼ�鹤������ֹ��Щ����������ֵĳ�ͻ���������Ҫ����һ�� Vector �࣬�ͻ���ֳ�ͻ��xxxxxxxxxxVector v = new Vector();����� Vector ��ָ����˭�أ���������֪��������Ҳ��֪�������Ա�����������ǿ������ȷָ�������ڱ�׼�� Java �� Vector���������ôд��xxxxxxxxxxjava.util.Vector v = new java.util.Vector();����д����ȫָ���� Vector ���λ�ã���� CLASSPATH������ô��û�б�Ҫд import java.util.* ��䣬����ʹ���������� java.util �е��ࡣ���ߣ����Ե��뵥�����Է���ͻ����ֻҪ����ͬһ��������ʹ���г�ͻ�����֣���ʹ�����г�ͻ�����֣�������ȷָ��ȫ���������ƹ��߿��߱�������֪ʶ�����ھͿ��Դ����Լ��Ĺ��߿��������ظ��ĳ�������ˡ�һ����˵���һ�ʹ�÷�ת�������������Ҫ�����Ĺ��߰������� com.mindviewinc.util����Ϊ�˼򻯣������Ұѹ��߰�����Ϊ onjava�����磬������&quot;������&quot;һ����ʹ�õ��� range() ������������ for-in �﷨���м򵥵ı�����xxxxxxxxxx// onjava/Range.java// Array creation methods that can be used without// qualifiers, using static imports:package onjava; public class Range { &nbsp; &nbsp;// Produce a sequence [0,n) &nbsp; &nbsp;public static int[] range(int n) { &nbsp; &nbsp; &nbsp; &nbsp;int[] result = new int[n]; &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; n; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result[i] = i; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;return result; &nbsp; } &nbsp; &nbsp;// Produce a sequence [start..end) &nbsp; &nbsp;public static int[] range(int start, int end) { &nbsp; &nbsp; &nbsp; &nbsp;int sz = end - start; &nbsp; &nbsp; &nbsp; &nbsp;int[] result = new int[sz]; &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; sz; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result[i] = start + i; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;return result; &nbsp; } &nbsp; &nbsp;// Produce sequence [start..end) incrementing by step &nbsp; &nbsp;public static int[] range(int start, int end, int step) { &nbsp; &nbsp; &nbsp; &nbsp;int sz = (end - start) / step; &nbsp; &nbsp; &nbsp; &nbsp;int[] result = new int[sz]; &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; sz; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result[i] = start + (i * step); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;return result; &nbsp; }}����ļ���λ��һ������ĳ����һ�� CLASSPATH λ�ÿ�ʼ��Ȼ������� onjava ��Ŀ¼�¡�������֮�󣬾Ϳ�����ϵͳ���κεط�ʹ�� import static �����ʹ����Щ�����ˡ������ڿ�ʼ�����ۺ�ʱ�㴴�������õ��¹��ߣ������԰������뵽�Լ�������С��ڱ����У��㽫�ῴ�������������뵽 onjava �⡣ʹ�� import �ı���ΪJava û�� C �������������ܣ��ù���ʹ�㲻�ظ����κγ��������ܹ��л����ز�����ͬ����Ϊ��Java ֮����ȥ���˹��ܣ���������Ϊ C �ھ�����������ʹ�øù��ܽ����ƽ̨���⣺�������Ĳ�ͬ����Ҫ���ݲ�ͬ��ƽ̨�����롣�� Java �������ǿ�ƽ̨��Ƶģ�������ܾ�û�б�Ҫ�ˡ����ǣ��������뻹����������;��������һ���ܳ�������;�����Թ����ڿ����������ǿ����ģ��ڷ����Ĳ�Ʒ���ǽ��õġ�����ͨ���ı䵼��� package ��ʵ����һĿ�ģ��޸ĵķ����ǽ������еĴ���ӵ��԰��Ϊ�����档��������������κ�������������롣ʹ�ð����Ҹ�������һ����ʱ��������������Ŀ¼�ṹ�����������λ�ڰ���ָ����Ŀ¼�У���Ŀ¼�������� CLASSPATH ��ʼ��Ŀ¼�п��Բ�ѯ���� ���ʹ�ùؼ��� package ���ܻ��е㲻˳����Ϊ��������&quot;������ӦĿ¼·��&quot;�Ĺ��򣬷�����յ��ܶ����������ʱ������Ϣ���Ҳ����ض����࣬��ʹ������λ��ͬһĿ¼�С�������յ�������Ϣ�����԰� package ���ע�͵���������������еĻ������֪����������������ˡ�ע�⣬������Ĵ���ͨ��λ����Դ����Ĳ�ͬĿ¼�С����Ǻܶ๤�̵ı�׼�����Ҽ��ɿ���������IDE��ͨ�����Զ�Ϊ��������Щ�����뱣֤ JVM ͨ�� CLASSPATH ���ҵ������Ĵ��롣����Ȩ�����η�Java ����Ȩ�����η� public��protected �� private λ�ڶ�����������������ͷ�����֮ǰ��ÿ������Ȩ�����η�ֻ�ܿ����������εĶ���������ṩ�������η�������ζ��&quot;������Ȩ��&quot;������������Σ����ﶼ��ĳ����ʽ�ķ��ʿ���Ȩ���������ļ����У��㽫ѧϰ�������͵ķ���Ȩ�ޡ�������Ȩ������֮ǰ������ʾ��Ҫôʹ�� public �������η���Ҫô��ûʹ�����η���Ĭ�Ϸ��ʣ���Ĭ�Ϸ���Ȩ��û�йؼ��֣�ͨ������Ϊ������Ȩ�ޣ���ʱҲ��Ϊ friendly��������ζ�ŵ�ǰ���е����������඼���Է����Ǹ���Ա�����������֮����࣬�����Ա����ȥ�� private �ġ�����һ�����뵥Ԫ����һ���ļ���ֻ��������һ����������ͨ��������Ȩ�ޣ�λ��ͬһ���뵥Ԫ�е�������˴�֮�䶼�ǿɷ��ʵġ�������Ȩ�޿��԰������۵�һ�����£��Ա����������׵��໥���ʡ������������ǵİ�����Ȩ�޵ĳ�Ա�������໥���ʵ�Ȩ�ޣ�������&quot;ӵ�С��˰��ڵĳ�����롣ֻ����ӵ�еĴ�����ܷ�����ӵ�е�����������������ġ�������Ϊ�������һ�������ṩ�����ɡ������������У����ļ�����֯����ķ�ʽ������ģ������� Java ���㱻ǿ����һ�ֺ����ķ�ʽ��֯���ǡ����⣬����԰Ѳ��ܷ��ʵ�ǰ���������������ų����⡣���������Щ������Ȩ�����Լ��ĳ�Ա���������еĴ��벻��һ������˵&quot;�ˣ����� Bob �����ѣ�&quot;��Ȼ���뿴�� Bob �� protected��������Ȩ�޺� private ��Ա��ȡ�öԳ�Ա�ķ���Ȩ��Ψһ��ʽ�ǣ�ʹ��Ա��Ϊ public����ô������˭���������ģ������Է������������ԱĬ�ϰ�����Ȩ�ޣ����ü��κη������η���Ȼ�������������ͬ�İ��ڡ�������������Ϳ��Է��ʸó�Ա����&quot;����&quot;��һ���㽫�������̳е���ȿ��Է��� public ��Ա��Ҳ���Է��� protected ��Ա�������ܷ��� private ��Ա����ֻ�е������ദ��ͬһ�����ڣ����ſ��Է��ʰ�����Ȩ�޵ĳ�Ա�������ڲ��õ��ļ̳к� protected���ṩ��������accessor�����޸�����mutator����������ʱҲ��Ϊ&quot;get/set&quot; ���������Ӷ���ȡ�͸ı�ֵ��public: �ӿڷ���Ȩ������ʹ�ùؼ��� public������ζ�Ž��� public �������ĳ�Ա����ÿ���˶��ǿ��õģ�������ʹ�����Ŀͻ��˳���Ա������ˡ����趨����һ������������뵥Ԫ�� dessert ����xxxxxxxxxx// hiding/dessert/Cookie.java// Creates a librarypackage hiding.dessert; public class Cookie { &nbsp; &nbsp;public Cookie() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Cookie constructor\"); &nbsp; } &nbsp; &nbsp;void bite() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"bite\"); &nbsp; }}��ס��Cookie.java �ļ����������ļ�����λ����Ϊ dessert ����Ŀ¼�У�����Ŀ¼�� hiding �����������&quot;��װ&quot;�½ڣ��£��������� CLASSPATH �ļ���Ŀ¼֮�¡���Ҫ�������Ϊ Java ���ǻὫ��ǰĿ¼����������Ϊ�����֮һ�������� CLASSPATH ��û�� .��Java �Ͳ�����ҵ�����ǰĿ¼�����ڣ�ʹ�� Cookie ����һ������xxxxxxxxxx// hiding/Dinner.java// Uses the libraryimport hiding.dessert.*; public class Dinner { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Cookie x = new Cookie(); &nbsp; &nbsp; &nbsp; &nbsp;// -x.bite(); // Can't access &nbsp; }}�����xxxxxxxxxxCookie constructor����Դ���һ�� Cookie ������Ϊ�����������඼�� public �ġ�������ῴ������ public �ĸ�����ǣ��� Dinner.java ���޷����ʵ� Cookie �����е� bite() ��������Ϊ bite() ֻ�ṩ�˰�����Ȩ�ޣ������ dessert ��֮���޷����ʣ���������ֹ��ʹ������Ĭ�ϰ�����ܾ��ȵط��֣����´��뾡�ܿ���ȥ�ƻ��˹��򣬵�����Ȼ���Ա��룺xxxxxxxxxx// hiding/Cake.java// Accesses a class in a separate compilation unitclass Cake { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Pie x = new Pie(); &nbsp; &nbsp; &nbsp; &nbsp;x.f(); &nbsp; }}�����xxxxxxxxxxPie.f()ͬһĿ¼�µĵڶ����ļ���xxxxxxxxxx// hiding/Pie.java// The other classclass Pie { &nbsp; &nbsp;void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Pie.f()\"); &nbsp; }}�������ȥ�������ļ�������أ����� Cake �п��Դ���һ�� Pie ���󲢵������� f() ��������ע�⣬��� CLASSPATH ��һ������ .�������ļ����ܱ��룩ͨ������Ϊ Pie �� f() ���а�����Ȩ�ޣ���˲��ܱ� Cake ���ʡ����ǵ�ȷ���а�����Ȩ�ޣ����ǲ�����ȷ��Cake.java ���Է�����������Ϊ��������ͬ��Ŀ¼����û�и��Լ��趨��ȷ�İ�����Java ���������ļ������������ڸ�Ŀ¼��Ĭ�ϰ��У��������Ϊ��Ŀ¼�����е������ļ����ṩ�˰�����Ȩ�ޡ�private: ���޷������ؼ��� private ��ζ�ų��˰����ó�Ա���࣬�����κ��඼�޷����������Ա��ͬһ���е��������޷����� private ��Ա����������˵���Լ������Լ�����һ���棬�������˺�������һ����Ҳ���п��ܵġ�ʹ�� private����������ɵ��޸��Ǹ������εĳ�Ա�����赣�Ļ�Ӱ��ͬһ���µ������ࡣĬ�ϵİ�����Ȩ��ͨ���ṩ���㹻�����ش�ʩ����ס��ʹ����Ŀͻ��˳���Ա�޷����ʰ�����Ȩ�޳�Ա���������ܺã���ΪĬ�Ϸ���Ȩ����һ�����ǳ��õ�Ȩ�ޣ�ͬʱҲ��һ�������������κη���Ȩ��ʱ�Զ��õ���Ȩ�ޣ�����ˣ�ͨ�����ǵ��ǰ���Щ��Ա������ public ���ͻ��˳���Աʹ�á����ԣ��������ʹ�ùؼ��� private����Ϊ����û����Ҳ�����ճ�������Ȼ����ʹ�� private �Ƿǳ���Ҫ�ģ��������ڶ��̻߳����С�����&quot;�������&quot;һ���н���������������һ��ʹ�� private �����ӣ�xxxxxxxxxx// hiding/IceCream.java// Demonstrates \"private\" keyword class Sundae { &nbsp; &nbsp;private Sundae() {} &nbsp; &nbsp;static Sundae makeASundae() { &nbsp; &nbsp; &nbsp; &nbsp;return new Sundae(); &nbsp; }} public class IceCream { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;//- Sundae x = new Sundae(); &nbsp; &nbsp; &nbsp; &nbsp;Sundae x = Sundae.makeASundae(); &nbsp; }}����չʾ�� private ������֮�أ�������δ������󣬷�ֹ����ֱ�ӷ���ĳ���ض��Ĺ���������ȫ�����������������У����޷�ͨ������������һ�� Sundae ���󣬶�������� makeASundae() �������������κο��Կ϶�ֻ�Ǹ����&quot;����&quot;����������������Ϊ private����ȷ�������ڰ��е������ط���������Ҳ��ֹ�����ȥ�ı��ɾ����������������Ϊ private ȷ������ӵ������ѡ��Ȩ���������е� private ����Ҳ��һ�������Ǳ��빫���ײ�ʵ�֣�����������ټ���������ͽ���������Ϊ private��Ȼ����������Ϊ����ĳ������������� private������Ϊ��������Ҳ�޷�ӵ�иö���� public ���ã��μ���¼�����󴫵ݺͷ��أ���protected: �̳з���Ȩ��Ҫ���� protected �ķ���Ȩ�ޣ���������������Ҫ��һ����Ծ�����ȣ��ڽ��ܱ���&quot;����&quot;�½�ǰ���㲻���������Ȿ�ڵ����ݡ���Ϊ�����ݵ������ԣ��������˼�Ҫ���ܣ����˸�ʹ�� protected �����ӡ��ؼ��� protected �������Ǽ̳еĸ��ͨ���̳п�������һ�����е��ࡪ�����ǳ�֮Ϊ���࣬Ȼ�������³�Ա���������ж������������ࡣ���ǻ����Ըı�������г�Ա����Ϊ��Ϊ�˴�һ�����м̳У���Ҫ�������� extends һ�������࣬��������xxxxxxxxxxclass Foo extends Bar {}�ඨ����������ֿ�������һ���ġ�����㴴����һ���°���������һ�����̳��࣬��ôΨһ�ܷ��ʵľ��Ǳ��̳���� public ��Ա���������ͬһ�����м̳У��Ϳ��Բ������еİ�����Ȩ�޵ĳ�Ա������ʱ������Ĵ����߻�ϣ��ĳ���ض���Ա�ܱ��̳�����ʣ������ܱ���������ʡ���ʱ����Ҫʹ�� protected��protected Ҳ�ṩ������Ȩ�ޣ�Ҳ����˵����ͬ���ڵ���������Է��� protected Ԫ�ء��ع�����ǰ���ļ� Cookie.java��������಻�ܵ��ð�����Ȩ�޵ķ��� bite()��xxxxxxxxxx// hiding/ChocolateChip.java// Can't use package-access member from another packageimport hiding.dessert.*; public class ChocolateChip extends Cookie { &nbsp; &nbsp;public ChocolateChip() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"ChocolateChip constructor\"); &nbsp; } &nbsp; &nbsp;public void chomp() { &nbsp; &nbsp; &nbsp; &nbsp;//- bite(); // Can't access bite &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;ChocolateChip x = new ChocolateChip(); &nbsp; &nbsp; &nbsp; &nbsp;x.chomp(); &nbsp; }}�����xxxxxxxxxxCookie constructorChocolateChip constructor����� Cookie �д���һ������ bite()����ô�����κ������ж����� bite() ������������Ϊ bite() ���а�����Ȩ�޲���λ����һ�����У�������������������޷�ʹ����������԰�������Ϊ public��������һ��ÿ���˶��ܷ������������Ҳ��������Ҫ�ġ�����㽫 Cookie �ĳ�����������xxxxxxxxxx// hiding/cookie2/Cookie.javapackage hiding.cookie2; public class Cookie { &nbsp; &nbsp;public Cookie() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Cookie constructor\"); &nbsp; } &nbsp; &nbsp;protected void bite() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"bite\"); &nbsp; }}������bite() �������м̳� Cookie ���࣬���ǿɷ��ʵģ�xxxxxxxxxx// hiding/ChocolateChip2.javaimport hiding.cookie2.*; public class ChocolateChip2 extends Cookie { &nbsp; &nbsp;public ChocoalteChip2() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"ChocolateChip2 constructor\"); &nbsp; } &nbsp; &nbsp;public void chomp() { &nbsp; &nbsp; &nbsp; &nbsp;bite(); // Protected method &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;ChocolateChip2 x = new ChocolateChip2(); &nbsp; &nbsp; &nbsp; &nbsp;x.chomp(); &nbsp; }}�����xxxxxxxxxxCookie constructorChocolateChip2 constructorbite���� bite() Ҳ���а�����Ȩ�ޣ��������� public �ġ�������Ȩ�� Vs Public ���������㶨��һ�����а�����Ȩ�޵���ʱ������������ж���һ�� public �����������������ᱨ����xxxxxxxxxx// hiding/packageaccess/PublicConstructor.javapackage hiding.packageaccess; class PublicConstructor { &nbsp; &nbsp;public PublicConstructor() {}}��һ�� Checkstyle ���ߣ�������������� gradlew hiding:checkstyleMain ʹ����������ָ������д������ٵģ����ҴӼ�������˵�Ǵ���ġ�ʵ�����㲻�ܴӰ�����ʵ���� public ��������xxxxxxxxxx// hiding/CreatePackageAccessObject.java// {WillNotCompile}import hiding.packageaccess.*; public class CreatePackageAcessObject { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;new PublicConstructor(); &nbsp; }}��������������࣬��õ����������Ϣ��xxxxxxxxxxCreatePackageAccessObject.java:6:error:PublicConstructor is not public in hiding.packageaccess;cannot be accessed from outside packagenew PublicConstructor();^1 error��ˣ���һ�����а�����Ȩ�޵����ж���һ�� public �Ĺ��������������ʹ�����������Ϊ public����������ʱ���Ӧ�ñ��Ϊ����ʱ�����ӿں�ʵ�����ʿ���ͨ������Ϊʵ�ֵ����ء������ݺͷ�����װ�����в��Ѿ���ʵ�����ر������Ƿ�װ����������һ��ͬʱ������������Ϊ���������͡�����������Ҫ��ԭ�򣬷��ʿ��������������ڲ������˱߽硣��һ��ԭ����ȷ���ͻ��˳���Ա����ʹ�úͲ���ʹ�õı߽硣�����ڽṹ�н����Լ����ڲ����ƶ����ص��Ŀͻ��˳���Աż�����ڲ�ʵ����Ϊ���ǿ���ʹ�õĽӿڵ�һ���֡���ֱ�������˵ڶ���ԭ�򣺽��ӿ���ʵ�ַ��롣�����һ�������ʹ�ýṹ�����ͻ��˳���Աֻ���� public �ӿڷ�����Ϣ�Ļ�����ô�Ϳ������ɵ��޸��κβ��� public ��������������Ȩ�ޣ�protected���� private ���ε������ȴ�����ƻ��ͻ��˴��롣Ϊ���������������Բ���һ�ִ�����ķ��public ��Ա������Ŀ�ͷ�������� protected ��Ա��������Ȩ�޳�Ա������� private ��Ա����ô���ĺô������ʹ���߿��Դ�ͷ�������Ȼῴ�������Ƕ�������Ҫ�Ĳ��֣�public ��Ա����Ϊ���Դ��ļ���������ǣ���ֱ�������� public ��Աʱֹͣ�Ķ�����������ڲ�ʵ���ˣ�xxxxxxxxxx// hiding/OrganizedByAccess.java public class OrganizedByAccess { &nbsp; &nbsp;public void pub1() {/* ... */} &nbsp; &nbsp;public void pub2() {/* ... */} &nbsp; &nbsp;public void pub3() {/* ... */} &nbsp; &nbsp;private void priv1() {/* ... */} &nbsp; &nbsp;private void priv2() {/* ... */} &nbsp; &nbsp;private void priv3() {/* ... */} &nbsp; &nbsp;private int i; &nbsp; &nbsp;// ...}��ô��ֻ���ǳ����Ķ�������΢����һЩ����Ϊʵ�ֺͽӿڻ��ǻ����һ��Ҳ����˵������Ȼ�ܿ���Դ���롪��ʵ�ֲ��֣���Ϊ���������С����⣬javadoc �ṩ��ע���ĵ����ܽ����˳������Ŀɶ��ԶԿͻ��˳���Ա����Ҫ�ԡ����ӿ�չ�ָ����ʹ����ʵ����������������������������չʾ���п��õ��࣬�����������ʹ�����ǣ�����˵��Щ��Ա���ã����� Java �У�JDK �ĵ�����������������á������Ȩ������Ȩ�����η�Ҳ��������ȷ������е���Щ���������ʹ�����ǿ��õġ����ϣ��ĳ������Ա��ͻ��˳���Աʹ�ã��Ͱѹؼ��� public ������������Ķ��塣�����������ſͻ��˳���Ա�ܷ񴴽���Ķ���Ϊ�˿���һ����ķ���Ȩ�ޣ����η���������ڹؼ��� class ֮ǰ��xxxxxxxxxxpublic class Widget {������������� hiding����ô�κοͻ��˳���Ա������ͨ�������������� Widget��xxxxxxxxxximport hiding.Widget;����xxxxxxxxxximport hiding.*;������һЩ��������ƣ�ÿ�����뵥Ԫ����ÿ���ļ�����ֻ����һ�� public �ࡣ���ʾ��ÿ�����뵥Ԫ��һ�������Ľӿ��� public ���ʾ���ýӿڿ��԰�������֧�ְ�����Ȩ�޵��ࡣһ��һ�����뵥Ԫ�г���һ�����ϵ� public �࣬����ͻᱨ����public ������Ʊ����뺬�иñ��뵥Ԫ���ļ�����ͬ��������Сд�����Զ��� Widget ��˵���ļ��������� Widget.java�������� widget.java �� WIDGET.java���ٴ�ǿ����������ֲ�ƥ�䣬�������ᱨ������Ȼ���Ǻܳ��������Ǳ��뵥Ԫ��û�� public ��Ҳ�ǿ��ܵġ���ʱ�������������ļ������������������ô�����Ķ��ߺ�ά���߸е����󣩡������ȡ��һ���� hiding ���е��ֻ࣬������� Widget �� hiding ����һЩ���� public ����Ҫִ�е�������ô���أ� �㲻�������鷳Ϊ�ͻ��˳���Ա����˵���ĵ�����������Ϊ���ú����ȫ�ı�ԭ�з��������ɰ汾ɾ�����滻���°汾��Ϊ�˱���������ԣ���Ҫȷ���ͻ��˳���Ա������������ hiding �е��κ��ض�ϸ�ڣ���ô�� public �ؼ��ִ�����ȥ����������������Ȩ�ޣ��Ϳ����ˡ����㴴����һ��������Ȩ�޵��࣬�����е���������Ϊ private ��Ȼ��������ġ���Ӧ�þ����ܽ��������Զ�����Ϊ private������ͨ���ѷ������������ࣨ������Ȩ�ޣ���ͬ�ķ���Ȩ��Ҳ�Ǻ����ġ�����һ��������Ȩ�޵���ֻ�ܱ����ڰ��ڣ������㱻ǿ�ƽ�ĳЩ��������Ϊ public����������£�������������㡣ע�⣬��Ȳ����� private �ģ��������˸����������κ��඼���ܷ���������Ҳ������ protected �ġ����Զ�����ķ���Ȩ��ֻ������ѡ�񣺰�����Ȩ�޻��� public��Ϊ�˷�ֹ�౻�����ʣ����Խ����еĹ���������Ϊ private������ֻ�����Լ��ܴ������������ static ��Ա�У���xxxxxxxxxx// hiding/Lunch.java// Demonstrates class access specifiers. Make a class// effectively private with private constructors: class Soup1 { &nbsp; &nbsp;private Soup1() {} &nbsp; &nbsp;public static Soup1 makeSoup() { // [1] &nbsp; &nbsp; &nbsp; &nbsp;return new Soup1(); &nbsp; }} class Soup2 { &nbsp; &nbsp;private Soup2() {} &nbsp; &nbsp;private static Soup2 ps1 = new Soup2(); // [2] &nbsp; &nbsp;public static Soup2 access() { &nbsp; &nbsp; &nbsp; &nbsp;return ps1; &nbsp; } &nbsp; &nbsp;public void f() {}}// Only one public class allowed per file:public class Lunch { &nbsp; &nbsp;void testPrivate() { &nbsp; &nbsp; &nbsp; &nbsp;// Can't do this! Private constructor: &nbsp; &nbsp; &nbsp; &nbsp;//- Soup1 soup = new Soup1(); &nbsp; } &nbsp; &nbsp;void testStatic() { &nbsp; &nbsp; &nbsp; &nbsp;Soup1 soup = Soup1.makeSoup(); &nbsp; } &nbsp; &nbsp;void testSingleton() { &nbsp; &nbsp; &nbsp; &nbsp;Soup2.access().f(); &nbsp; }}������ [1] ����ͨ�� static ������������Ҳ������ [2] �����ȴ���һ����̬���󣬵��û���Ҫ������ʱ���ض�������ü��ɡ���ĿǰΪֹ���󲿷ֵķ���Ҫô���� void��Ҫô���ػ������ͣ����� [1] ���Ķ���է��֮�»��е����󡣷�������makeSoup��ǰ��� Soup1 �����˷������ص����͡���ĿǰΪֹ�����ﾭ���� void�����������κζ�����Ȼ��Ҳ���Է��ض�������ã���������һ����������������˶� Soup1 ���������á�Soup1 �� Soup2 չʾ�����ͨ���������еĹ���������Ϊ private �ķ�ʽ��ֱֹ�Ӵ���ĳ����Ķ��󡣼�ס������㲻��ʽ�ش��������������������Զ�Ϊ�㴴��һ���޲ι�������û�в����Ĺ���������������Ǳ�д���޲ι���������ô�������Ͳ����Զ������������ˡ�������������Ϊ private����ô˭Ҳ�޷���������Ķ����ˡ��������ڱ��˸���ôʹ��������أ��������Ӹ���������ѡ���� Soup1 �У���һ�� static ���������������Ǵ���һ���µ� Soup1 ���󲢷��ض�������á������Ҫ�ڷ�������֮ǰ�� Soup1 ����һЩ������������Ǽ�¼�����˶��ٸ� Soup1 ���󣨿��������������������������������õġ�Soup2 �õ�����ν�����ģʽ������ģʽ��������ģʽ����Ϊ��ֻ�����������һ������Soup2 ��Ķ�������Ϊ Soup2 �� static private ��Ա�������ģ���������ֻ��һ������ֻ��ͨ�� public ���ε� access() �������ʵ������������С��������ʲô���Ĺ�ϵ�У�����һЩ������Ա��ͬ���صĽ����Ǻ���Ҫ�ġ����㴴����һ����⣬Ҳ���������ʹ���߲�������ϵ�����������Ŀͻ��˳���Ա����Ҫʹ�������ⴴ��Ӧ�û�������⡣û�й��򣬿ͻ��˳���Ա�Ϳ��Զ�������г�ԱΪ����Ϊ����ʹ��ϣ�����ǲ�Ҫ�������ֳ�Ա����������£��������ﶼ�ǹ����ġ�������������������ͨ���๹���ģ����ȣ������˽�һ�����������ķ�ʽ����ν���������ο��ƶ����Ա�ķ��ʡ��ݹ��ƣ��� C ���Կ�����Ŀ�����������ﵽ 5 ���к� 10 ����ʱ�ͻ�������⣬��Ϊ C ����ֻ�е�һ�������ռ䣬���ƿ�ʼ��ͻ��ɶ���Ĺ����������� Java �У��ؼ��� package��������ģʽ�͹ؼ��� import ������������Ƶ���ȫ����Ȩ����˿������׵ر������Ƴ�ͻ�����⡣���Ƴ�Ա����Ȩ��������ԭ�򡣵�һ��ԭ����ʹ�û���Ҫ�Ӵ����ǲ��ýӴ��Ĳ��֣��ⲿ�ֶ������ڲ���˵�Ǳ�Ҫ�ģ����ǲ����ڿͻ��˳���Ա����ӿڵ�һ���֡���˽���������������Ϊ private ���ڿͻ��˳���Ա��˵��һ�ַ��񣬿�������������ؿ���ʲô����Ҫ�ģ�ʲô���Ժ��ԡ�����Լ����Ƕ�������⡣�ڶ���Ҳ������Ҫ��ԭ����Ϊ�����������߸������ڲ��Ĺ�����ʽ�������õ��Ļ�Ӱ�쵽�ͻ��˳���Ա�����������ĳ�ַ�ʽ����һ���࣬�����������Ĵ���ṹ���Լ������������ٶȡ�����ӿ���ʵ�ֱ���ȷ�ظ���ͱ����������ʵ����һĿ�ģ�������ǿ�ƿͻ��˳���Ա���±�д���롣����Ȩ�޿���ȷ���ͻ��˳���Ա��������ĳ����ĵײ�ʵ�ֵ��κβ��֡�����߱����ĵײ�ʵ�ֵ�����ʱ�������������ɵظ�����ƣ������ܻ�����ط������������ϸ�ĵؼƻ�����ƣ����п��ܷ��������˽⵽��������԰�ȫ��ʱ������Ը��ӷ��ĵ�ʵ�飬�����ѧ�ᣬ����������Ŀ����� public �ӿ����û����������ģ������ڷ�������ƽ׶ξ����ⲿ�ֽӿ�������Ҫ�Ĳ��֡�������ˣ�����Ȼ�иı�Ŀռ䡣������û�д�������ȷ�Ľӿڣ��������Ӹ���ķ�����ֻҪ�㲻ɾ����Щ�ͻ��˳���Ա�Ѿ������ǵĴ�����ʹ�õĶ�����ע�⵽����Ȩ�޿��ƹ�ע������ⴴ���ߺ��ⲿʹ����֮��Ĺ�ϵ��һ�ֽ�����ʽ���ܶ�����£���ʵ������ˡ����磬���Լ���д�����еĴ��룬������һ��С���й��������еĶ���������ͬһ�����¡���Щ����£�������ʽ��������һ�֣���ʱ�ϸ����ѭ����Ȩ�޹���Ҳ���������ѡ��Ĭ�ϣ���������Ȩ��Ҳ�����㹻���ˡ�&nbsp;�� 8 �� �������븴������������̣�OOP�����������ԭ��֮һ�������� C ���Ե��������������˵�������á�ͨ��ָ�ľ��ǡ����ƴ��롱���κ����Զ���ͨ���򵥸������ﵽ���븴�õ�Ŀ�ģ�������������Ч�������á�Java Χ�ơ��ࡱ��Class����������⡣���ǿ���ֱ��ʹ�ñ��˹�������Թ��Ĵ��룬���Ǵ������ࡢ���¿�ʼ������ڲ���ȾԴ�����ǰ����ʹ���ִ��������Ҫ���ɵġ��ڱ�����㽫ѧϰ�����ַ�ʽ���ﵽ���Ŀ�ģ���һ�ַ�ʽֱ���˵����������д���������Ķ������ַ�ʽ��������ϡ���Composition����ͨ�����ַ�ʽ���ô���Ĺ��ܣ���������ʽ���ڶ��ַ�ʽ��Ϊ΢��������������͵����ࡣ���������⣺������������ʽ���������ڱ���ʱ�Ķ�����룬���ַ�ʽ�ͽ������̳С���Inheritance���������������󲿷ֵĹ������̳�����������̣�OOP������Ҫ����֮һ�����๦����ؽ�����̬��Polymorphism���½��н��ܡ������̳е��﷨����Ϊ�����������Ƶĵط�������ʵ���е����ģ��Ͼ����ǻ����������͹����µ����ͣ����ڱ����У����ѧ�������ִ��븴�õķ���������﷨��ǰ���ѧϰ�У�����ϡ���Composition���Ѿ������ʹ�á������Ҫ�Ѷ�������ã�object references��������һ���µ�������ʹ������ϡ����磬��������Ҫһ���������������˼��� String ���������������ͣ�primitives���������ֶΣ�һ��������Ķ��󡣶��ڷǻ������Ͷ��󣬽�����ֱ�ӷ����������У����ڻ������������ֶ��������������xxxxxxxxxx// reuse/SprinklerSystem.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// Composition for code reuse class WaterSource { &nbsp;private String s; &nbsp;WaterSource() { &nbsp; &nbsp;System.out.println(\"WaterSource()\"); &nbsp; &nbsp;s = \"Constructed\"; } &nbsp;@Override &nbsp;public String toString() { return s; }} public class SprinklerSystem { &nbsp;private String valve1, valve2, valve3, valve4; &nbsp;private WaterSource source = new WaterSource(); &nbsp;private int i; &nbsp;private float f; &nbsp;@Override &nbsp;public String toString() { &nbsp; &nbsp;return &nbsp; &nbsp; &nbsp;\"valve1 = \" + valve1 + \" \" + &nbsp; &nbsp; &nbsp;\"valve2 = \" + valve2 + \" \" + &nbsp; &nbsp; &nbsp;\"valve3 = \" + valve3 + \" \" + &nbsp; &nbsp; &nbsp;\"valve4 = \" + valve4 + \"\\n\" + &nbsp; &nbsp; &nbsp;\"i = \" + i + \" \" + \"f = \" + f + \" \" + &nbsp; &nbsp; &nbsp;\"source = \" + source; // [1] } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;SprinklerSystem sprinklers = new SprinklerSystem(); &nbsp; &nbsp;System.out.println(sprinklers); }}/* Output:WaterSource()valve1 = null valve2 = null valve3 = null valve4 = nulli = 0 f = 0.0 source = Constructed*/ ���������ж����һ�������������: toString()��ÿ���ǻ������Ͷ�����һ�� toString() �������ڱ�������Ҫ�ַ��������ж������������µ��ø÷�������ˣ��� [1] �У���������������ͼ�����ӡ�һ�� WaterSource ���͵��ַ������� ����Ϊ�ַ���ֻ��ƴ����һ���ַ��������������Ȼ���� toString() �� source ת����һ���ַ�����Ȼ��������ƴ���������ַ�����������ַ������ݸ� System.out.println()��Ҫ�Դ������κ�������������Ϊ��ֻ��Ҫ��дһ�� toString() �������� toString() ��ʹ�� @Override ע�������߱���������ȷ����ȷ�ظ��ǡ�@Override �ǿ�ѡ�ģ�������������֤��û��ƴд���� (���߸�΢���˵����Сд��ĸ�������)�����еĻ��������ֶ��Զ���ʼ��Ϊ�㣬���� object Everywhere һ�������������Ƕ������ñ���ʼ��Ϊ null������㳢�Ե������κ�һ���������㽫�õ�һ���쳣��һ������ʱ���󣩡�������ǣ���ӡ null ����ȴ����õ��쳣������������Ϊÿ�����ô���һ��Ĭ�϶�������������ģ���Ϊ����������£���ᵼ�²���Ҫ�Ŀ�������ʼ�����������ַ���:�����󱻶���ʱ������ζ�����������ڵ��ù��캯��֮ǰ��ʼ�����ڸ���Ĺ��캯���С���ʵ��ʹ�ö���֮ǰ����ͨ����Ϊ�ӳٳ�ʼ�����ڶ��󴴽��������Ҳ���Ҫÿ�ζ��������������£������Լ��ٿ�����ʹ��ʵ����ʼ������������ʵ�������ķ����������⣺xxxxxxxxxx// reuse/Bath.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// Constructor initialization with composition class Soap { &nbsp;private String s; &nbsp;Soap() { &nbsp; &nbsp;System.out.println(\"Soap()\"); &nbsp; &nbsp;s = \"Constructed\"; } &nbsp;@Override &nbsp;public String toString() { return s; }} public class Bath { &nbsp;private String // Initializing at point of definition: &nbsp; &nbsp;s1 = \"Happy\", &nbsp; &nbsp;s2 = \"Happy\", &nbsp; &nbsp;s3, s4; &nbsp;private Soap castille; &nbsp;private int i; &nbsp;private float toy; &nbsp;public Bath() { &nbsp; &nbsp;System.out.println(\"Inside Bath()\"); &nbsp; &nbsp;s3 = \"Joy\"; &nbsp; &nbsp;toy = 3.14f; &nbsp; &nbsp;castille = new Soap(); } &nbsp;// Instance initialization: { i = 47; } &nbsp;@Override &nbsp;public String toString() { &nbsp; &nbsp;if(s4 == null) // Delayed initialization: &nbsp; &nbsp; &nbsp;s4 = \"Joy\"; &nbsp; &nbsp;return &nbsp; &nbsp; &nbsp;\"s1 = \" + s1 + \"\\n\" + &nbsp; &nbsp; &nbsp;\"s2 = \" + s2 + \"\\n\" + &nbsp; &nbsp; &nbsp;\"s3 = \" + s3 + \"\\n\" + &nbsp; &nbsp; &nbsp;\"s4 = \" + s4 + \"\\n\" + &nbsp; &nbsp; &nbsp;\"i = \" + i + \"\\n\" + &nbsp; &nbsp; &nbsp;\"toy = \" + toy + \"\\n\" + &nbsp; &nbsp; &nbsp;\"castille = \" + castille; } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Bath b = new Bath(); &nbsp; &nbsp;System.out.println(b); }}/* Output:Inside Bath()Soap()s1 = Happys2 = Happys3 = Joys4 = Joyi = 47toy = 3.14castille = Constructed*/ �� Bath ���캯���У���һ������������г�ʼ������ǰ���Ѿ�ִ���ˡ����㲻�ڶ��崦��ʼ��ʱ����Ȼ���ܱ�֤����������÷�����Ϣ֮ǰִ���κγ�ʼ�������������ͼ��δ��ʼ�������õ��÷�������δ��ʼ�������ý���������ʱ�쳣�������� toString() ʱ��������ֵ s4���Ա���ʹ���ֶε�ʱ�����е����Զ��ѱ���ʼ�����̳��﷨�̳�����������������Ե�һ����ɲ��֡���ʵ֤�����ڴ�����ʱ����Ҫ�̳У���Ϊ������ʽ�ؼ̳������࣬�������ʽ�ؼ̳� Java �ı�׼�������Object������ϵ��﷨�����ԣ����Ǽ̳�ʹ����һ��������﷨������̳�ʱ����˵��������������Ǹ��������ơ����������������������ǰ�Ĵ�����������һ�㣬ʹ�ùؼ��� extends �����������ơ�����������ʱ���㽫�Զ���û����е������ֶκͷ�����������һ������:xxxxxxxxxx// reuse/Detergent.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// Inheritance syntax &amp; properties class Cleanser { &nbsp;private String s = \"Cleanser\"; &nbsp;public void append(String a) { s += a; } &nbsp;public void dilute() { append(\" dilute()\"); } &nbsp;public void apply() { append(\" apply()\"); } &nbsp;public void scrub() { append(\" scrub()\"); } &nbsp;@Override &nbsp;public String toString() { return s; } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Cleanser x = new Cleanser(); &nbsp; &nbsp;x.dilute(); x.apply(); x.scrub(); &nbsp; &nbsp;System.out.println(x); }} public class Detergent extends Cleanser { &nbsp;// Change a method: &nbsp;@Override &nbsp;public void scrub() { &nbsp; &nbsp;append(\" Detergent.scrub()\"); &nbsp; &nbsp;super.scrub(); // Call base-class version } &nbsp;// Add methods to the interface: &nbsp;public void foam() { append(\" foam()\"); } &nbsp;// Test the new class: &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Detergent x = new Detergent(); &nbsp; &nbsp;x.dilute(); &nbsp; &nbsp;x.apply(); &nbsp; &nbsp;x.scrub(); &nbsp; &nbsp;x.foam(); &nbsp; &nbsp;System.out.println(x); &nbsp; &nbsp;System.out.println(\"Testing base class:\"); &nbsp; &nbsp;Cleanser.main(args); }}/* Output:Cleanser dilute() apply() Detergent.scrub() scrub()foam()Testing base class:Cleanser dilute() apply() scrub()*/ ����ʾ��һЩ���ԡ����ȣ��� Cleanser �� append() �����У�ʹ�� += ���������ַ������ӵ� s������ Java �����Ա�����ء��������ַ����Ĳ�����֮һ (���� + )���ڶ���Cleanser �� Detergent ������һ�� main() �����������Ϊÿ���ഴ��һ�� main() ; ��������ÿ������м򵥵Ĳ��ԡ�������ɲ���ʱ������Ҫɾ�� main(); ����Խ��������Ժ�Ĳ����С���ʹ�������кܶ��඼�� main() ������Ωһ���е�ֻ�����������ϵ��õ� main()���������ʹ�� java Detergent ʱ�򣬾͵����� Detergent.main()��������Ҳ����ʹ�� java Cleanser ������ Cleanser.main()����ʹ Cleanser ����һ�������ࡣ��ʹ��ֻ���а�����Ȩ��Ҳ���Է��� public main()�������Detergent.main() ��ʽ�ص��� Cleanser.main()���������д�����ͬ�Ĳ���(��Ȼ������Դ����κ��ַ�������)��Cleanser �е����з������ǹ����ġ����ס�������ʹ���κη������η������ԱĬ��Ϊ������Ȩ�ޣ���ֻ�������ڳ�Ա���ʡ���ˣ����û�з������η�����ô���ڵ��κ��˶�����ʹ����Щ���������磬Detergent ��û�����⡣���ǣ�����������е���̳� Cleanser�������ֻ�ܷ��� Cleanser �Ĺ�����Ա����ˣ�Ϊ�������̳У�һ������������ֶ�Ϊ˽�У����з���Ϊ������(�ܱ�����ԱҲ�������������;���Ժ��֪���ġ�)���ض�������£��������е�����������һ�����õ�ָ�ϡ�Cleanser �Ľӿ�����һ�鷽��: append()��dilute()��apply()��scrub() �� toString()����Ϊ Detergent �Ǵ� Cleanser ������(ͨ�� extends �ؼ���)��������������ӿ����Զ���ȡ������Щ��������ʹ��û���� Detergent �п���������Щ��������ʽ���塣��ô�����԰Ѽ̳п����Ǹ����ࡣ���� scrub() ������������ʹ�û����ж���ķ������޸����������������������е��û���ĸ÷����������� scrub() �ڲ������ܼ򵥵ص��� scrub()����Ϊ�������ݹ���á�Ϊ�˽��������⣬Java �� super �ؼ��������˵�ǰ��̳еġ����ࡱ(����)����˱���ʽ super.scrub() ���÷��� scrub() �Ļ���汾���̳�ʱ���㲻������ʹ�û���ķ������㻹���������������κη���һ���������������·���:ֻ�趨���������� foam() ����һ�����ӡ�Detergent.main() �п��Կ��������� Detergent ��������Ե��� Cleanser �� Detergent �п��õ����з��� (�� foam() )����ʼ�����������漰��������:����������ࡣ�������������ɵĽ��������ܻ����˸е����󡣴��ⲿ������������������ͬ�Ľӿڣ����ܻ���һЩ����ķ������ֶΡ����Ǽ̳в���ֻ�Ǹ��ƻ���Ľӿڡ����㴴��������Ķ���ʱ��������������Ӷ�������Ӷ��������Լ���������Ķ�����һ���ġ�ֻ�Ǵ��ⲿ����������Ӷ��󱻰�װ��������Ķ����С�������ȷ��ʼ�������Ӷ��󣬶���ֻ��һ�ַ������Ա�֤��һ�� : ͨ�����û��๹�캯���ڹ��캯����ִ�г�ʼ�����ù��캯������ִ�л����ʼ������������ʵ���Ϣ����Ȩ��Java �Զ��������๹�캯���в���Ի��๹�캯���ĵ��á����������չʾ��������εļ̳�:xxxxxxxxxx// reuse/Cartoon.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// Constructor calls during inheritance class Art { &nbsp;Art() { &nbsp; &nbsp;System.out.println(\"Art constructor\"); }} class Drawing extends Art { &nbsp;Drawing() { &nbsp; &nbsp;System.out.println(\"Drawing constructor\"); }} public class Cartoon extends Drawing { &nbsp;public Cartoon() { &nbsp; &nbsp;System.out.println(\"Cartoon constructor\"); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Cartoon x = new Cartoon(); }}/* Output:Art constructorDrawing constructorCartoon constructor*/ ����ӻ��ࡰ���⡱���У���˻����������๹�캯���ܹ�������֮ǰ���г�ʼ������ʹ��Ϊ Cartoon �������캯����������Ҳ��Ϊ��ϳ�һ���޲������캯�������û��๹�캯��������ɾ�� Cartoon ���캯�����鿴������������Ĺ��캯����������������й��캯�������޲����� ; �����������׵�����Щ���캯������Ϊ����Ҫ���������û���޲����Ļ��๹�캯�������߱�����þ��в����Ļ��๹�캯���������ʹ�� super �ؼ��ֺ��ʵ��Ĳ����б���ʽ�ر�д�Ի��๹�캯���ĵ���:xxxxxxxxxx// reuse/Chess.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// Inheritance, constructors and arguments class Game { &nbsp;Game(int i) { &nbsp; &nbsp;System.out.println(\"Game constructor\"); }} class BoardGame extends Game { &nbsp;BoardGame(int i) { &nbsp; &nbsp;super(i); &nbsp; &nbsp;System.out.println(\"BoardGame constructor\"); }} public class Chess extends BoardGame { &nbsp;Chess() { &nbsp; &nbsp;super(11); &nbsp; &nbsp;System.out.println(\"Chess constructor\"); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Chess x = new Chess(); }}/* Output:Game constructorBoardGame constructorChess constructor*/ ���û���� BoardGame ���캯���е��û��๹�캯�����������ͻᱨ���Ҳ��� Game() �Ĺ��캯�������⣬�Ի��๹�캯���ĵ��ñ����������๹�캯���еĵ�һ��������(�����д���ˣ��������������㡣)ί��Java ��ֱ��֧�ֵĵ��������ù�ϵ��Ϊί�С�����ڼ̳к����֮�䣬��Ϊ�㽫һ����Ա����������ڹ���������(�������)����ͬʱ���������й������Գ�Ա��������з���(����̳�)�����磬����ɴ���Ҫһ������ģ��:xxxxxxxxxx// reuse/SpaceShipControls.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information. public class SpaceShipControls { &nbsp;void up(int velocity) {} &nbsp;void down(int velocity) {} &nbsp;void left(int velocity) {} &nbsp;void right(int velocity) {} &nbsp;void forward(int velocity) {} &nbsp;void back(int velocity) {} &nbsp;void turboBoost() {}} ��������ɴ���һ�ַ�����ʹ�ü̳�:xxxxxxxxxx// reuse/DerivedSpaceShip.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information. public classDerivedSpaceShip extends SpaceShipControls { &nbsp;private String name; &nbsp;public DerivedSpaceShip(String name) { &nbsp; &nbsp;this.name = name; } &nbsp;@Override &nbsp;public String toString() { return name; } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;DerivedSpaceShip protector = &nbsp; &nbsp; &nbsp; &nbsp;new DerivedSpaceShip(\"NSEA Protector\"); &nbsp; &nbsp;protector.forward(100); }} Ȼ���� DerivedSpaceShip �����������ġ�һ�֡� SpaceShipControls ����ʹ�㡰���ߡ� DerivedSpaceShip ���� forward()����׼ȷ��˵��һ������ɴ������� SpaceShipControls ��ͬʱ SpaceShipControls �е����з�������¶������ɴ��С�ί�н�����������:xxxxxxxxxx// reuse/SpaceShipDelegation.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information. public class SpaceShipDelegation { &nbsp;private String name; &nbsp;private SpaceShipControls controls = &nbsp; &nbsp;new SpaceShipControls(); &nbsp;public SpaceShipDelegation(String name) { &nbsp; &nbsp;this.name = name; } &nbsp;// Delegated methods: &nbsp;public void back(int velocity) { &nbsp; &nbsp;controls.back(velocity); } &nbsp;public void down(int velocity) { &nbsp; &nbsp;controls.down(velocity); } &nbsp;public void forward(int velocity) { &nbsp; &nbsp;controls.forward(velocity); } &nbsp;public void left(int velocity) { &nbsp; &nbsp;controls.left(velocity); } &nbsp;public void right(int velocity) { &nbsp; &nbsp;controls.right(velocity); } &nbsp;public void turboBoost() { &nbsp; &nbsp;controls.turboBoost(); } &nbsp;public void up(int velocity) { &nbsp; &nbsp;controls.up(velocity); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;SpaceShipDelegation protector = &nbsp; &nbsp; &nbsp;new SpaceShipDelegation(\"NSEA Protector\"); &nbsp; &nbsp;protector.forward(100); }} ������ת�����ײ� control ������˽ӿ���̳еĽӿ�����ͬ�ġ����ǣ����ί���и���Ŀ��ƣ���Ϊ�����ѡ��ֻ�ڳ�Ա�������ṩ�������Ӽ�����Ȼ Java ���Բ�֧��ί�У����ǿ������߳���֧�֡����磬�����������ʹ�� JetBrains Idea IDE �Զ����ɵġ���������̳��㽫����ͬʱʹ����Ϻͼ̳С����������չʾ��ʹ�ü̳к���ϴ����࣬�Լ���Ҫ�Ĺ��캯����ʼ��:xxxxxxxxxx// reuse/PlaceSetting.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// Combining composition &amp; inheritance class Plate { &nbsp;Plate(int i) { &nbsp; &nbsp;System.out.println(\"Plate constructor\"); }} class DinnerPlate extends Plate { &nbsp;DinnerPlate(int i) { &nbsp; &nbsp;super(i); &nbsp; &nbsp;System.out.println(\"DinnerPlate constructor\"); }} class Utensil { &nbsp;Utensil(int i) { &nbsp; &nbsp;System.out.println(\"Utensil constructor\"); }} class Spoon extends Utensil { &nbsp;Spoon(int i) { &nbsp; &nbsp;super(i); &nbsp; &nbsp;System.out.println(\"Spoon constructor\"); }} class Fork extends Utensil { &nbsp;Fork(int i) { &nbsp; &nbsp;super(i); &nbsp; &nbsp;System.out.println(\"Fork constructor\"); }} class Knife extends Utensil { &nbsp;Knife(int i) { &nbsp; &nbsp;super(i); &nbsp; &nbsp;System.out.println(\"Knife constructor\"); }} // A cultural way of doing something:class Custom { &nbsp;Custom(int i) { &nbsp; &nbsp;System.out.println(\"Custom constructor\"); }} public class PlaceSetting extends Custom { &nbsp;private Spoon sp; &nbsp;private Fork frk; &nbsp;private Knife kn; &nbsp;private DinnerPlate pl; &nbsp;public PlaceSetting(int i) { &nbsp; &nbsp;super(i + 1); &nbsp; &nbsp;sp = new Spoon(i + 2); &nbsp; &nbsp;frk = new Fork(i + 3); &nbsp; &nbsp;kn = new Knife(i + 4); &nbsp; &nbsp;pl = new DinnerPlate(i + 5); &nbsp; &nbsp;System.out.println(\"PlaceSetting constructor\"); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;PlaceSetting x = new PlaceSetting(9); }}/* Output:Custom constructorUtensil constructorSpoon constructorUtensil constructorFork constructorUtensil constructorKnife constructorPlate constructorDinnerPlate constructorPlaceSetting constructor*/ ���ܱ�����ǿ�����ʼ�����࣬��Ҫ�����ڹ��캯���Ŀ�ͷ�ͳ�ʼ�����࣬����������������ȷ�����ʼ���˳�Ա����ע��������θɾ��ط���ġ�����������Ҫ�������ô����Դ���롣�����ֻ����һ������(����ڼ̳к���϶�����ȷ�ġ�)��֤�ʵ�������Java û�� C++ �����������ĸ�������������ڶ�������ʱ�Զ����õķ�����ԭ������ǣ��� Java �У�ͨ�����������������ٶ��󣬴Ӷ����������ռ���������Ҫ�����ڴ档ͨ�����ǿ��Եģ�������ʱ����������������������ִ��һЩ��Ҫ�����Ļ����ʼ���������½��ᵽ�����޷�֪�������ռ�����ʱ�ᱻ���ã��������Ƿ�ᱻ���á���ˣ��������Ϊ������һЩ������������ʽ�ر�дһ������ķ��������������ȷ���ͻ��˳���Ա֪�����Ǳ�������������������Ҫ���ǡ���������&quot;�쳣&quot;�½��������ġ��������ͨ���� finally �Ӿ��з��ô�����������ֹ�쳣���뿼��һ������Ļ�ϻ���ͼƬ�ļ�����������ϵͳ������:xxxxxxxxxx// reuse/CADSystem.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// Ensuring proper cleanup// {java reuse.CADSystem}package reuse; class Shape { &nbsp;Shape(int i) { &nbsp; &nbsp;System.out.println(\"Shape constructor\"); } &nbsp;void dispose() { &nbsp; &nbsp;System.out.println(\"Shape dispose\"); }} class Circle extends Shape { &nbsp;Circle(int i) { &nbsp; &nbsp;super(i); &nbsp; &nbsp;System.out.println(\"Drawing Circle\"); } &nbsp;@Override &nbsp;void dispose() { &nbsp; &nbsp;System.out.println(\"Erasing Circle\"); &nbsp; &nbsp;super.dispose(); }} class Triangle extends Shape { &nbsp;Triangle(int i) { &nbsp; &nbsp;super(i); &nbsp; &nbsp;System.out.println(\"Drawing Triangle\"); } &nbsp;@Override &nbsp;void dispose() { &nbsp; &nbsp;System.out.println(\"Erasing Triangle\"); &nbsp; &nbsp;super.dispose(); }} class Line extends Shape { &nbsp;private int start, end; &nbsp;Line(int start, int end) { &nbsp; &nbsp;super(start); &nbsp; &nbsp;this.start = start; &nbsp; &nbsp;this.end = end; &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"Drawing Line: \" + start + \", \" + end); } &nbsp;@Override &nbsp;void dispose() { &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"Erasing Line: \" + start + \", \" + end); &nbsp; &nbsp;super.dispose(); }} public class CADSystem extends Shape { &nbsp;private Circle c; &nbsp;private Triangle t; &nbsp;private Line[] lines = new Line[3]; &nbsp;public CADSystem(int i) { &nbsp; &nbsp;super(i + 1); &nbsp; &nbsp;for(int j = 0; j &lt; lines.length; j++) &nbsp; &nbsp; &nbsp;lines[j] = new Line(j, j*j); &nbsp; &nbsp;c = new Circle(1); &nbsp; &nbsp;t = new Triangle(1); &nbsp; &nbsp;System.out.println(\"Combined constructor\"); } &nbsp;@Override &nbsp;public void dispose() { &nbsp; &nbsp;System.out.println(\"CADSystem.dispose()\"); &nbsp; &nbsp;// The order of cleanup is the reverse &nbsp; &nbsp;// of the order of initialization: &nbsp; &nbsp;t.dispose(); &nbsp; &nbsp;c.dispose(); &nbsp; &nbsp;for(int i = lines.length - 1; i &gt;= 0; i--) &nbsp; &nbsp; &nbsp;lines[i].dispose(); &nbsp; &nbsp;super.dispose(); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;CADSystem x = new CADSystem(47); &nbsp; &nbsp;try { &nbsp; &nbsp; &nbsp;// Code and exception handling... &nbsp; } finally { &nbsp; &nbsp; &nbsp;x.dispose(); &nbsp; } }}/* Output:Shape constructorShape constructorDrawing Line: 0, 0Shape constructorDrawing Line: 1, 1Shape constructorDrawing Line: 2, 4Shape constructorDrawing CircleShape constructorDrawing TriangleCombined constructorCADSystem.dispose()Erasing TriangleShape disposeErasing CircleShape disposeErasing Line: 2, 4Shape disposeErasing Line: 1, 1Shape disposeErasing Line: 0, 0Shape disposeShape dispose*/ ���ϵͳ�е����ж�������ĳ�� Shape (��������һ�� Object����Ϊ���ǴӸ�����ʽ�̳е�) ������ʹ�� super ���ø÷����Ļ���汾�⣬ÿ���໹���� dispose() �������ض��� Shape �ࡪ��Circle��Triangle �� Line������ ��draw�� ���캯���������ڶ�������������е��õ��κη��������Ը�����һЩ��Ҫ���������顣ÿ���඼���Լ��� dispose() �����������ڴ�����ݻָ����������֮ǰ��״̬���� main() �У��������ؼ���������ǰû�м����ģ���&quot;�쳣&quot;һ��֮ǰ������ϸ����: try �� finally��try �ؼ��ֱ�ʾ����Ŀ� (�û����ŷָ� )��һ���ܱ�������������ζ�����õ������⴦��������һ�����⴦���ǣ����� try ������˳����������������֮��� finally �Ӿ��еĴ������Ǳ�ִ�С�(ͨ���쳣���������������಻ͬѰ���ķ�ʽ���� try �顣)���finally �Ӿ����˼�ǣ������۷���ʲô��ʼ�յ��� x.dispose()�������������� (�ڱ������� dispose() ) �У�������ע�����ͳ�Ա�������������ĵ���˳���Է�һ���Ӷ�����������һ���Ӷ������ȣ����봴�����෴˳��ִ���ض��������������������(һ����˵����Ҫ�����Ԫ����Ȼ�ǿɷ��ʵġ�) Ȼ����û�������������������ʾ���ںܶ�����£��������ⲻ�����⣻��ֻ��Ҫ�������ռ������������������ǣ��������ִ����ʽ����ʱ������Ҫ����Ŭ��������ϸ�ģ���Ϊ�������ռ�����û��ʲô���������ġ�������Զ������������ռ�����������ã������԰�������Ҫ���κ�˳����ն��󡣳����ڴ�����⣬�㲻�����������ռ������κ����顣���ϣ����������������ʹ���Լ���������������Ҫʹ�� finalize()������������� Java ����ķ�����������أ����������������¶���÷��������������κλ���汾�����ܷ����������������ģ������ڻ����ж���ģ����ض���������:xxxxxxxxxx// reuse/Hide.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// Overloading a base-class method name in a derived// class does not hide the base-class versions class Homer { &nbsp;char doh(char c) { &nbsp; &nbsp;System.out.println(\"doh(char)\"); &nbsp; &nbsp;return 'd'; } &nbsp;float doh(float f) { &nbsp; &nbsp;System.out.println(\"doh(float)\"); &nbsp; &nbsp;return 1.0f; }} class Milhouse {} class Bart extends Homer { &nbsp;void doh(Milhouse m) { &nbsp; &nbsp;System.out.println(\"doh(Milhouse)\"); }} public class Hide { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Bart b = new Bart(); &nbsp; &nbsp;b.doh(1); &nbsp; &nbsp;b.doh('x'); &nbsp; &nbsp;b.doh(1.0f); &nbsp; &nbsp;b.doh(new Milhouse()); }}/* Output:doh(float)doh(char)doh(float)doh(Milhouse)*/ Homer ���������ط����� Bart �ж��ǿ��õģ����� Bart ������һ���µ����ط���������һ�����㽫������ʹ�����������ȫ��ͬ��ǩ���ͷ������͸�����ͬ���Ƶķ���Ҫ�����öࡣ����ͻ������������Ѿ������� Java 5 @Override ע�ͣ������ǹؼ��֣����ǿ�����ʹ�ùؼ���һ��ʹ���������������дһ������ʱ�������ѡ���������ע�ͣ�����㲻С���������ض�������д�������������һ��������Ϣ:xxxxxxxxxx// reuse/Lisa.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// {WillNotCompile} class Lisa extends Homer { &nbsp;@Override void doh(Milhouse m) { &nbsp; &nbsp;System.out.println(\"doh(Milhouse)\"); }} {WillNotCompile} ��ǽ����ļ��ų��ڱ���� Gradle ����֮�⣬����������ֹ����������㽫����:�������Ḳ�ǳ����еķ����� @Override ע�ͷ�ֹ����������ء������̳е�ѡ����Ϻͼ̳ж������������з����Ӷ����������ʽ�ģ����̳�����ʽ�ģ����������֪�������֮��������Լ������ڶ��߼���ѡ���������������а���һ��������Ĺ���ʱ��ʹ����ϣ����Ǽ̳С�Ҳ����˵����������Ƕ��һ������ͨ����˽�еģ�����ʵ���书�ܡ������ʹ���߿��������������������Ľӿڣ�����Ƕ�����Ľӿڡ���ʱ������û�ֱ�ӷ��ʵ������е���ϳɷ���������ġ�ֻ�轫��Ա��������Ϊ public ���ɣ����԰��⵱������ί�С���һ�֣�����Ա���������˾���ʵ�֣��������ǰ�ȫ�ġ����û�֪����������װһ�鲿��ʱ����ʹ�ýӿڸ����������⡣����� car �����Ǹ��ܺõ����ӣ�xxxxxxxxxx// reuse/Car.java// Composition with public objectsclass Engine { &nbsp; &nbsp;public void start() {} &nbsp; &nbsp;public void rev() {} &nbsp; &nbsp;public void stop() {}} class Wheel { &nbsp; &nbsp;public void inflate(int psi) {}} class Window { &nbsp; &nbsp;public void rollup() {} &nbsp; &nbsp;pubilc void rolldown() {}} class Door { &nbsp; &nbsp;public Window window = new Window(); &nbsp; &nbsp;public void open() {} &nbsp; &nbsp;public void close() {}} public class Car { &nbsp; &nbsp;public Engine engine = new Engine(); &nbsp; &nbsp;public Wheel[] wheel = new Wheel[4]; &nbsp; &nbsp;public Door left = new Door(), right = new Door(); // 2-door &nbsp; &nbsp;public Car() { &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; 4; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;wheel[i] = new Wheel(); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Car car = new Car(); &nbsp; &nbsp; &nbsp; &nbsp;car.left.window.rollup(); &nbsp; &nbsp; &nbsp; &nbsp;car.wheel[0].inflate(72); &nbsp; }}��Ϊ����������� car �����Ҳ�����������һ���֣����ǵײ���ƵĲ��֣�������������ԱΪ public �����ڿͻ��˳���Ա�������ʹ���࣬�ҽ������ഴ�������ٵĴ��븴�Ӷȡ����ǣ���ס����һ��������ͨ����˵�����Ի���Ӧ������Ϊ private����ʹ�ü̳�ʱ��ʹ��һ�������ಢ�����������°汾��ͨ������ζ��ʹ��һ��ͨ���࣬��Ϊ��ĳ���������������⻯����΢˼���£���ͻᷢ�֣���һ����ͨ���߶��������һ�����Ǻ�������ġ�������������ͨ���ߣ������ǽ�ͨ���ߡ����֡���һ�����Ĺ�ϵ���ü̳�������ģ�������һ�����Ĺ�ϵ������������protected��Ȼ���Ѿ��Ӵ����̳У��ؼ��� protected �ͱ���������ˡ������������У������ؼ��� private ���㹻�ˡ���ʵ����Ŀ�У�ȴ�������һ�����ﾡ����������أ�������������ĳ�Ա���ʡ��ؼ��� protected ����������á�����ʾ��������û����ԣ����� private �ġ��������κμ̳������������ͬһ���е��࣬���ǿɷ��ʵġ�����protected Ҳ�ṩ�˰�����Ȩ�ޣ����ܿ��Դ��� protected ���ԣ�������õķ�ʽ�ǽ���������Ϊ private ��һֱ�������ĵײ�ʵ�ֵ�Ȩ����Ȼ��ͨ�� protected ������ļ̳��ߵķ���Ȩ�ޡ�xxxxxxxxxx// reuse/Orc.java// The protected keywordclass Villain { &nbsp; &nbsp;private String name; &nbsp; &nbsp;protected void set(String nm) { &nbsp; &nbsp; &nbsp; &nbsp;name = nm; &nbsp; } &nbsp; &nbsp;Villain(String name) { &nbsp; &nbsp; &nbsp; &nbsp;this.name = name; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"I'm a Villain and my name is \" + name; &nbsp; }} public class Orc extends Villain { &nbsp; &nbsp;private int orcNumber; &nbsp; &nbsp;public Orc(String name, int orcNumber) { &nbsp; &nbsp; &nbsp; &nbsp;super(name); &nbsp; &nbsp; &nbsp; &nbsp;this.orcNumber = orcNumber; &nbsp; } &nbsp; &nbsp;public void change(String name, int orcNumber) { &nbsp; &nbsp; &nbsp; &nbsp;set(name); // Available because it's protected &nbsp; &nbsp; &nbsp; &nbsp;this.orcNumber = orcNumber; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Orc \" + orcNumber + \": \" + super.toString(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Orc orc = new Orc(\"Limburger\", 12); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(orc); &nbsp; &nbsp; &nbsp; &nbsp;orc.change(\"Bob\", 19); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(orc); &nbsp; }}�����xxxxxxxxxxOrc 12: I'm a Villain and my name is LimburgerOrc 19: I'm a Villain and my name is Bobchange() �������Է��� set() ��������Ϊ set() ������ protected��ע�⵽���� Orc �� toString() ����Ҳʹ���˻���İ汾������ת���̳�����Ҫ�ķ��治��Ϊ�����ṩ��������������������һ�ֹ�ϵ�������֮�����ֹ�ϵ���Ա���Ϊ���������������һ�����͡����������������ǽ��ͼ̳е�һ�ֻ��ڷ�ʽ������ֱ��������֧�ֵġ����磬������һ������ Instrument ��������������һ�������� Wind�� ��Ϊ�̳б�֤�˻�������з�������������Ҳ�ǿ��õģ��������ⷢ�͸��û������ϢҲ�ܷ��͸������ࡣ��� Instrument ��һ�� play() ��������ô Wind Ҳ�и÷���������ζ�������׼ȷ��˵ Wind ����Ҳ��һ�����͵� Instrument����������չʾ�˱����������֧����һ����ģ�xxxxxxxxxx// reuse/Wind.java// Inheritance &amp; upcastingclass Instrument { &nbsp; &nbsp;public void play() {} &nbsp; &nbsp;static void tune(Instrument i) { &nbsp; &nbsp; &nbsp; &nbsp;// ... &nbsp; &nbsp; &nbsp; &nbsp;i.play(); &nbsp; }} // Wind objects are instruments// because they have the same interface:public class Wind extends Instrument { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Wind flute = new Wind(); &nbsp; &nbsp; &nbsp; &nbsp;Instrument.tune(flute); // Upcasting &nbsp; }}tune() ����������һ�� Instrument ���͵����á����ǣ��� Wind �� main() �����tune() ����ȴ������һ�� Wind ���á����� Java �����ͼ��ʮ���ϸ�һ������һ�����͵ķ�����������һ�����Ϳ���������֣���������ʶ�� Wind ����ͬʱҲ��һ�� Instrument ���󣬶��� Instrument �� tune ����һ��������� Wind �С��� tune() �У������ Instrument �� ���� Instrument �������������ã����ְ� Wind ����ת��Ϊ Instrument ���õ���Ϊ��������ת�����������ǻ��ڴ�ͳ����̳�ͼ��ͼ�������Ǹ���Ȼ��������չ������Ȼ����������ⷽʽ������Ϊ�а�������ͼ�������ǣ�Wind.java ����ͼ�ǣ��̳�ͼ��������ת��Ϊ���������ϵģ�����ͨ����������ת������Ϊ�Ǵ�һ�����������ת��Ϊһ����һ����࣬��������ת����Զ�ǰ�ȫ�ġ�Ҳ����˵���������ǻ����һ�������������ܱȻ����������ķ����������������پ��������һ���ķ�����������ת���ڼ䣬��ӿ�ֻ����ʧȥ�������������ӷ����������Ϊʲô��������û���κ���ȷת�ͻ����������ǵ�����£���Ȼ��������ת�͵�ԭ��Ҳ����ִ��������ת���෴������ת�ͣ����ǻ������⣬���ڸ�����������һ�º͡�������Ϣ��һ�½��и������̽�֡�������Ϻͼ̳�������������У�������ʹ�ô������п��ܵķ����ǽ����ݺͷ���һ���������У�Ȼ��ʹ�ø���Ķ���Ҳ����ʹ�����е���ͨ��������������ࡣ�̳���ʵ��̫���á���˾����ڽ��� OOP �Ĺ��������Ƕ��ǿ���̳У����Ⲣ����ζ��Ҫ������ʹ������ǡǡ�෴��������ʹ����������ȷʵʹ�ü̳����а����ġ�һ���ж�ʹ����ϻ��Ǽ̳е��������ķ�������һ���Լ��Ƿ���Ҫ����������ת��Ϊ���ࡣ�����������ת�ͣ���ô�̳о��Ǳ�Ҫ�ģ����������Ҫ����Ҫ��һ�������Ƿ�ò��ü̳С�����̬��һ�������һ��ʹ������ת�͵������������ɣ�����ֻҪ��ס��һ�ʡ�����Ҫ����ת���𣿡����������������������Ϻõ�ѡ��final �ؼ������������Ļ�����Java �Ĺؼ��� final �ĺ�����Щ΢�Ĳ�ͬ����ͨ����ָ���ǡ����ǲ��ܱ��ı�ġ�����ֹ�ı�������ԭ����ƻ�Ч�ʡ���Ϊ������ԭ������Զ�������п������ùؼ��� final�����¼��������˿���ʹ�� final �������ط������ݡ��������ࡣfinal �������������Զ���ĳ�ַ������߱�������һ�������Ǻ㶨����ġ��㶨�����õģ��磺һ�������ı�ı���ʱ������һ��������ʱ��ʼ���Ͳ���ı��ֵ�����ڱ���ʱ����������������������԰ѳ�����������У�Ҳ����˵�������ڱ���ʱ���㣬������һЩ����ʱ�ĸ������� Java �У����ೣ�������ǻ������ͣ������ùؼ��� final ���Ρ�������ڶ��峣����ʱ����и�ֵ��һ���� static �� final ͬʱ���ε�����ֻ��ռ��һ�β��ܸı�Ĵ洢�ռ䡣���� final ���ζ������ö��ǻ�������ʱ���京�����һ���������󡣶��ڻ������ͣ�final ʹ��ֵ�㶨���䣬�����ڶ������ã�final ʹ���ú㶨���䡣һ�����ñ���ʼ��ָ����ĳ���������Ͳ��ܸ�Ϊָ���������󡣵��ǣ��������ǿ����޸ĵģ�Java û���ṩ�����������Ϊ�����ķ�������������Լ���д��ﵽʹ����㶨�����Ч������һ����ͬ���������飬����Ҳ�Ƕ�����������չʾ�� final ���Ե�ʹ�ã�xxxxxxxxxx// reuse/FinalData.java// The effect of final on fieldsimport java.util.*; class Value { &nbsp; &nbsp;int i; // package access &nbsp; &nbsp;Value(int i) { &nbsp; &nbsp; &nbsp; &nbsp;this.i = i; &nbsp; }} public class FinalData { &nbsp; &nbsp;private static Random rand = new Random(47); &nbsp; &nbsp;private String id; &nbsp; &nbsp;public FinalData(String id) { &nbsp; &nbsp; &nbsp; &nbsp;this.id = id; &nbsp; } &nbsp; &nbsp;// Can be compile-time constants: &nbsp; &nbsp;private final int valueOne = 9; &nbsp; &nbsp;private static final int VALUE_TWO = 99; &nbsp; &nbsp;// Typical public constant: &nbsp; &nbsp;public static final int VALUE_THREE = 39; &nbsp; &nbsp;// Cannot be compile-time constants: &nbsp; &nbsp;private final int i4 = rand.nextInt(20); &nbsp; &nbsp;static final int INT_5 = rand.nextInt(20); &nbsp; &nbsp;private Value v1 = new Value(11); &nbsp; &nbsp;private final Value v2 = new Value(22); &nbsp; &nbsp;private static final Value VAL_3 = new Value(33); &nbsp; &nbsp;// Arrays: &nbsp; &nbsp;private final int[] a = {1, 2, 3, 4, 5, 6}; &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return id + \": \" + \"i4 = \" + i4 + \", INT_5 = \" + INT_5; &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;FinalData fd1 = new FinalData(\"fd1\"); &nbsp; &nbsp; &nbsp; &nbsp;//- fd1.valueOne++; // Error: can't change value &nbsp; &nbsp; &nbsp; &nbsp;fd1.v2.i++; // Object isn't constant &nbsp; &nbsp; &nbsp; &nbsp;fd1.v1 = new Value(9); // OK -- not final &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; fd1.a.length; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fd1.a[i]++; // Object isn't constant &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;//- fd1.v2 = new Value(0); // Error: Can't &nbsp; &nbsp; &nbsp; &nbsp;//- fd1.VAL_3 = new Value(1); // change reference &nbsp; &nbsp; &nbsp; &nbsp;//- fd1.a = new int[3]; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(fd1); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Creating new FinalData\"); &nbsp; &nbsp; &nbsp; &nbsp;FinalData fd2 = new FinalData(\"fd2\"); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(fd1); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(fd2); &nbsp; }}�����xxxxxxxxxxfd1: i4 = 15, INT_5 = 18Creating new FinalDatafd1: i4 = 15, INT_5 = 18fd2: i4 = 13, INT_5 = 18��Ϊ valueOne �� VALUE_TWO ���Ǵ��б���ʱֵ�� final �������ͣ����Ƕ�����������ʱ������û�ж������VALUE_THREE ��һ�ָ��ӵ��͵ĳ�������ķ�ʽ��public ��ζ�ſ����ڰ�����ʣ�static ǿ��ֻ��һ����final ˵����һ�����������չ��������к㶨��ʼֵ�� final static ����������������ʱ����������ȫ��ʹ�ô�д������֮�����»��߷ָ�����Դ�� C �����ж��峣���ķ�ʽ�������ǲ�����Ϊĳ���ݱ� final ���ξ���Ϊ�ڱ���ʱ����֪������ֵ���������е� i4 �� INT_5 ���Կ���������������ʱ�Żḳֵ�������ʾ������Ҳչʾ�˽� final ֵ����Ϊ static �ͷ� static �����𡣴�����ֻ�е�ֵ������ʱ����ʼ��ʱ�Ż����֣���Ϊ�������Ա���ʱ��ֵһ��ͬ�ʡ������ұ���ʱ��ֵ�������Ż�����ʧ���������г���ʱ���ܿ����������ע�⵽ fd1 �� fd2 �� i4 ֵ��ͬ���� INT_5 ��ֵ��û����Ϊ�����˵ڶ��� FinalData ������ı䣬������Ϊ���� static �ģ��ڼ���ʱ�Ѿ�����ʼ����������ÿ�δ����¶���ʱ����ʼ����v1 �� VAL_3 ����˵���� final ���õ����塣�������� main() ��������v2 �� final �Ĳ�����ζ���㲻���޸�����ֵ����Ϊ�������ã�����ֻ��˵��������ָ��һ���µĶ���������������ͬ�������壬����ֻ��������һ�����á����Ҳ�֪����ʲô������ʹ�������ñ�����Ϊ final��������������������Ϊ final û�������������� final ���á��հ� final�հ� final ָ����û�г�ʼ��ֵ�� final ���ԡ�������ȷ���հ� final ��ʹ��ǰ���뱻��ʼ������������ʹһ�����ÿ������� final ����ֵ��ͬ��Ҳ�ܱ������Ĳ����ԡ�xxxxxxxxxx// reuse/BlankFinal.java// \"Blank\" final fieldsclass Poppet { &nbsp; &nbsp;private int i; &nbsp; &nbsp;Poppet(int ii) { &nbsp; &nbsp; &nbsp; &nbsp;i = ii; &nbsp; }} public class BlankFinal { &nbsp; &nbsp;private final int i = 0; // Initialized final &nbsp; &nbsp;private final int j; // Blank final &nbsp; &nbsp;private final Poppet p; // Blank final reference &nbsp; &nbsp;// Blank finals MUST be initialized in constructor &nbsp; &nbsp;public BlankFinal() { &nbsp; &nbsp; &nbsp; &nbsp;j = 1; // Initialize blank final &nbsp; &nbsp; &nbsp; &nbsp;p = new Poppet(1); // Init blank final reference &nbsp; } &nbsp; &nbsp;public BlankFinal(int x) { &nbsp; &nbsp; &nbsp; &nbsp;j = x; // Initialize blank final &nbsp; &nbsp; &nbsp; &nbsp;p = new Poppet(x); // Init blank final reference &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;new BlankFinal(); &nbsp; &nbsp; &nbsp; &nbsp;new BlankFinal(47); &nbsp; }}������ڶ���ʱ����ÿ����������ִ�� final �����ĸ�ֵ�������Ᵽ֤�� final ������ʹ��ǰ�Ѿ�����ʼ������final �����ڲ����б��У�����������Ϊ final ��ζ���ڷ����в��ܸı����ָ��Ķ�������������xxxxxxxxxx// reuse/FinalArguments.java// Using \"final\" with method argumentsclass Gizmo { &nbsp; &nbsp;public void spin() { &nbsp; }} public class FinalArguments { &nbsp; &nbsp;void with(final Gizmo g) { &nbsp; &nbsp; &nbsp; &nbsp;//-g = new Gizmo(); // Illegal -- g is final &nbsp; } &nbsp; &nbsp;void without(Gizmo g) { &nbsp; &nbsp; &nbsp; &nbsp;g = new Gizmo(); // OK -- g is not final &nbsp; &nbsp; &nbsp; &nbsp;g.spin(); &nbsp; } &nbsp; &nbsp;//void f(final int i) { i++; } // Can't change &nbsp; &nbsp;// You can only read from a final primitive &nbsp; &nbsp;int g(final int i) { &nbsp; &nbsp; &nbsp; &nbsp;return i + 1; &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;FinalArguments bf = new FinalArguments(); &nbsp; &nbsp; &nbsp; &nbsp;bf.without(null); &nbsp; &nbsp; &nbsp; &nbsp;bf.with(null); &nbsp; }}���� f() �� g() չʾ�� final �������Ͳ�����ʹ���������ֻ�ܶ�ȡ�������޸Ĳ��������������Ҫ���ڴ������ݸ������ڲ��ࡣ�⽫�ڡ��ڲ��ࡰ�½�����⡣final ����ʹ�� final ������ԭ������������һ��ԭ���Ǹ�������������ֹ����ͨ����д�ı䷽������Ϊ�����ǳ��ڼ̳еĿ��ǣ�ȷ����������Ϊ������̳ж��ı䡣��ȥ����ʹ�� final �����ĵڶ���ԭ����Ч�ʡ������ڵ� Java ʵ���У������һ������ָ��Ϊ final������ͬ��������ѶԸ÷����ĵ���ת��Ϊ��Ƕ���á������������� final �����ĵ���ʱ���ͻ��С�ĵ�������ͨ�Ĳ��������ִ�з����ĵ��û��ƣ�������ѹջ�������������봦ִ�У�Ȼ�����ز�����ջ�еĲ��������մ�������ֵ�������÷�������ʵ�ʴ���ĸ�������������á��������˷������õĿ������������һ�������ܴ�������ͣ���Ҳ���Ϳ�������Ƕ������������������Ϊ��Ƕ���ô�����������߱������ڷ������ʱ������ˡ�������� Java �汾�У����������̽�⵽��Щ����������� hotspot �����������Ż�ȥ����ЩЧ�ʷ������͵���Ƕ���÷������кܳ�һ��ʱ�䣬ʹ�� final �����Ч�ʶ�����ֹ����Ӧ���ñ������� JVM �����������⣬ֻ����Ϊ����ȷ��ֹ��д����ʱ��ʹ�� final��final �� private�������е� private ��������ʽ��ָ��Ϊ final����Ϊ���ܷ��� private ���������Բ��ܸ�д�������Ը� private �������� final ���Σ����ǲ����ܸ�������������ĺ��塣����������������󣬵�����ͼ��дһ�� private ��������ʽ�� final �ģ�ʱ������ȥ��Ч�����ұ������������������Ϣ��xxxxxxxxxx// reuse/FinalOverridingIllusion.java// It only looks like you can override// a private or private final methodclass WithFinals { &nbsp; &nbsp;// Identical to \"private\" alone: &nbsp; &nbsp;private final void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"WithFinals.f()\"); &nbsp; } &nbsp; &nbsp;// Also automatically \"final\": &nbsp; &nbsp;private void g() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"WithFinals.g()\"); &nbsp; }} class OverridingPrivate extends WithFinals { &nbsp; &nbsp;private final void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"OverridingPrivate.f()\"); &nbsp; } &nbsp; &nbsp;private void g() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"OverridingPrivate.g()\"); &nbsp; }} class OverridingPrivate2 extends OverridingPrivate { &nbsp; &nbsp;public final void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"OverridingPrivate2.f()\"); &nbsp; } &nbsp; &nbsp;public void g() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"OverridingPrivate2.g()\"); &nbsp; }} public class FinalOverridingIllusion { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;OverridingPrivate2 op2 = new OverridingPrivate2(); &nbsp; &nbsp; &nbsp; &nbsp;op2.f(); &nbsp; &nbsp; &nbsp; &nbsp;op2.g(); &nbsp; &nbsp; &nbsp; &nbsp;// You can upcast: &nbsp; &nbsp; &nbsp; &nbsp;OverridingPrivate op = op2; &nbsp; &nbsp; &nbsp; &nbsp;// But you can't call the methods: &nbsp; &nbsp; &nbsp; &nbsp;//- op.f(); &nbsp; &nbsp; &nbsp; &nbsp;//- op.g(); &nbsp; &nbsp; &nbsp; &nbsp;// Same here: &nbsp; &nbsp; &nbsp; &nbsp;WithFinals wf = op2; &nbsp; &nbsp; &nbsp; &nbsp;//- wf.f(); &nbsp; &nbsp; &nbsp; &nbsp;//- wf.g(); &nbsp; }}�����xxxxxxxxxxOverridingPrivate2.f()OverridingPrivate2.g()&quot;��д&quot;ֻ�����ڷ����ǻ���Ľӿ�ʱ��Ҳ����˵�������ܽ�һ����������ת��Ϊ���ಢ������ͬ�ķ�������һ������һ�²����������һ�������� private �ģ����Ͳ��ǻ���ӿڵ�һ���֡���ֻ�����������ڲ��Ĵ��룬��ǡ������ͬ���������ѡ������������������������ͬ������������ public��protected �������Ȩ�޵ķ�������Щ����������еķ���û����ϵ����û�и�д������ֻ���ڴ����µķ������ѡ����� private �����޷�����������Ч���أ����˰����������е�һ���֣������κ����ﶼ����Ҫ���ǵ�����final ����˵һ������ final ��final �ؼ������ඨ��֮ǰ��������ζ�������ܱ��̳С�֮������ô��������Ϊ�����ƾ�����Զ����Ҫ�Ķ��������ǳ��ڰ�ȫ���ǲ�ϣ���������ࡣxxxxxxxxxx// reuse/Jurassic.java// Making an entire class finalclass SmallBrain {} final class Dinosaur { &nbsp; &nbsp;int i = 7; &nbsp; &nbsp;int j = 1; &nbsp; &nbsp;SmallBrain x = new SmallBrain(); &nbsp; &nbsp;void f() {}} //- class Further extends Dinosaur {}// error: Cannot extend final class 'Dinosaur'public class Jurassic { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Dinosaur n = new Dinosaur(); &nbsp; &nbsp; &nbsp; &nbsp;n.f(); &nbsp; &nbsp; &nbsp; &nbsp;n.i = 40; &nbsp; &nbsp; &nbsp; &nbsp;n.j++; &nbsp; }}final ������Կ��Ը��ݸ���ѡ���ǻ��� final����ͬ�������ڲ������Ƿ��� final ���ڲ� final ���ԡ�Ȼ�������� final ���ֹ�̳У��������еķ���������ʽ��ָ��Ϊ final������û�а취��д���ǡ�������� final ���еķ������� final ���η��������������κ����塣final �Ҹ��������ʱ��һ������ָ��Ϊ final ����ȥ�����ǵġ�����ܻ����û�˻Ḳд�Ǹ���������ʱ���ǶԵġ�����������ļ��衣ͨ����˵��Ԥ��һ������α������Ǻ����ѵģ��ر���ͨ���ࡣ�����һ������ָ��Ϊ final�����ܻ��ֹ��������Ա����Ŀ��ͨ���̳�����������࣬�����������Ϊ��û���뵽���������ַ�ʽʹ�á�Java ��׼������һ���ܺõ����ӡ������� Java 1.0/1.1 �� Vector �౻�㷺��ʹ�ã����Ҵ�Ч�ʿ��ǣ�������Ǹ����룩������������з���û�б�ָ��Ϊ final�����ܻ�������á��������뵽������ܻ�̳в���д��ôһ�������࣬�������������Ϊ��ô�������ʡ����������̵�ԭ�򡣵�һ��Stack �̳��� Vector������˵ Stack �Ǹ� Vector�������߼�����˵���ԡ�������ˣ�Java ���������Ȼ��ô�����������ַ�ʽ���� Stack ʱ������Ӧ����ʶ���� final ��������Լ�����ڶ���Vector �еĺܶ���Ҫ���������� addElement() �� elementAt() ��������ͬ���ġ��ڡ�������̡�һ���лῴͬ���ᵼ�ºܴ��ִ�п��������ܻ�Ĩɷ final �����ĺô������ǿ�˳���Ա��Զ�޷���ȷ�µ��Ż�Ӧ�÷����ںδ��Ĺ۵㡣��˱�׾�����ȴ������ÿ���˶�Ҫʹ�õı�׼���У�̫����ˡ����ҵ��ǣ��ִ� Java ������ ArrayList ������ Vector��������ΪҪ�����öࡣ���ҵ��ǣ���Ȼ�кܶ��´���ʹ�þɵļ�����⣬���оͰ��� Vector��Java 1.0/1.1 ��׼�������һ����Ҫ������ Hashtable�������� HashMap ȡ�������������κ� final �����������������ط�Ҳ�ᵽ�������Բ�ͬ�������ɲ�ͬ������Ƶġ�Hashtable �ͱ� Vector �еķ��������ö࣬������һ��֤�ݡ���������ʹ������˵������һ������Ӧ����˲��ʵ����顣���ֲ�������������û���Ҫ������Ĺ����������ǶԴֲڵ���ƺʹ������һ���̡����ʼ���ͼ��������ഫͳ�����У�����������ʱһ����ȫ�����ء����ų�ʼ����Ȼ�����ʼ���С�������ϸ������Щ���Եĳ�ʼ�����̣���ȷ�� statics ��ʼ����˳�򲻻�����鷳���� C++ �У����һ�� static ����ʹ����һ�� static������һ�� static ��û�г�ʼ�����ͻ�������⡣Java �в��������������⣬��Ϊ��������һ�ֲ�ͬ�ķ�ʽ���ء���Ϊ Java ������Զ������Լ��ػ�����׵öࡣ��סÿ����ı�����붼���������Լ��������ļ��С����ļ�ֻ����ʹ�ó������ʱ�Żᱻ���ء�һ�����˵����Ĵ������״�ʹ��ʱ���ء�����ͨ����ָ������ĵ�һ�����󣬻����Ƿ�������� static ���Ի򷽷���������Ҳ��һ�� static ������������ static �ؼ�������ʽ�ġ���ˣ�׼ȷ��˵��һ���൱������һ�� static ��Ա������ʱ���ͻᱻ���ء��״�ʹ��ʱ���� static ��ʼ������ʱ�����е� static ����� static ������ڼ���ʱ�����ı���˳�������ж����˳�����γ�ʼ����static ����ֻ����ʼ��һ�Ρ��̳кͳ�ʼ���˽�����̳����ڵ�������ʼ���������а����ģ��������Զ���������һ����ȫ���Եİ��ա�������������ӣ�xxxxxxxxxx// reuse/Beetle.java// The full process of initializationclass Insect { &nbsp; &nbsp;private int i = 9; &nbsp; &nbsp;protected int j; &nbsp; &nbsp;Insect() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"i = \" + i + \", j = \" + j); &nbsp; &nbsp; &nbsp; &nbsp;j = 39; &nbsp; } &nbsp; &nbsp;private static int x1 = printInit(\"static Insect.x1 initialized\"); &nbsp; &nbsp;static int printInit(String s) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(s); &nbsp; &nbsp; &nbsp; &nbsp;return 47; &nbsp; }} public class Beetle extends Insect { &nbsp; &nbsp;private int k = printInit(\"Beetle.k.initialized\"); &nbsp; &nbsp;public Beetle() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"k = \" + k); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"j = \" + j); &nbsp; } &nbsp; &nbsp;private static int x2 = printInit(\"static Beetle.x2 initialized\"); &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Beetle constructor\"); &nbsp; &nbsp; &nbsp; &nbsp;Beetle b = new Beetle(); &nbsp; }}�����xxxxxxxxxxstatic Insect.x1 initializedstatic Beetle.x2 initializedBeetle constructori = 9, j = 0Beetle.k initializedk = 47j = 39��ִ�� java Beetle�����Ȼ���ͼ���� Beetle ��� main() ������һ����̬���������������������ҳ� Beetle ��ı�����루����Ϊ Beetle.class ���ļ��У����ڼ��ع����У�������ע�⵽��һ�����࣬���Ǽ������ػ��ࡣ�����Ƿ񴴽��˻���Ķ��󣬻��඼�ᱻ���ء������Գ��԰Ѵ����������Ĵ���ע�͵�֤����㡣��������໹���������Ļ��࣬��ô�ڶ�������Ҳ�������أ��Դ����ơ��������������ࣨ�����и������� Insect���� static �ĳ�ʼ����ʼִ�У������������࣬�Դ����ơ�������Ҫ����Ϊ�������� static �ĳ�ʼ���������������Ա�Ƿ���ȷ�س�ʼ�������ˣ���Ҫ���඼������ϣ����Դ��������ˡ����ȣ������е����л������ͱ���������ΪĬ��ֵ���������ñ���Ϊ null ���� ����ͨ���������ڴ���Ϊ��������ֵһ�����ɵġ����Ż���û���Ĺ����������������Զ����õģ�������Ҳ����ʹ�� super ����ָ���Ļ��๹�������� Beetle �������еĵ�һ�������������๹�����������๹����һ������ͬ��˳������ͬ�Ĺ��̡������๹������ɺ�ʵ���������ı�˳���ʼ�������գ���������ʣ�ಿ�ֱ�ִ�С�����С���̳к���϶��Ǵ��������ʹ��������͡���Ͻ�����������Ϊ�����͵ײ�ʵ�ֵ�һ���֣��̳и��õ��ǽӿڡ�ʹ�ü̳�ʱ����������л���ӿڣ���˿�������ת��Ϊ���࣬����ڶ�̬������Ҫ������һ���㽫���������������������ʱ����ǿ���̳У����ڿ�ʼ���ʱ������ʹ����ϣ���ί�У���ֻ�е�ȷʵ��Ҫʱ��ʹ�ü̳С���ϸ�������ԡ����⣬ͨ���Գ�Ա����ʹ�ü̳еļ��ɣ�����������ʱ�ı��Ա�����ͺ���Ϊ����ˣ�����������ʱ�ı���϶������Ϊ�������һ��ϵͳʱ��Ŀ���Ƿ��ֻ򴴽�һϵ���࣬ÿ�������ض�����;�����ҼȲ�Ӧ̫�󣨰���̫�๦�����Ը��ã���Ҳ��Ӧ̫С���������������ܾ��޷�ʹ�ã��������Ʊ�ù��ڸ��ӣ�ͨ������������Ϊ��С�Ĳ��ֶ����Ӹ���Ķ���ͨ�����а����ġ�����ʼ���һ��ϵͳʱ����ס���򿪷���һ���������̣���������ѧϰ��������ʵ�飬����Ծ����ܶ���������Ȼ������Ŀ��ʼʱ��Ȼ�޷�֪�����еĴ𰸡��������Ŀ����һ���л��ģ������ŵ�����ȥ��������������Ϊ��Ħ���¥һ�����ټ�Ч�����ܻ�ø���ĳɹ��͸�Ѹ�ٵķ������̳к�������ǿ�������ִ�����ʵ����������������������������ߡ�&nbsp;�� 9 �� ��̬������������� �� Babbage ��������������������ֵ������У���ó���ȷ����𣿡� ���޷���������������ĸ����ϵ����� ���� Charles Babbage (1791 - 1871)��̬����������������У������ݳ���ͼ̳�֮��ĵ�������Ҫ���ԡ���̬�ṩ����һ��ά�ȵĽӿ���ʵ�ַ��룬�Խ�����ʲô����ô������̬�����ܸ��ƴ������֯����ߴ���Ŀɶ��ԣ������ܴ�������չ�Եĳ��򡪡����������������Ŀʱ����������������ʱ�����ԡ��������ĳ�����װͨ���ϲ���������Ϊ�������µ��������͡�����ʵ��ͨ����ϸ��˽�л��ѽӿ���ʵ�ַ��롣�������͵���֯���ƶ�����������̱�̱���������˵�����������⡣����̬����������֮�����ϡ�����һ���У��̳�������һ��������Ϊ�����������ͻ����Ļ������͡��������ܰѺܶ�������һ����������͵���ͬһ���ʹ��������һ�δ���Ϳ����޲������������в�ͬ���������ˡ���̬������������һ�����ͱ��ֳ����������͵�����ֻҪ��Щ����������һ�����ࡣ���������ǵ���ͨ���������ʱ���ɷ����Ĳ�ͬ��Ϊ���ֳ����ġ��ڱ����У�ͨ��һЩ�������򵥵����ӣ���Щ������ֻ�������������̬�йص���Ϊ�����㽫��ѧϰ��̬��Ҳ��Ϊ��̬�������ڰ�������ʱ����������ת�ͻع�����һ���У��㿴������ΰ�һ���������������������ͻ����Ļ������͡����ְ�һ���������õ������Ļ������õ�������Ϊ����ת�ͣ���Ϊ�̳�ͼ�л���һ�㶼λ�����Ϸ���ͬ����Ҳ��������������������з��������⡣��Ȼ�������Ӷ�Ҫ�����ַ���Note���������������ڰ��е�������һ�� Note ö���ࣺxxxxxxxxxx// polymorphism/music/Note.java// Notes to play on musical instrumentspackage polymorphism.music; public enum Note { &nbsp; &nbsp;MIDDLE_C, C_SHARP, B_FLAT; // Etc.}ö���Ѿ��ڡ��� 6 �³�ʼ����������һ���н��ܹ��ˡ����Wind ��һ�� Instrument����ˣ�Wind �̳� Instrument��xxxxxxxxxx// polymorphism/music/Instrument.javapackage polymorphism.music; class Instrument { &nbsp; &nbsp;public void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Instrument.play()\"); &nbsp; }} // polymorphism/music/Wind.javapackage polymorphism.music;// Wind objects are instruments// because they have the same interface:public class Wind extends Instrument { &nbsp; &nbsp;// Redefine interface method: &nbsp; &nbsp;@Override &nbsp; &nbsp;public void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Wind.play() \" + n); &nbsp; }}Music �ķ��� tune() ����һ�� Instrument ���ã�ͬʱҲ�����κ������� Instrument �������ã�xxxxxxxxxx// polymorphism/music/Music.java// Inheritance &amp; upcasting// {java polymorphism.music.Music}package polymorphism.music; public class Music { &nbsp; &nbsp;public static void tune(Instrument i) { &nbsp; &nbsp; &nbsp; &nbsp;// ... &nbsp; &nbsp; &nbsp; &nbsp;i.play(Note.MIDDLE_C); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Wind flute = new Wind(); &nbsp; &nbsp; &nbsp; &nbsp;tune(flute); // Upcasting &nbsp; }}�����xxxxxxxxxxWind.play() MIDDLE_C�� main() ���㿴���� tune() ����������һ�� Wind ���ã���û��������ת�����������������ġ��� Instrument �Ľӿ�һ�������� Wind �У���� Wind �̳��� Instrument���� Wind ����ת��Ϊ Instrument ���ܡ���С���ӿڣ�������� Instrument ��ȫ���ӿڸ��١�������������Music.java �������ƺ��е���֡�Ϊʲô�����˶��������ǵ����������أ�������ת��ʱ���ͻᷢ��������������ҿ�������� tune() ���ܵĲ�����һ�� Wind ���û��Ϊֱ�ۡ�������һ����Ҫ���⣺�������ô������ҪΪϵͳ�� Instrument ��ÿ�����Ͷ���дһ���µ� tune() ���������谴������������������ Stringed �� Brass ������ Instrument :xxxxxxxxxx// polymorphism/music/Music2.java// Overloading instead of upcasting// {java polymorphism.music.Music2}package polymorphism.music; class Stringed extends Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Stringed.play() \" + n); &nbsp; }} class Brass extends Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Brass.play() \" + n); &nbsp; }} public class Music2 { &nbsp; &nbsp;public static void tune(Wind i) { &nbsp; &nbsp; &nbsp; &nbsp;i.play(Note.MIDDLE_C); &nbsp; } &nbsp; &nbsp;public static void tune(Stringed i) { &nbsp; &nbsp; &nbsp; &nbsp;i.play(Note.MIDDLE_C); &nbsp; } &nbsp; &nbsp;public static void tune(Brass i) { &nbsp; &nbsp; &nbsp; &nbsp;i.play(Note.MIDDLE_C); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Wind flute = new Wind(); &nbsp; &nbsp; &nbsp; &nbsp;Stringed violin = new Stringed(); &nbsp; &nbsp; &nbsp; &nbsp;Brass frenchHorn = new Brass(); &nbsp; &nbsp; &nbsp; &nbsp;tune(flute); // No upcasting &nbsp; &nbsp; &nbsp; &nbsp;tune(violin); &nbsp; &nbsp; &nbsp; &nbsp;tune(frenchHorn); &nbsp; }}�����xxxxxxxxxxWind.play() MIDDLE_CStringed.play() MIDDLE_CBrass.play() MIDDLE_C�����е�ͨ��������һ����Ҫȱ�㣺����Ϊ���ӵ�ÿ���� Instrument ���д�ض��ķ���������ζ�ſ�ʼʱ����Ҫ����ı�̣������Ժ������������ tune() ���·����� Instrument ��������ʱ�����д����Ĺ���Ҫ�������ǵ��������������ĳ��������������Ҳ������ʾ�㣬���������͵������������̱�����Թ��������ֻдһ�������Ի�����Ϊ�����������ù����ĸ����������࣬�������ø�����Ҳ����˵��������������࣬��д�Ĵ���ֻ�����򽻵����᲻������أ������Ƕ�̬�������ġ����Ǵ󲿷�ӵ��������̱�̱����ĳ���Ա��Զ�̬��������ʽ�е�һЩ����ת�����г����ῴ�� Music.java ���ѵ㡣Wind.play() ���������������������ģ�Ȼ�����������ƺ���Ӧ�õó������Ľ�����۲� tune() ������xxxxxxxxxxpublic static void tune(Instrument i) { &nbsp; &nbsp;// ... &nbsp; &nbsp;i.play(Note.MIDDLE_C);}������һ�� Instrument ���á���ô�����������֪������� Instrument ����ָ����� Wind�������� Brass �� Stringed �أ��������޷���֪��Ϊ����������������⣬�б�Ҫ�о�һ����������⡣�������ð���һ���������ú�һ����������������������������󶨷����ڳ�������ǰ������еĻ����ɱ�������������ʵ�֣�������ǰ�ڰ�������ܴ���û����˵��������Ϊ��������������Բ���ѡ��Ĭ�ϵİ󶨷�ʽ�������� C �����о�ֻ��ǰ�ڰ���һ�ַ������á�����������������ĵط�������ǰ�ڰ󶨣���Ϊ������ֻ֪��һ�� Instrument ���ã����޷���֪����������ĸ���������������������ڰ�����ζ��������ʱ���ݶ�������ͽ��а󶨡����ڰ�Ҳ��Ϊ��̬��������ʱ������һ������ʵ���˺��ڰ󶨣��ͱ������ĳ�ֻ���������ʱ���ж϶�������ͣ��Ӷ�����ǡ���ķ�����Ҳ����˵����������Ȼ��֪����������ͣ����Ƿ������û������ҵ���ȷ�ķ����岢���á�ÿ�����Եĺ��ڰ󶨻��ƶ���ͬ�����ǿ����뵽��������һ������ĳ��������Ϣ��Java �г��� static �� final ������private ����Ҳ����ʽ�� final���⣬�������з������Ǻ��ڰ󶨡�����ζ��ͨ������£����ǲ���Ҫ�жϺ��ڰ��Ƿ�ᷢ���������Զ�������Ϊʲô��һ������ָ��Ϊ final ������ǰһ�������������Է�ֹ��������д��������Ҫ��һ������ǣ�����Ч�ء��ر��ˡ���̬�󶨣�����˵���߱���������Ҫ������ж�̬�󶨡�������ñ�����Ϊ final �������ɸ���Ч�Ĵ��롣Ȼ�����󲿷����������������Գ�����������ܴ���ʲô�ı䣬��������Ϊ�����ʹ�� final��������Ϊ���������ܶ�ʹ�á�������ȷ����Ϊһ������֪�� Java �����з�������ͨ�����ڰ���ʵ�ֶ�̬ʱ���Ϳ��Ա�дֻ�����򽻵��Ĵ��룬���Ҵ��������������˵���������ع��������߻���˵�������������һ����Ϣ���ö����Լ�����ȷ���¡�����������еľ�����������״ Shape��������Ӻ�ֱ�ۣ������ҵ��ǣ��������ó�ѧ��������Ϊ���������ֻ�ʺ�ͼ�λ�������ƣ�ʵ���ϲ�����������״�������У���һ�������Ϊ Shape �������ͬ���������ͷֱ��ǣ�Circle��Square��Triangle �ȵȡ��������֮���Ժ��ã�����Ϊ���ǿ���ֱ��˵��Բ(Circle)��һ����״(Shape)��������������⡣�̳�ͼչʾ������֮��Ĺ�ϵ������ת�;���������ô�򵥣�xxxxxxxxxxShape s = new Circle();��ᴴ��һ�� Circle �������ñ���ֵ�� Shape ���͵ı��� s���⿴�ƴ��󣨽�һ�����͸�ֵ����һ�����ͣ���Ȼ����û����ģ���˴Ӽ̳��Ͽ���ΪԲ(Circle)����һ����״(Shape)����˱������Ͽ��˸�ֵ��䣬û�б����������������һ�����෽�����ڸ����������ж�����д����xxxxxxxxxxs.draw()������ٴ���Ϊ Shape �� draw() ���������ã���Ϊ s ��һ�� Shape ���á�����������ô����֪��Ҫ�����������أ�Ȼ�������ں��ڰ󶨣���̬�������õ��� Circle �� draw() ������������ȷ�ġ������������΢��Щ��ͬ�����������Ǵ���һ���ɸ��õ� Shape ��⣬���� Shape Ϊ�����������ཨ���˹����ӿڡ������е���״�����Ա��滭�Ͳ�����xxxxxxxxxx// polymorphism/shape/Shape.javapackage polymorphism.shape; public class Shape { &nbsp; &nbsp;public void draw() {} &nbsp; &nbsp;public void erase() {}}������ͨ����д��Щ����Ϊÿ���������״�ṩ��һ�޶��ķ�����Ϊ��xxxxxxxxxx// polymorphism/shape/Circle.javapackage polymorphism.shape; public class Circle extends Shape { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void draw() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Circle.draw()\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void erase() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Circle.erase()\"); &nbsp; }} // polymorphism/shape/Square.javapackage polymorphism.shape; public class Square extends Shape { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void draw() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Square.draw()\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void erase() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Square.erase()\"); &nbsp; } } // polymorphism/shape/Triangle.javapackage polymorphism.shape; public class Triangle extends Shape { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void draw() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Triangle.draw()\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void erase() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Triangle.erase()\"); &nbsp; }}RandomShapes ��һ�ֹ�����ÿ�����ǵ��� get() ����ʱ���ͻ����һ��ָ����������� Shape ��������á�ע�⣬����ת�ͷ����� return ����У�ÿ�� return ���ȡ��һ��ָ��ĳ�� Circle��Square �� Triangle �����ã� �������� Shape ���ʹ� get() �������ͳ�ȥ��������ۺ�ʱ���� get() �������㶼�޷�֪�������������ʲô����Ϊ�����ǵõ�һ���򵥵� Shape ���ã�xxxxxxxxxx// polymorphism/shape/RandomShapes.java// A \"factory\" that randomly creates shapespackage polymorphism.shape;import java.util.*; public class RandomShapes { &nbsp; &nbsp;private Random rand = new Random(47); &nbsp; &nbsp;public Shape get() { &nbsp; &nbsp; &nbsp; &nbsp;switch(rand.nextInt(3)) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;default: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 0: return new Circle(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 1: return new Square(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 2: return new Triangle(); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public Shape[] array(int sz) { &nbsp; &nbsp; &nbsp; &nbsp;Shape[] shapes = new Shape[sz]; &nbsp; &nbsp; &nbsp; &nbsp;// Fill up the array with shapes: &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; shapes.length; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;shapes[i] = get(); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;return shapes; &nbsp; }}array() �������䲢����� Shape ���飬����ʹ���� for-in ����ʽ��xxxxxxxxxx// polymorphism/Shapes.java// Polymorphism in Javaimport polymorphism.shape.*; public class Shapes { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;RandomShapes gen = new RandomShapes(); &nbsp; &nbsp; &nbsp; &nbsp;// Make polymorphic method calls: &nbsp; &nbsp; &nbsp; &nbsp;for (Shape shape: gen.array(9)) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;shape.draw(); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxxTriangle.draw()Triangle.draw()Square.draw()Triangle.draw()Square.draw()Triangle.draw()Square.draw()Triangle.draw()Circle.draw()main() �����а�����һ�� Shape ������ɵ����飬����ÿ��Ԫ��ͨ������ RandomShapes ��� get() �������ɡ�������ֻ֪��ӵ��һЩ��״��������֮��һ����֪��������Ҳ����ˣ���Ȼ���������������Ϊÿ��Ԫ�ص��� draw() ����ʱ�������г���Ľ���п��Կ������������йص��ض���Ϊ�漣��ط����ˡ����������״��Ϊ���ô�����⣺�ڱ���ʱ������������Ҫ֪���κξ�����Ϣ�Խ�����ȷ�ĵ��á����жԷ��� draw() �ĵ��ö���ͨ����̬�󶨽��еġ�����չ�����������ǻ�ͷ���������������ӡ����ڶ�̬���ƣ��������ϵͳ�����������������ͣ�������Ҫ�޸� tune() ��������һ��������õ������������У����෽��������ѭ tune() ��ģ�ͣ�ֻ�����ӿ�ͨ�š������ĳ����ǿ���չ�ģ���Ϊ���Դ�ͨ�õĻ����������µ��������ͣ��Ӷ������µĹ��ܡ���Щ���ݻ���ӿڵķ�������Ҫ�Ķ��Ϳ���Ӧ�������ࡣ����һ�����������ӣ�����ڻ��������Ӹ���ķ�����������һЩ���࣬���ᷢ��ʲô�أ����е����඼���Ժ�ԭ�����������У�����Ҫ�Ķ� tune() ��������ʹ tune() �������������ĳ���ļ��У������� Instrument �ӿ����������µķ�����tune() ����Ҳ�����ٱ��������ȷ���С���������ͼ��ʵ�֣�xxxxxxxxxx// polymorphism/music3/Music3.java// An extensible program// {java polymorphism.music3.Music3}package polymorphism.music3;import polymorphism.music.Note; class Instrument { &nbsp; &nbsp;void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Instrument.play() \" + n); &nbsp; } &nbsp; &nbsp;String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Instrument\"; &nbsp; } &nbsp; &nbsp;void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting Instrument\"); &nbsp; }} class Wind extends Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Wind.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Wind\"; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting Wind\"); &nbsp; }} class Percussion extends Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Percussion.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Percussion\"; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting Percussion\"); &nbsp; }} class Stringed extends Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Stringed.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Stringed\"; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting Stringed\"); &nbsp; }} class Brass extends Wind { &nbsp; &nbsp;@Override &nbsp; &nbsp;void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Brass.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting Brass\"); &nbsp; }} class Woodwind extends Wind { &nbsp; &nbsp;@Override &nbsp; &nbsp;void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Woodwind.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Woodwind\"; &nbsp; }} public class Music3 { &nbsp; &nbsp;// Doesn't care about type, so new types &nbsp; &nbsp;// added to the system still work right: &nbsp; &nbsp;public static void tune(Instrument i) { &nbsp; &nbsp; &nbsp; &nbsp;// ... &nbsp; &nbsp; &nbsp; &nbsp;i.play(Note.MIDDLE_C); &nbsp; } &nbsp; &nbsp;public static void tuneAll(Instrument[] e) { &nbsp; &nbsp; &nbsp; &nbsp;for (Instrument i: e) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tune(i); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;// Upcasting during addition to the array: &nbsp; &nbsp; &nbsp; &nbsp;Instrument[] orchestra = { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Wind(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Percussion(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Stringed(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Brass(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Woodwind() &nbsp; &nbsp; &nbsp; }; &nbsp; &nbsp; &nbsp; &nbsp;tuneAll(orchestra); &nbsp; }}�����xxxxxxxxxxWind.play() MIDDLE_CPercussion.play() MIDDLE_CStringed.play() MIDDLE_CBrass.play() MIDDLE_CWoodwind.play() MIDDLE_C�·��� what() ����һ�������������� String ���ã�adjust() �ṩһЩ���������ķ������� main() �����У����� orchestra ��������Ԫ��ʱ��Ԫ�ػ��Զ�����ת��Ϊ Instrument��tune() �������Ժ�����Χ���д��뷢���ı仯����Ȼ�����������С������������ڴ���̬���ṩ�����ԡ������е��޸Ĳ����ƻ�������������Ӧ�ܵ�Ӱ��Ĳ��֡����仰˵����̬��һ����ı�������벻���������롱����Ҫ���������壺����д��˽�з���������������ͼ��������������xxxxxxxxxx// polymorphism/PrivateOverride.java// Trying to override a private method// {java polymorphism.PrivateOverride}package polymorphism; public class PrivateOverride { &nbsp; &nbsp;private void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"private f()\"); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;PrivateOverride po = new Derived(); &nbsp; &nbsp; &nbsp; &nbsp;po.f(); &nbsp; }} public Derived extends PrivateOverride { &nbsp; &nbsp;public void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"public f()\"); &nbsp; }}�����xxxxxxxxxxprivate f()�������������� public f()��Ȼ�� private ����Ҳ�� final �ģ�������������˵�����εġ���ˣ����� Derived �� f() ��һ��ȫ�µķ�������Ϊ����汾�� f() ������ Derived �����������������д������������ֻ�з� private �������ܱ���д�����ǵ�С����д private ���������󣬱������������������ᰴ������Ԥ�ڵ�ִ�С�Ϊ������������������еķ���������������� private ��������ͬ�����������ʹ���� @Override ע�⣬���ܼ������⣺xxxxxxxxxx// polymorphism/PrivateOverride2.java// Detecting a mistaken override using @Override// {WillNotCompile}package polymorphism; public class PrivateOverride2 { &nbsp; &nbsp;private void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"private f()\"); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;PrivateOverride2 po = new Derived2(); &nbsp; &nbsp; &nbsp; &nbsp;po.f(); &nbsp; }} class Derived2 extends PrivateOverride2 { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"public f()\"); &nbsp; }}������������Ϣ�ǣ�xxxxxxxxxxerror: method does not override orimplement a method from a supertype���壺�����뾲̬����һ��ѧ���˶�̬���Ϳ����Զ�̬��˼ά��ʽ����ÿ���¡�Ȼ����ֻ����ͨ�ķ������ÿ����Ƕ�̬�ġ����磬�����ֱ�ӷ���һ�����ԣ��÷��ʻ��ڱ���ʱ������xxxxxxxxxx// polymorphism/FieldAccess.java// Direct field access is determined at compile timeclass Super { &nbsp; &nbsp;public int field = 0; &nbsp; &nbsp;public int getField() { &nbsp; &nbsp; &nbsp; &nbsp;return field; &nbsp; }} class Sub extends Super { &nbsp; &nbsp;public int field = 1; &nbsp; &nbsp;@Override &nbsp; &nbsp;public int getField() { &nbsp; &nbsp; &nbsp; &nbsp;return field; &nbsp; } &nbsp; &nbsp;public int getSuperField() { &nbsp; &nbsp; &nbsp; &nbsp;return super.field; &nbsp; }} public class FieldAccess { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Super sup = new Sub(); // Upcast &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"sup.field = \" + sup.field + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\", sup.getField() = \" + sup.getField()); &nbsp; &nbsp; &nbsp; &nbsp;Sub sub = new Sub(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"sub.field = \" + sub.field + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\", sub.getField() = \" + sub.getField() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ \", sub.getSuperField() = \" + sub.getSuperField()) &nbsp; }}�����xxxxxxxxxxsup.field = 0, sup.getField() = 1sub.field = 1, sub.getField() = 1, sub.getSuperField() = 0�� Sub ��������ת��Ϊ Super ����ʱ���κ����Է��ʶ�����������������˲��Ƕ�̬�ġ�����������У�Super.field �� Sub.field �������˲�ͬ�Ĵ洢�ռ䣬��ˣ�Sub ʵ���ϰ�����������Ϊ field �����ԣ����Լ��ĺ����� Super �ġ�Ȼ���������� Sub �� field ʱ��Ĭ�ϵ� field ���Բ����� Super �汾�� field ���ԡ�Ϊ�˻�ȡ Super �� field ���ԣ���Ҫ��ʽ��ָ�� super.field�������⿴�����Ǹ�������������⣬ʵ���ϻ������ᷢ�������ȣ�ͨ���Ὣ���е����Զ�ָ��Ϊ private����˲���ֱ�ӷ������ǣ�ֻ��ͨ�����������ʡ����⣬�����Ҳ������������Ժ���������������ͬ�����֣��������������������һ�������Ǿ�̬(static)�ģ�������Ϊ�Ͳ����ж�̬�ԣ�xxxxxxxxxx// polymorphism/StaticPolymorphism.java// static methods are not polymorphicclass StaticSuper { &nbsp; &nbsp;public static String staticGet() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Base staticGet()\"; &nbsp; } &nbsp; &nbsp;public String dynamicGet() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Base dynamicGet()\"; &nbsp; }} class StaticSub extends StaticSuper { &nbsp; &nbsp;public static String staticGet() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Derived staticGet()\"; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String dynamicGet() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Derived dynamicGet()\"; &nbsp; }} public class StaticPolymorphism { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;StaticSuper sup = new StaticSub(); // Upcast &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(StaticSuper.staticGet()); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(sup.dynamicGet()); &nbsp; }}�����xxxxxxxxxxBase staticGet()Derived dynamicGet()��̬�ķ���ֻ����������뵥���Ķ����޹ء��������Ͷ�̬ͨ������������ͬ���������͵ķ��������漰��̬ʱҲ����ˡ����ܹ����������ж�̬�ԣ�����ʵ�����Ǿ�̬������������ʽ�����ģ����������⹹�����ڸ��Ӳ�νṹ��������̬���Ƿǳ���Ҫ�ġ����������԰��������һЩ���������š�����������˳���ڡ���ʼ�����������͡����á��������Ѿ��򵥵ؽ��ܹ��������ĵ���˳�򣬵���ʱ��û�н��ܶ�̬����������Ĺ���������ܻ���û���Ĺ���������ʼ�����Զ����̳в�νṹ���ƣ����ÿ������Ĺ��������ᱻ���õ�����ô����������ģ���Ϊ������������������񣺼������Ƿ���ȷ�ع��졣��������ͨ������Ϊ private�������ٶ�������ֻ�ܷ����Լ��ĳ�Ա�����ܷ��ʻ���ĳ�Ա��ֻ�л���Ĺ�����ӵ��ǡ����֪ʶ��Ȩ������ʼ��������Ԫ�ء���ˣ�����õ������й�����������Ͳ��ܹ��������Ķ�������Ǳ�����ǿ��ÿ�������ಿ�ֱ�����ù�������ԭ�������������Ĺ�����������û����ʽ�ص��û��๹�������������ͻ�ĬĬ�ص����޲ι����������û���޲ι��������������ͻᱨ���������в���������ʱ�����������Զ��ϳ�һ���޲ι������������������չʾ����ϡ��̳кͶ�̬�ڹ���˳���ϵ����ã�xxxxxxxxxx// polymorphism/Sandwich.java// Order of constructor calls// {java polymorphism.Sandwich}package polymorphism; class Meal { &nbsp; &nbsp;Meal() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Meal()\"); &nbsp; }} class Bread { &nbsp; &nbsp;Bread() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Bread()\"); &nbsp; }} class Cheese { &nbsp; &nbsp;Cheese() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Cheese()\"); &nbsp; }} class Lettuce { &nbsp; &nbsp;Lettuce() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Lettuce()\"); &nbsp; }} class Lunch extends Meal { &nbsp; &nbsp;Lunch() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Lunch()\"); &nbsp; }} class PortableLunch extends Lunch { &nbsp; &nbsp;PortableLunch() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"PortableLunch()\"); &nbsp; }} public class Sandwich extends PortableLunch { &nbsp; &nbsp;private Bread b = new Bread(); &nbsp; &nbsp;private Cheese c = new Cheese(); &nbsp; &nbsp;private Lettuce l = new Lettuce(); &nbsp; &nbsp;public Sandwich() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Sandwich()\"); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;new Sandwich(); &nbsp; }}�����xxxxxxxxxxMeal()Lunch()PortableLunch()Bread()Cheese()Lettuce()Sandwich()��������������ഴ����һ�����ӵ��ࡣÿ���඼�ڹ������������Լ�����Ҫ������ Sandwich������ӳ������̳У�������� Object �Ļ��������Ĳ㣩��������������Ա�����Ӵ��� Sandwich ���������п��Կ�������Ĺ���������˳�����£����๹���������á���������ظ��ݹ飬ֱ��������Ĺ����������ã�Ȼ�������������࣬�Դ����ƣ�ֱ����ײ�������๹���������á�������˳���ʼ����Ա�����յ���������Ĺ��������������ĵ���˳�����Ҫ����ʹ�ü̳�ʱ�����Ѿ�֪���˻����һ�У������Է��ʻ��������� public �� protected �ĳ�Ա������ζ�����������п��Լٶ����еĻ����Ա������Ч�ġ���һ����׼�����У����춯���Ѿ��������������������ֵ����г�Ա���Ѿ������á��ڹ������б���ȷ�����еĳ�Ա���Ѿ������ꡣΨһ�ܱ�֤���ķ����������ȵ��û���Ĺ����������ţ���������Ĺ������У���������Է��ʵĻ����Ա���Ѿ���ʼ������һ���ڹ���������֪�����г�Ա������Ч�������ǣ����ۺ�ʱ�п��ܵĻ�����Ӧ�������г�Ա����ͨ����Ͻ������������У����崦��ʼ�����ǣ����磬�����е� b��c �� l���������ѭ����ʵ�����Ϳ��԰���ȷ�����еĻ����Ա�͵�ǰ����ĳ�Ա�����Ѿ���ʼ�������ҵ��ǣ��ⲻ�ܴ����������������һ�ڻῴ�����̳к�������ʹ����Ϻͼ̳д�������ʱ���󲿷�ʱ������������������Ӷ���ͨ�������������ռ������������������������⣬��ô�������ĵ�Ϊ���ഴ��һ�� dispose() �����������õ�����ѡ������ƣ������ʹ�ø��õ����ƣ������ڼ̳У������������������������Ļ����ͱ���������������д dispose() ����������д dispose() ����ʱ���ǵõ��û���� dispose() �������������������������ᷢ����xxxxxxxxxx// polymorphism/Frog.java// Cleanup and inheritance// {java polymorphism.Frog}package polymorphism; class Characteristic { &nbsp; &nbsp;private String s; &nbsp; &nbsp;Characteristic(String s) { &nbsp; &nbsp; &nbsp; &nbsp;this.s = s; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Creating Characteristic \" + s); &nbsp; } &nbsp; &nbsp;protected void dispose() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"disposing Characteristic \" + s); &nbsp; }} class Description { &nbsp; &nbsp;private String s; &nbsp; &nbsp;Description(String s) { &nbsp; &nbsp; &nbsp; &nbsp;this.s = s; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Creating Description \" + s); &nbsp; } &nbsp; &nbsp;protected void dispose() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"disposing Description \" + s); &nbsp; }} class LivingCreature { &nbsp; &nbsp;private Characteristic p = new Characteristic(\"is alive\"); &nbsp; &nbsp;private Description t = new Description(\"Basic Living Creature\"); &nbsp; &nbsp;LivingCreature() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"LivingCreature()\"); &nbsp; } &nbsp; &nbsp;protected void dispose() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"LivingCreature dispose\"); &nbsp; &nbsp; &nbsp; &nbsp;t.dispose(); &nbsp; &nbsp; &nbsp; &nbsp;p.dispose(); &nbsp; }} class Animal extends LivingCreature { &nbsp; &nbsp;private Characteristic p = new Characteristic(\"has heart\"); &nbsp; &nbsp;private Description t = new Description(\"Animal not Vegetable\"); &nbsp; &nbsp;Animal() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Animal()\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;protected void dispose() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Animal dispose\"); &nbsp; &nbsp; &nbsp; &nbsp;t.dispose(); &nbsp; &nbsp; &nbsp; &nbsp;p.dispose(); &nbsp; &nbsp; &nbsp; &nbsp;super.dispose(); &nbsp; }} class Amphibian extends Animal { &nbsp; &nbsp;private Characteristic p = new Characteristic(\"can live in water\"); &nbsp; &nbsp;private Description t = new Description(\"Both water and land\"); &nbsp; &nbsp;Amphibian() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Amphibian()\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;protected void dispose() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Amphibian dispose\"); &nbsp; &nbsp; &nbsp; &nbsp;t.dispose(); &nbsp; &nbsp; &nbsp; &nbsp;p.dispose(); &nbsp; &nbsp; &nbsp; &nbsp;super.dispose(); &nbsp; }} public class Frog extends Amphibian { &nbsp; &nbsp;private Characteristic p = new Characteristic(\"Croaks\"); &nbsp; &nbsp;private Description t = new Description(\"Eats Bugs\"); &nbsp; &nbsp;public Frog() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Frog()\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;protected void dispose() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Frog dispose\"); &nbsp; &nbsp; &nbsp; &nbsp;t.dispose(); &nbsp; &nbsp; &nbsp; &nbsp;p.dispose(); &nbsp; &nbsp; &nbsp; &nbsp;super.dispose(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Frog frog = new Frog(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Bye!\"); &nbsp; &nbsp; &nbsp; &nbsp;frog.dispose(); &nbsp; }}�����xxxxxxxxxxCreating Characteristic is aliveCreating Description Basic Living CreatureLivingCreature()Creating Characteristiv has heartCreating Description Animal not VegetableAnimal()Creating Characteristic can live in waterCreating Description Both water and landAmphibian()Creating Characteristic CroaksCreating Description Eats BugsFrog()Bye!Frog disposedisposing Description Eats Bugsdisposing Characteristic CroaksAmphibian disposedisposing Description Both wanter and landdisposing Characteristic can live in waterAnimal disposedisposing Description Animal not Vegetabledisposing Characteristic has heartLivingCreature disposedisposing Description Basic Living Creaturedisposing Characteristic is alive�㼶�ṹ�е�ÿ���඼�� Characteristic �� Description �������͵ĳ�Ա�������Ǳ���ñ����١����ٵ�˳��Ӧ�����ʼ����˳���෴���Է�һ������������һ�����󡣶���������˵������ζ����������˳���෴����Ϊ�����ǰ�������˳���ʼ���ģ������ڻ��ࣨ��ѭ C++ ������������ʽ�������Ƚ��������������������Ȼ����ǻ����������������Ϊ��������������ܵ��û����һЩ���������Ի��������ʱ�ô����ܹ���ر����١������ʾ�ˣ�Frog ��������в��ֶ��ǰ��մ������������ٵġ�����ͨ�����ؽ�����������������һ��Ҫʱ���͵ý���С�ĵ�ִ�С�Frog ����ӵ���Լ��ĳ�Ա��������������Щ��Ա���󣬲���֪�������ܴ���ã�������֪����ʱ���� dispose() ������Ȼ����һ��ĳ����Ա��������һ������������ʱ������ͱ�ø����ˣ�����ֻ�Ǽ򵥵ص��� dispose()�����Ҳ���ͱ���ʹ�����ü�����������Ȼ�����Ź�������Ķ������������£�xxxxxxxxxx// polymorphism/ReferenceCounting.java// Cleaning up shared member objectsclass Shared { &nbsp; &nbsp;private int refcount = 0; &nbsp; &nbsp;private static long counter = 0; &nbsp; &nbsp;private final long id = counter++; &nbsp; &nbsp;Shared() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Creating \" + this); &nbsp; } &nbsp; &nbsp;public void addRef() { &nbsp; &nbsp; &nbsp; &nbsp;refcount++; &nbsp; } &nbsp; &nbsp;protected void dispose() { &nbsp; &nbsp; &nbsp; &nbsp;if (--refcount == 0) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Disposing \" + this); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Shared \" + id; &nbsp; }} class Composing { &nbsp; &nbsp;private Shared shared; &nbsp; &nbsp;private static long counter = 0; &nbsp; &nbsp;private final long id = counter++; &nbsp; &nbsp;Composing(Shared shared) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Creating \" + this); &nbsp; &nbsp; &nbsp; &nbsp;this.shared = shared; &nbsp; &nbsp; &nbsp; &nbsp;this.shared.addRef(); &nbsp; } &nbsp; &nbsp;protected void dispose() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"disposing \" + this); &nbsp; &nbsp; &nbsp; &nbsp;shared.dispose(); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Composing \" + id; &nbsp; }} public class ReferenceCounting { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Shared shared = new Shared(); &nbsp; &nbsp; &nbsp; &nbsp;Composing[] composing = { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Composing(shared), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Composing(shared), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Composing(shared), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Composing(shared), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Composing(shared), &nbsp; &nbsp; &nbsp; }; &nbsp; &nbsp; &nbsp; &nbsp;for (Composing c: composing) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c.dispose(); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxxCreating Shared 0Creating Composing 0Creating Composing 1Creating Composing 2Creating Composing 3Creating Composing 4disposing Composing 0disposing Composing 1disposing Composing 2disposing Composing 3disposing Composing 4Disposing Shared 0static long counter ������������ Shared ʵ�����������ṩ�� id ��ֵ��counter �������� long ������ int���Է��������ֻ�Ǹ�����ʵ�������ڱ��������ʾ����counter �����������id �� final �ģ���Ϊ����ֵ�ڳ�ʼ��ʱȷ����Ӧ�ñ仯���ڽ�һ�� shared ������������ʱ�������ס���� addRef()���� dispose() �������������������ȷ���ں�ʱ������ִ������������ʹ�����ּ�����Ҫ�ӱ�ϸ�ģ�����������ڹ�����Ҫ�������Ķ��󣬾�û��̫��ѡ���ˡ��������ڲ���̬��������Ϊ���������õĲ�νṹ������һ������������ڹ������е��������ڹ���Ķ���Ķ�̬�󶨷������ᷢ��ʲô�أ�����ͨ�ķ����У���̬�󶨵ĵ�����������ʱ�����ģ���Ϊ����֪�������ڷ������ڵ��໹����������ࡣ����ڹ������е����˶�̬�󶨷������ͻ��õ��Ǹ���������д���塣Ȼ�������õĽ������Ԥ����Ϊ����д�ķ����ڶ�����ȫ�������֮ǰ�Ѿ������ã���ʹ��һЩ bug �����Σ����Է��֡��Ӹ����Ͻ����������Ĺ������Ǵ��������Ⲣ����ƽ���Ĺ��������ڹ������ڲ��������������ֻ�ǲ����γɡ���ֻ֪����������Ѿ���ʼ�������������ֻ�ǹ����������е�һ�����裬�ҹ���Ķ������������Ǵӹ��������������������ģ���ô���������ڵ�ǰ������������ʱ��û�г�ʼ����Ȼ����һ����̬�󶨵ķ��������������뵽�̳в�νṹ�У������Ե���������ķ�����������ڹ���������ô�����Ϳ��ܵ���һ���������÷������ݵĳ�Ա���ܻ�û�г�ʼ��������϶���������ѡ���������չʾ��������⣺xxxxxxxxxx// polymorphism/PolyConstructors.java// Constructors and polymorphism// don't produce what you might expectclass Glyph { &nbsp; &nbsp;void draw() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Glyph.draw()\"); &nbsp; } &nbsp; &nbsp;Glyph() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Glyph() before draw()\"); &nbsp; &nbsp; &nbsp; &nbsp;draw(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Glyph() after draw()\"); &nbsp; }} class RoundGlyph extends Glyph { &nbsp; &nbsp;private int radius = 1; &nbsp; &nbsp;RoundGlyph(int r) { &nbsp; &nbsp; &nbsp; &nbsp;radius = r; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"RoundGlyph.RoundGlyph(), radius = \" + radius); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;void draw() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"RoundGlyph.draw(), radius = \" + radius); &nbsp; }} public class PolyConstructors { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;new RoundGlyph(5); &nbsp; }}�����xxxxxxxxxxGlyph() before draw()RoundGlyph.draw(), radius = 0Glyph() after draw()RoundGlyph.RoundGlyph(), radius = 5Glyph �� draw() �����Ϊ����д���� RoundGlyph �����������д������ Glyph �Ĺ������������������������������ RoundGlyph �� draw() �������⿴�����������ǵ�Ŀ�ġ��������������� Glyph ������������ draw() ʱ��radius ��ֵ����Ĭ�ϳ�ʼֵ 1 ���� 0������ܻᵼ������Ļ��ֻ����һ�����ɴ�ʲô����������������ֻ�ܸɵ��ۣ���ͼ�ҵ����򲻹�����ԭ��ǰһС�������ĳ�ʼ��˳�򲢲�ʮ���������������ǽ�����ŵĹؼ����ڡ���ʼ����ʵ�ʹ����ǣ��������·���ǰ�����������Ĵ洢�ռ�ᱻ��ʼ��Ϊ������ 0����ǰ�������û��๹��������ʱ������д��� draw() �������ǵģ��ڵ��� RoundGraph ������֮ǰ���ã����ɲ��� 1 ��֪��radius ��ֵΪ 0��������˳���ʼ����Ա�����յ���������Ĺ���������ô���и��ŵ㣺�����������ٳ�ʼ��Ϊ 0����ĳЩ�������������� 0 �ȼ۵�ֵ���������ǽ��������������������ͨ�����Ƕ�����еĶ������ã������� null��������ǳ�ʼ�������ã��ͻ�������ʱ�����쳣���۲����������ͻᷢ���������ﶼ�� 0����һ���棬Ӧ���������������߼����������Ѿ����÷ǳ�������Ȼ����Ϊ�Բ���˼��Ĵ��ˣ�������Ҳû�б�����C++ ����������»�������Ӻ�������Ϊ������������ bug �����ױ����ԣ���Ҫ���ܳ�ʱ����ܷ��֡���ˣ���д��������һ�����ù淶���������ٵ����ö����������״̬������п��ܵĻ���������Ҫ�������е��κη������ڹ�������Ψһ�ܰ�ȫ���õ�ֻ�л���� final ���������� private �����������Զ����� final������Щ�������ܱ���д����˲���������벻���Ľ����������޷���Զ��ѭ�����淶����Ӧ�ó�����Ŭ����Э�䷵������Java 5 ��������Э�䷵�����ͣ����ʾ������ı���д�������Է��ػ��෽���������͵��������ͣ�xxxxxxxxxx// polymorphism/CovariantReturn.javaclass Grain { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Grain\"; &nbsp; }} class Wheat extends Grain { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Wheat\"; &nbsp; }} class Mill { &nbsp; &nbsp;Grain process() { &nbsp; &nbsp; &nbsp; &nbsp;return new Grain(); &nbsp; }} class WheatMill extends Mill { &nbsp; &nbsp;@Override &nbsp; &nbsp;Wheat process() { &nbsp; &nbsp; &nbsp; &nbsp;return new Wheat(); &nbsp; }} public class CovariantReturn { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Mill m = new Mill(); &nbsp; &nbsp; &nbsp; &nbsp;Grain g = m.process(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(g); &nbsp; &nbsp; &nbsp; &nbsp;m = new WheatMill(); &nbsp; &nbsp; &nbsp; &nbsp;g = m.process(); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(g); &nbsp; }}�����xxxxxxxxxxGrainWheat�ؼ��������� Java 5 ֮ǰ�İ汾ǿ��Ҫ����д�� process() �������뷵�� Grain ������ Wheat����ʹ Wheat ������ Grain�����ҲӦ����һ�ֺϷ��ķ������͡�Э�䷵�������������ظ������ Wheat ���͡�ʹ�ü̳����ѧϰ����̬֮��һ�п��ƶ����Ա��̳У���Ϊ��̬���������Ĺ��ߡ�������ƴ�����������ʵ�ϣ�������������ഴ����������ѡ��̳еĻ����������Ī���ĸ��ӡ����õķ���������ѡ����ϣ��ر��ǲ�֪����ʹ�����ַ���ʱ����ϲ���ǿ������Ǽ̳в�νṹ��������ϸ�������Ϊ���Զ�̬��ѡ�����ͣ����ѡ����Ӧ����Ϊ�������̳�Ҫ������ڱ���ʱ֪��ȷ�����͡���������˵������㣺xxxxxxxxxx// polymorphism/Transmogrify.java// Dynamically changing the behavior of an object// via composition (the \"State\" design pattern)class Actor { &nbsp; &nbsp;public void act() {}} class HappyActor extends Actor { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void act() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"HappyActor\"); &nbsp; }} class SadActor extends Actor { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void act() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"SadActor\"); &nbsp; }} class Stage { &nbsp; &nbsp;private Actor actor = new HappyActor(); &nbsp; &nbsp;public void change() { &nbsp; &nbsp; &nbsp; &nbsp;actor = new SadActor(); &nbsp; } &nbsp; &nbsp;public void performPlay() { &nbsp; &nbsp; &nbsp; &nbsp;actor.act(); &nbsp; }} public class Transmogrify { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Stage stage = new Stage(); &nbsp; &nbsp; &nbsp; &nbsp;stage.performPlay(); &nbsp; &nbsp; &nbsp; &nbsp;stage.change(); &nbsp; &nbsp; &nbsp; &nbsp;stage.performPlay(); &nbsp; }}�����xxxxxxxxxxHappyActorSadActorStage �����а����� Actor ���ã������ñ���ʼ��Ϊָ��һ�� HappyActor ��������ζ�� performPlay() �����һ��������Ϊ�����Ǽ�Ȼ���ÿ���������ʱ��������ͬ�Ķ���󶨣���ô���Ϳ��Ա��滻�ɶ� SadActor �����ã�performPlay() ����Ϊ��֮�ı䡣������ͻ��������ʱ�Ķ�̬����ԣ��ⱻ��Ϊ״̬ģʽ������֮�෴�����ǲ���������ʱ�����̳в�ͬ�Ķ������ڱ���ʱ����ȫȷ�������ˡ���һ��ͨ��׼��ʹ�ü̳б�����Ϊ�Ĳ��죬ʹ�����Ա���״̬�ı仯�����ϸ������У����߶��õ��ˡ�ͨ���̳еĵ���������ͬ���� act() �����б����˲�ͬ����Ϊ��Stage ͨ�����ʹ�Լ���״̬�����仯������״̬�ĸı��������Ϊ�ĸı䡣��� vs ��չ���á����⡱�ķ�ʽ�����̳в�νṹ����ȥ���������ķ�������ֻ�л���ķ����������������б���д��������ͼ�������ⱻ��������ġ�is - a&quot;��ϵ����Ϊ��Ľӿ��Ѿ�ȷ��������ʲô���̳п���ȷ���κ������඼ӵ�л���Ľӿڣ����Բ����١������ͼ����ô���������ཫֻӵ�л���Ľӿڡ�����������ζ�����������������������࣬��ʹ������ʱ����ȫ����Ҫ֪����Щ�������Ϣ��Ҳ����˵��������Խ������ⷢ�͸����������Ϣ����Ϊ���Ǿ�����ȫ��ͬ�Ľӿڡ�ֻ�轫����������ת�ͣ���Ҫ��ע����ľ������͡�����һ�ж�����ͨ����̬�����������ַ�ʽ˼�����ƺ�ֻ�д���ġ�is - a����ϵ����Ψһ���ǵ������������κ����ֻ�ᵼ�»�����ע��ʧ�ܡ�����ʵҲ�Ǹ����塣һ�������ַ�ʽ��ʼ˼�����ͻ�ת�����ּ̳���չ�ӿڣ��ź����ǣ�extends �ؼ����ƺ�����������ô�������ǽ���ض��������������������Գ�Ϊ��is - like - a�� ��ϵ����Ϊ����������ǻ��ࡪ����������ͬ�Ļ����ӿڣ�����������Ҫ���ⷽ��ʵ�ֵ��������ԣ���Ȼ����һ�����������ǵķ������������������������Ҳ����ȱ�㡣�������нӿڵ���չ�����ڻ����в����ڣ�����ͨ��������ʵ���Щ��չ�ӿڣ������һ������ת�ͣ��Ͳ���ͨ�����������Щ�·��������������ת�ͣ��Ͳ�������������⡣����ͨ������£�������Ҫ���²��������ȷ�����ͣ��Ӷ��ܹ����ʸ������е���չ��������һ��˵�����������㡣����ת��������ʱ������Ϣ��������ת�ͣ��ڼ̳в���������ƶ����ᶪʧ�����������Ϣ����ôΪ�����»�ȡ������Ϣ������Ҫ�ڼ̳в���������ƶ���ʹ������ת��������ת����Զ�ǰ�ȫ�ģ���Ϊ���಻����б����������Ľӿڡ���ˣ�ÿ�����͸�����ӿڵ���Ϣ���ܱ����ա����Ƕ�������ת�ͣ����޷�֪��һ����״��Բ�����п����������Ρ������λ�����һЩ���͡�Ϊ�˽��������⣬�������ĳ�ַ���ȷ������ת������ȷ�ģ���ֹ����ת�͵�һ���������ͣ��������Ͷ����޷����յ���Ϣ����ô���ǲ���ȫ�ġ���ĳЩ�����У��� C++��������ִ��һ������Ĳ�������ð�ȫ������ת�ͣ������� Java �У�ÿ��ת�Ͷ��ᱻ��飡���Լ�ʹֻ�ǽ���һ����ͨ�ļ�������ʽ������ת����������ʱ���ת���Իᱻ��飬��ȷ������ȷ��ϣ�����������͡�������ǣ��ͻ�õ� ClassCastException ����ת���쳣��������������ʱ������͵���Ϊ��������ʱ������Ϣ����������չʾ�� RTTI ����Ϊ��xxxxxxxxxx// polymorphism/RTTI.java// Downcasting &amp; Runtime type information (RTTI)// {ThrowsException}class Useful { &nbsp; &nbsp;public void f() {} &nbsp; &nbsp;public void g() {}} class MoreUseful extends Useful { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void f() {} &nbsp; &nbsp;@Override &nbsp; &nbsp;public void g() {} &nbsp; &nbsp;public void u() {} &nbsp; &nbsp;public void v() {} &nbsp; &nbsp;public void w() {}} public class RTTI { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Useful[] x = { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Useful(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new MoreUseful() &nbsp; &nbsp; &nbsp; }; &nbsp; &nbsp; &nbsp; &nbsp;x[0].f(); &nbsp; &nbsp; &nbsp; &nbsp;x[1].g(); &nbsp; &nbsp; &nbsp; &nbsp;// Compile time: method not found in Useful: &nbsp; &nbsp; &nbsp; &nbsp;//- x[1].u(); &nbsp; &nbsp; &nbsp; ((MoreUseful) x[1]).u(); // Downcast/RTTI &nbsp; &nbsp; &nbsp; ((MoreUseful) x[0]).u(); // Exception thrown &nbsp; }}�����xxxxxxxxxxException in thread \"main\"java.lang.ClassCastException: Useful cannot be cast toMoreUsefulat RTTI.main����ǰ����ͼ��ʾ��MoreUseful ��չ�� Useful �Ľӿڡ��� MoreUseful Ҳ�̳��� Useful����������������ת��Ϊ Useful���� main() �����п��Կ�����������ķ�������Ϊ���������� Useful ���ͣ����Զ����Ƕ����Ե��� f() �� g() �����������ͼ���� u() ������ֻ������ MoreUseful �У����ͻ�õ�����ʱ������Ϣ��Ϊ�˷��� MoreUseful �������չ�ӿڣ��͵ó�������ת�͡����ת��Ϊ��ȷ�����ͣ���ת�ͳɹ������򣬾ͻ�õ� ClassCastException �쳣���㲻��Ϊ����쳣��д�κ�������룬��Ϊ��ָ���˳���Ա�ڳ�����κεط������ܷ��Ĵ���{ThrowsException} ע�ͱ�ǩ��֪����Ĺ���ϵͳ�������г���ʱ��Ԥ���׳�һ���쳣��RTTI �����������򵥵�ת�͡����磬�����ṩ��һ�ַ�����ʹ���������ͼ����ת��ǰ�����Ҫ���������͡���������Ϣ��һ���л���ϸ��������ʱ������Ϣ�ķ������档����С����̬��ζ�š���ͬ����ʽ����������������У����ǳ��дӻ���̳ж�������ͬ�ӿں�ʹ�øýӿڵĲ�ͬ��ʽ����ͬ�汾�Ķ�̬�󶨷������ڱ����У�����Կ����������ʹ�����ݳ���ͼ̳У��Ͳ�������������������̬�����ӡ���̬��һ�ֲ��ܵ������������ԣ������� switch �������������ֻ����Ϊ���ϵȫ���е�һ���֣�����������Эͬ������Ϊ���ڳ�������Ч��ʹ�ö�̬�����������ļ������ͱ�����չ�Լ��ı����Ұ������ֻ������һ���еĳ�Ա����Ϣ����Ҫ������֮��Ĺ�ͬ���Ժ�����֮��Ĺ�ϵ����������Ҫ�ܴ��Ŭ����������ô����ֵ�õġ����ܴ�������ĳ��򿪷������õĴ�����֯����չ�Ը��õĳ���͸���ά���Ĵ��롣���Ǽ�ס����̬���ܱ����á���ϸ����������ȷ����̬ȷʵ�ܴ����ô���&nbsp;�� 10 �� �ӿ��ӿںͳ������ṩ��һ�ֽ��ӿ���ʵ�ַ���ĸ��ӽṹ���ķ��������ֻ����ڱ�������в����������� C++ ֻ�����ָ����м�ӵ�֧�֡����� Java �д�����Щ�ؼ��֣�˵����Щ˼�����Ҫ��Java Ϊ�����ṩ��ֱ��֧�֡����ȣ����ǽ�ѧϰ�����࣬һ�ֽ�����ͨ��ͽӿ�֮��������ֶΡ�������ĵ�һ�뷨�Ǵ����ӿڣ����Ƕ��ڹ����������Ժ�δʵ�ַ���������˵��������Ҳ����Ҫ�ұ�Ҫ�Ĺ��ߡ��㲻��������ʹ�ô���Ľӿڡ�������ͷ�������һ�µ����������У����� Instrument �еķ��������ǡ��ơ������������������Щ�������ͻ����һЩ����������Ϊ�ӿڵ�Ŀ����Ϊ���������ഴ��һ��ͨ�ýӿڡ�����Щ�����У��������ͨ�ýӿڵ�Ψһ�����ǣ���ͬ����������ò�ͬ�ķ�ʽ��ʾ�˽ӿڡ�ͨ�ýӿڽ�����һ��������ʽ���Դ˱�������������Ĺ�ͬ���֡���һ��˵���� Instrument ��Ϊ������࣬���Ƴ����ࡣ������ Instrument �����ĳ�������˵�����Ķ��󼸺�����û������ġ�����һ����������Ϊ��ͨ��ͨ�ýӿڲ���һϵ���ࡣ��ˣ�Instrument ֻ�Ǳ�ʾ�ӿڣ����Ǿ���ʵ�֣����Դ���һ�� Instrument �Ķ���������壬���ǿ���ϣ����ֹ�û���ô����ͨ���� Instrument ���еķ����������󣬾Ϳ��Դﵽ���Ŀ�ģ�������ô�����ӳٵ�����ʱ���ܵ�֪������Ϣ��������Ҫ�û����пɿ����꾡�Ĳ��ԡ�������ڱ���ʱ��׽���⡣Java �ṩ��һ���������󷽷��Ļ��ƣ���������ǲ������ģ���ֻ������û�з����塣�����ǳ��󷽷��������﷨��xxxxxxxxxxabstract void f();�������󷽷�������������������һ�������һ���������󷽷�����ô�౾��Ҳ�����޶�Ϊ����ģ����򣬱������ᱨ����xxxxxxxxxx// interface/Basic.javaabstract class Basic { &nbsp; &nbsp;abstract void unimplemented();}���һ���������ǲ������ģ�����ͼ���������Ķ���ʱ��Java ����ô���أ������ᴴ��������Ķ�����������ֻ��õ��������Ĵ�����Ϣ��������֤�˳�����Ĵ����ԣ����ǲ��õ�����������xxxxxxxxxx// interfaces/AttemptToUseBasic.java// {WillNotCompile}public class AttemptToUseBasic { &nbsp; &nbsp;Basic b = new Basic(); &nbsp; &nbsp;// error: Basic is abstract; cannot be instantiated}�������һ���̳г���������ಢΪ֮����������ô�ͱ���Ϊ��������г��󷽷��ṩ�������塣�������ô��������ѡ��������������Ȼ��һ�������࣬��������ǿ������Ϊ������� abstract �ؼ��֡�xxxxxxxxxx// interfaces/Basic2.javaabstract class Basic2 extends Basic { &nbsp; &nbsp;int f() { &nbsp; &nbsp; &nbsp; &nbsp;return 111; &nbsp; } &nbsp; &nbsp;abstract void g() { &nbsp; &nbsp; &nbsp; &nbsp;// unimplemented() still not implemented &nbsp; }}���Խ�һ���������κγ��󷽷�����ָ��Ϊ abstract�������еĳ��󷽷�ûɶ���嵫����ֹ������Ķ���ʱ����ô���ͺ����á�xxxxxxxxxx// interfaces/AbstractWithoutAbstracts.javaabstract class Basic3 { &nbsp; &nbsp;int f() { &nbsp; &nbsp; &nbsp; &nbsp;return 111; &nbsp; } &nbsp; &nbsp;// No abstract methods} public class AbstractWithoutAbstracts { &nbsp; &nbsp;// Basic b3 = new Basic3(); &nbsp; &nbsp;// error: Basic 3 is abstract; cannot be instantiated}Ϊ�˴����ɳ�ʼ�����࣬��Ҫ�̳г����࣬���ṩ���г��󷽷��Ķ��壺xxxxxxxxxx// interfaces/Instantiable.javaabstract class Uninstantiable { &nbsp; &nbsp;abstract void f(); &nbsp; &nbsp;abstract int g();} public class Instantiable extends Uninstantiable { &nbsp; &nbsp;@Override &nbsp; &nbsp;void f() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"f()\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;int g() { &nbsp; &nbsp; &nbsp; &nbsp;return 22; &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Uninstantiable ui = new Instantiable(); &nbsp; }}���� @Override ��ʹ�á�û�����ע��Ļ��������û�ж�����ͬ�ķ�������ǩ����������ƻ���Ϊ��û��ʵ�ֳ��󷽷��Ӷ���������ʱ������ˣ��������Ϊ����� @Override �Ƕ���ġ����ǣ�@Override ����ʾ�������������д��������Ϊ�������õģ������һ�ʹ�� @Override����ʹ��û�����ע�⣬�����������Ҵ����ʱ����ס����ʵ�ϵķ���Ȩ���ǡ�friendly������ܿ�ῴ���ӿ��Զ����䷽��ָ��Ϊ public����ʵ�ϣ��ӿ�ֻ���� public ������������ӷ������η��Ļ����ӿڵķ������� friendly ���� public��Ȼ��������������ÿ���£�xxxxxxxxxx// interfaces/AbstractAccess.javaabstract class AbstractAccess { &nbsp; &nbsp;private void m1() {} &nbsp; &nbsp;// private abstract void m1a(); // illegal &nbsp; &nbsp;protected void m2() {} &nbsp; &nbsp;protected abstract void m2a(); &nbsp; &nbsp;void m3() {} &nbsp; &nbsp;abstract void m3a(); &nbsp; &nbsp;public void m4() {} &nbsp; &nbsp;public abstract void m4a();}private abstract ����ֹ����������ģ���Ϊ�㲻������ AbstractAccess ���κ������кϷ��ض���������һ�µ� Instrument ����Ժ����׵�ת��Ϊһ�������ࡣֻ��Ҫ���ַ����� abstract ���ɡ���һ����ָ��Ϊ abstract ����ǿ�����е����з������붼�ǳ��󷽷�������ͼ��ʾ���������޸ĳ�ʹ�ó�����ͳ��󷽷��Ĺ������������ӣ�xxxxxxxxxx// interfaces/music4/Music4.java// Abstract classes and methods// {java interfaces.music4.Music4}package interfaces.music4;import polymorphism.music.Note; abstract class Instrument { &nbsp; &nbsp;private int i; // Storage allocated for each &nbsp; &nbsp;public abstract void play(Note n); &nbsp; &nbsp;public String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Instrument\"; &nbsp; } &nbsp; &nbsp;public abstract void adjust();} class Wind extends Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Wind.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Wind\"; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting Wind\"); &nbsp; }} class Percussion extends Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Percussion.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Percussion\"; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting Percussion\"); &nbsp; }} class Stringed extends Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Stringed.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Stringed\"; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting Stringed\"); &nbsp; }} class Brass extends Wind { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Brass.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting Brass\"); &nbsp; }} class Woodwind extends Wind { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void play(Note n) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Woodwind.play() \" + n); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String what() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Woodwind\"; &nbsp; }} public class Music4 { &nbsp; &nbsp;// Doesn't care about type, so new types &nbsp; &nbsp;// added to system still work right: &nbsp; &nbsp;static void tune(Instrument i) { &nbsp; &nbsp; &nbsp; &nbsp;// ... &nbsp; &nbsp; &nbsp; &nbsp;i.play(Note.MIDDLE_C); &nbsp; } &nbsp; &nbsp;static void tuneAll(Instrument[] e) { &nbsp; &nbsp; &nbsp; &nbsp;for (Instrument i: e) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tune(i); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;// Upcasting during addition to the array: &nbsp; &nbsp; &nbsp; &nbsp;Instrument[] orchestra = { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Wind(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Percussion(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Stringed(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Brass(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Woodwind() &nbsp; &nbsp; &nbsp; }; &nbsp; &nbsp; &nbsp; &nbsp;tuneAll(orchestra); &nbsp; }}�����xxxxxxxxxxWind.play() MIDDLE_CPercussion.play() MIDDLE_CStringed.play() MIDDLE_CBrass.play() MIDDLE_CWoodwind.play() MIDDLE_C���� Instrument������û��������������ͳ��󷽷����а����ģ���Ϊ����ʹ����ĳ����Ժ���ȷ�����ܸ�֪�û��ͱ�����ʹ����ͼ��������ͬʱҲ��һ�����õ��ع����ߣ�ʹ������ʹ�����Ǻ����׵ؽ����ż̳в㼶�ṹ���ƹ����������ӿڴ���ʹ�� interface �ؼ��ִ����ӿڡ��ڱ����У�interface �� class һ���洦������������ָ�ؼ��� interface����������¶���������������д interface������ Java 8 ֮ǰ�Ľӿڸ������ף���Ϊ����ֻ�������󷽷���������������xxxxxxxxxx// interfaces/PureInterface.java// Interface only looked like this before Java 8public interface PureInterface { &nbsp; &nbsp;int m1(); &nbsp; &nbsp;void m2(); &nbsp; &nbsp;double m3();}������������Ϊ�������� abstract �ؼ��֣���Ϊ�����ڽӿ��С�Java ֪����Щ���������з����壨��Ȼ����Ϊ�������� abstract �ؼ��֣����ǿ��������ǲ����׽ӿڣ�ͽ���ѿ����ˣ�����ˣ��� Java 8 ֮ǰ���ǿ�����ô˵��interface �ؼ��ֲ���һ����ȫ������࣬û���ṩ�κ�ʵ�֡�����ֻ��������Ӧ����ʲô����ʲô��������������ô������ֻ�ܾ����������������б��ͷ������ͣ������޷�ȷ�������塣�ӿ�ֻ�ṩ��ʽ��ͨ����˵û��ʵ�֣�������ĳЩ�����Ƶ�����¿�����ʵ�֡�һ���ӿڱ�ʾ������ʵ���˸ýӿڵ��࿴����������������ˣ��κ�ʹ��ĳ�ض��ӿڵĴ��붼֪�����Ե��øýӿڵ���Щ���������ҽ���֪����Щ�����ԣ��ӿڱ�����������֮���Э�顣��һЩ��������������У�ʹ�� protocol �ؼ��������ͬ�Ĺ��ܡ���Java 8 �нӿ���΢��Щ�仯����Ϊ Java 8 �����ӿڰ���Ĭ�Ϸ����;�̬������������ĳЩ��Ҫԭ�򣬿�������������⡣�ӿڵĻ���������Ȼû�䣬��������֮�ϡ�ʵ��֮�¡��ӿ�������������Ե�������ܾ���ʹ���ϵĹ��÷�ʽ���ӿڵĵ���ʹ���Ǵ���һ��������ͻ�һ�����ݴʣ��� Runnable �� Serializable����������ͨ�������νṹ��һ���ֻ�һ����������ͣ��� String �� ActionHero��ʹ�ùؼ��� interface ������ class �������ӿڡ�����һ������Ҫ�ڹؼ��� interface ǰ���� public �ؼ��֣���ֻ���ڽӿ������ļ�����ͬ������£�������ӿ�ֻ�а�����Ȩ�ޣ�ֻ���ڽӿ���ͬ�İ��²���ʹ�������ӿ�ͬ�����԰������ԣ���Щ���Ա���ʽָ��Ϊ static �� final��ʹ�� implements �ؼ���ʹһ������ѭĳ���ض��ӿڣ���һ��ӿڣ�������ʾ���ӿ�ֻ�����Σ�������Ҫ˵��������ι����ġ�����֮�⣬����������̳С�xxxxxxxxxx// interfaces/ImplementingAnInterface.javainterface Concept { // Package access &nbsp; &nbsp;void idea1(); &nbsp; &nbsp;void idea2();} class Implementation implements Concept { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void idea1() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"idea1\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void idea2() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"idea2\"); &nbsp; }}�����ѡ����ʽ�������ӿ��еķ���Ϊ public�����Ǽ�ʹ�㲻��ô��������Ҳ�� public �ġ����Ե�ʵ��һ���ӿ�ʱ�����Խӿ��еķ������뱻����Ϊ public����������ֻ�а�����Ȩ�ޣ������ڼ̳�ʱ�����ǵĿɷ���Ȩ�޾ͱ������ˣ����� Java ���������������ġ�Ĭ�Ϸ���Java 8 Ϊ�ؼ��� default ������һ���µ���;��֮ǰֻ���� switch ����ע���У������ڽӿ���ʹ����ʱ���κ�ʵ�ֽӿ�ȴû�ж��巽����ʱ�����ʹ�� default �����ķ����塣Ĭ�Ϸ����ȳ������еķ����ܵ���������ƣ����Ƿǳ����ã����ǽ��ڡ���ʽ��̡�һ���п��������������ǿ������ʹ�ã�xxxxxxxxxx// interfaces/AnInterface.javainterface AnInterface { &nbsp; &nbsp;void firstMethod(); &nbsp; &nbsp;void secondMethod();}���ǿ���������ʵ�ֽӿڣ�xxxxxxxxxx// interfaces/AnImplementation.javapublic class AnImplementation implements AnInterface { &nbsp; &nbsp;public void firstMethod() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"firstMethod\"); &nbsp; } &nbsp; &nbsp;public void secondMethod() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"secondMethod\"); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;AnInterface i = new AnImplementation(); &nbsp; &nbsp; &nbsp; &nbsp;i.firstMethod(); &nbsp; &nbsp; &nbsp; &nbsp;i.secondMethod(); &nbsp; }}�����xxxxxxxxxxfirstMethodsecondMethod��������� AnInterface ������һ���·��� newMethod()������ AnImplementation ��û��ʵ�������������ͻᱨ����xxxxxxxxxxAnImplementation.java:3:error: AnImplementation is not abstract and does not override abstract method newMethod() in AnInterfacepublic class AnImplementation implements AnInterface {^1 error�������ʹ�ùؼ��� default Ϊ newMethod() �����ṩĬ�ϵ�ʵ�֣���ô������ӿ��йصĴ�������������������Ӱ�죬������Щ���뻹���Ե����µķ��� newMethod()��xxxxxxxxxx// interfaces/InterfaceWithDefault.javainterface InterfaceWithDefault { &nbsp; &nbsp;void firstMethod(); &nbsp; &nbsp;void secondMethod(); &nbsp; &nbsp;default void newMethod() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"newMethod\"); &nbsp; }}�ؼ��� default �����ڽӿ����ṩ����ʵ�֡����� Java 8 ֮ǰ����ֹ��xxxxxxxxxx// interfaces/Implementation2.javapublic class Implementation2 implements InterfaceWithDefault { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void firstMethod() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"firstMethod\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void secondMethod() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"secondMethod\") &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;InterfaceWithDefault i = new Implementation2(); &nbsp; &nbsp; &nbsp; &nbsp;i.firstMethod(); &nbsp; &nbsp; &nbsp; &nbsp;i.secondMethod(); &nbsp; &nbsp; &nbsp; &nbsp;i.newMethod(); &nbsp; }}�����xxxxxxxxxxfirstMethodsecondMethodnewMethod���� Implementation2 ��δ���� newMethod()�����ǿ���ʹ�� newMethod() �ˡ�����Ĭ�Ϸ����ļ���˵�������������������ڲ��ƻ���ʹ�ýӿڵĴ��������£��ڽӿ��������µķ�����Ĭ�Ϸ�����ʱҲ����Ϊ����������������չ��������̳���̳���ζ��һ������ܴӶ���������м̳����������ԡ�Java �����֮����C++ �Ķ�̳л��Ʊ���ڸ����Java ��ȥ��һ���ϸ�Ҫ�󵥼̳е����ԣ�ֻ�ܼ̳���һ���ࣨ������ࣩ��������ʵ���������ӿڡ��� Java 8 ֮ǰ���ӿ�û�а���������ֻ�Ƿ�����ò�����������������ڣ�Java ͨ��Ĭ�Ϸ���������ĳ�ֶ�̳е����ԡ���ϴ���Ĭ�Ϸ����Ľӿ���ζ�Ž���˶�������е���Ϊ����Ϊ�ӿ�����Ȼ�������������ԣ�ֻ�о�̬���ԣ������ã�������������Ȼֻ�����Ե������������࣬Ҳ����˵���������״̬�Ķ�̳С���������������xxxxxxxxxx// interfaces/MultipleInheritance.javaimport java.util.*; interface One { &nbsp; &nbsp;default void first() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"first\"); &nbsp; }} interface Two { &nbsp; &nbsp;default void second() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"second\"); &nbsp; }} interface Three { &nbsp; &nbsp;default void third() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"third\"); &nbsp; }} class MI implements One, Two, Three {} public class MultipleInheritance { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;MI mi = new MI(); &nbsp; &nbsp; &nbsp; &nbsp;mi.first(); &nbsp; &nbsp; &nbsp; &nbsp;mi.second(); &nbsp; &nbsp; &nbsp; &nbsp;mi.third(); &nbsp; }}�����xxxxxxxxxxfirstsecondthird����������Щ�� Java 8 ֮ǰ��������ɵ��£���϶��Դ��ʵ�֡�ֻҪ���෽���еķ������Ͳ����б���ͬ�����ܹ����úܺã������õ�����������xxxxxxxxxx// interface/MICollision.javaimport java.util.*; interface Bob1 { &nbsp; &nbsp;default void bob() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Bob1::bob\"); &nbsp; }} interface Bob2 { &nbsp; &nbsp;default void bob() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Bob2::bob\"); &nbsp; }} // class Bob implements Bob1, Bob2 {}/* Produces:error: class Bob inherits unrelated defaultsfor bob() from types Bob1 and Bob2class Bob implements Bob1, Bob2 {}^1 error*/ interface Sam1 { &nbsp; &nbsp;default void sam() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Sam1::sam\"); &nbsp; }} interface Sam2 { &nbsp; &nbsp;default void sam(int i) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(i * 2); &nbsp; }} // This works because the argument lists are distinct:class Sam implements Sam1, Sam2 {} interface Max1 { &nbsp; &nbsp;default void max() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Max1::max\"); &nbsp; }} interface Max2 { &nbsp; &nbsp;default int max() { &nbsp; &nbsp; &nbsp; &nbsp;return 47; &nbsp; }} // class Max implements Max1, Max2 {}/* Produces:error: types Max2 and Max1 are imcompatible;both define max(), but with unrelated return typesclass Max implements Max1, Max2 {}^1 error*/Sam ���е����� sam() ��������ͬ�ķ���������ǩ����ͬ��������ǩ�������������Ͳ������ͣ�������Ҳ�����������ַ��������Ǵ� Max ��ɿ������������Ͳ��Ƿ���ǩ����һ���֣���˲����������ַ�����Ϊ�˽��������⣬��Ҫ��д��ͻ�ķ�����xxxxxxxxxx// interfaces/Jim.javaimport java.util.*; interface Jim1 { &nbsp; &nbsp;default void jim() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Jim1::jim\"); &nbsp; }} interface Jim2 { &nbsp; &nbsp;default void jim() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Jim2::jim\"); &nbsp; }} public class Jim implements Jim1, Jim2 { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void jim() { &nbsp; &nbsp; &nbsp; &nbsp;Jim2.super.jim(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;new Jim().jim(); &nbsp; }}�����xxxxxxxxxxJim2::jim��Ȼ��������ض��� jim() ����������Ҳ��������������ʹ�� super �ؼ���ѡ�����ʵ���е�һ�֡��ӿ��еľ�̬����Java 8 �����ڽӿ������Ӿ�̬��������ô����ǡ���ذѹ��߹������ڽӿ��У��Ӷ������ӿڣ����߳�Ϊͨ�õĹ��ߣ�xxxxxxxxxx// onjava/Operations.javapackage onjava;import java.util.*; public interface Operations { &nbsp; &nbsp;void execute(); &nbsp; &nbsp;static void runOps(Operations... ops) { &nbsp; &nbsp; &nbsp; &nbsp;for (Operations op: ops) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;op.execute(); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;static void show(String msg) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(msg); &nbsp; }}����ģ�淽�����ģʽ��һ���汾���ڡ����ģʽ��һ������ϸ��������runOps() ��һ��ģ�淽����runOps() ʹ�ÿɱ�����б���������ǿ��Դ��������� Operation ��������˳���������ǣ�xxxxxxxxxx// interface/Machine.javaimport java.util.*;import onjava.Operations; class Bing implements Operations { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void execute() { &nbsp; &nbsp; &nbsp; &nbsp;Operations.show(\"Bing\"); &nbsp; }} class Crack implements Operations { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void execute() { &nbsp; &nbsp; &nbsp; &nbsp;Operations.show(\"Crack\"); &nbsp; }} class Twist implements Operations { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void execute() { &nbsp; &nbsp; &nbsp; &nbsp;Operations.show(\"Twist\"); &nbsp; }} public class Machine { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Operations.runOps( &nbsp; &nbsp; &nbsp; new Bing(), new Crack(), new Twist()); &nbsp; }}�����xxxxxxxxxxBingCrackTwist����չʾ�˴��� Operations �Ĳ�ͬ��ʽ��һ���ⲿ��(Bing)��һ�������࣬һ���������ú� lambda ����ʽ������������������������õĽ�����������������һ����ƣ���Ϊ�������Ѿ�̬�������ڸ����ʵĵط���Instrument ��Ϊ�ӿ��ع������������ӣ�ʹ�ýӿڵĻ����� Woodwind �� Brass ˵��һ��ʵ����ĳ���ӿڣ���ô��ʵ�־ͱ��һ����ͨ�࣬���԰����淽ʽ��չ�����ӿڵĹ�����ʽʹ�����ǲ���Ҫ��ʽ�������еķ���Ϊ public�������Զ����� public �ġ�play() �� adjust() ʹ�� default �ؼ��ֶ���ʵ�֡��� Java 8 ֮ǰ����Щ����Ҫ��ÿ��ʵ�����ظ�ʵ�֣��Եö��������˷��գ�xxxxxxxxxx// interfaces/music5/Music5.java// {java interfaces.music5.Music5}package interfaces.music5;import polymorphism.music.Note; interface Instrument { &nbsp; &nbsp;// Compile-time constant: &nbsp; &nbsp;int VALUE = 5; // static &amp; final &nbsp; &nbsp;default void play(Note n) &nbsp;// Automatically public &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(this + \".play() \" + n); &nbsp; } &nbsp; &nbsp;default void adjust() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Adjusting \" + this); &nbsp; }} class Wind implements Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Wind\"; &nbsp; }} class Percussion implements Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Percussion\"; &nbsp; }} class Stringed implements Instrument { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Stringed\"; &nbsp; }} class Brass extends Wind { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Brass\"; &nbsp; }} class Woodwind extends Wind { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Woodwind\"; &nbsp; }} public class Music5 { &nbsp; &nbsp;// Doesn't care about type, so new types &nbsp; &nbsp;// added to the system still work right: &nbsp; &nbsp;static void tune(Instrument i) { &nbsp; &nbsp; &nbsp; &nbsp;// ... &nbsp; &nbsp; &nbsp; &nbsp;i.play(Note.MIDDLE_C); &nbsp; } &nbsp; &nbsp;static void tuneAll(Instrument[] e) { &nbsp; &nbsp; &nbsp; &nbsp;for (Instrument i: e) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tune(i); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;// Upcasting during addition to the array: &nbsp; &nbsp; &nbsp; &nbsp;Instrument[] orchestra = { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Wind(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Percussion(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Stringed(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Brass(), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Woodwind() &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;tuneAll(orchestra); &nbsp; }}�����xxxxxxxxxxWind.play() MIDDLE_CPercussion.play() MIDDLE_CStringed.play() MIDDLE_CBrass.play() MIDDLE_CWoodwind.play() MIDDLE_C����汾�����ӵ���һ���仯�ǣ�what() ���޸�Ϊ toString() ��������Ϊ toString() ʵ�ֵ����� what() ����Ҫʵ�ֵ��߼�����Ϊ toString() �Ǹ����� Object �ķ���������������Ҫ�����ڽӿ��С�ע�⵽�������ǽ�������ת��Ϊ���� Instrument ����ͨ�࣬����� Instrument �ĳ����࣬���ǽ��� Instrument �Ľӿڣ�����Ϊ������ͬ�ġ���ʵ�ϣ��� tune() �����Ͽ������� Instrument ������һ����ͨ�ࡢ�����࣬����һ���ӿڡ�������ͽӿ��������� Java 8 ���� default ����֮��ѡ���ó����໹���ýӿڱ�ø������������±�������ȷ�����֣������ӿ�������������������϶���ӿ�ֻ�ܼ̳е�һ������״̬���ܰ������ԣ����˾�̬���ԣ���֧�ֶ���״̬�����԰������ԣ��ǳ��󷽷�����������Щ����Ĭ�Ϸ��� �� ���󷽷�����Ҫ��������ʵ��Ĭ�Ϸ�����Ĭ�Ϸ����������������ӿڵķ���������������ʵ�ֳ��󷽷�������û�й����������й������ɼ�����ʽ public������ protected ����Ԫ��������Ȼ��һ���࣬�ڴ�������ʱֻ�ܼ̳���һ������������Ĺ����п���ʵ�ֶ���ӿڡ���һ��ʵ�ʾ��飺�����ܵس�����ˣ�������ʹ�ýӿڶ����ǳ����ࡣֻ�е���Ҫʱ��ʹ�ó����ࡣ���Ǳ���ʹ�ã�����Ҫ�ýӿںͳ����ࡣ�����ʱ����ͨ���Ѿ����úܺã�������еĻ������ƶ����ӿڻ�������С���ȫ�������������ݵ���һ������ǽӿ�ʱ������ֻ���������Ǹ���������ࡣ�����ѷ���Ӧ�����Ǹ��̳в㼶�ṹ֮����࣬�ͻᴥùͷ���ӿ��ںܴ�̶��Ϸſ���������ƣ����ʹ�ýӿڿ��Ա�д�����Ը��õĴ��롣������һ���� Process ���������� name() �� process()��process() �����������룬�޸Ĳ���������������Ϊ���������������ֲ�ͬ���͵� Processor�������У�Processor �ĸ��������޸� String ����ע�⣬�������Ϳ�����Э�����Ͷ��ǲ������ͣ���xxxxxxxxxx// interfaces/Applicator.javaimport java.util.*; class Processor { &nbsp; &nbsp;public String name() { &nbsp; &nbsp; &nbsp; &nbsp;return getClass().getSimpleName(); &nbsp; } &nbsp; &nbsp;public Object process(Object input) { &nbsp; &nbsp; &nbsp; &nbsp;return input; &nbsp; }} class Upcase extends Processor { &nbsp; &nbsp;// ����Э������ &nbsp; &nbsp;@Override &nbsp; &nbsp;public String process(Object input) { &nbsp; &nbsp; &nbsp; &nbsp;return ((String) input).toUpperCase(); &nbsp; }} class Downcase extends Processor { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String process(Object input) { &nbsp; &nbsp; &nbsp; &nbsp;return ((String) input).toLowerCase(); &nbsp; }} class Splitter extends Processor { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String process(Object input) { &nbsp; &nbsp; &nbsp; &nbsp;// split() divides a String into pieces: &nbsp; &nbsp; &nbsp; &nbsp;return Arrays.toString(((String) input).split(\" \")); &nbsp; }} public class Applicator { &nbsp; &nbsp;public static void apply(Processor p, Object s) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Using Processor \" + p.name()); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(p.process(s)); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;String s = \"We are such stuff as dreams are made on\"; &nbsp; &nbsp; &nbsp; &nbsp;apply(new Upcase(), s); &nbsp; &nbsp; &nbsp; &nbsp;apply(new Downcase(), s); &nbsp; &nbsp; &nbsp; &nbsp;apply(new Splitter(), s); &nbsp; }}�����xxxxxxxxxxUsing Processor UpcaseWE ARE SUCH STUFF AS DREAMS ARE MADE ONUsing Processor Downcasewe are such stuff as dreams are made onUsing Processor Splitter[We, are, such, stuff, as, dreams, are, made, on]Applicator �� apply() �������Խ����κ����͵� Processor��������Ӧ�õ�һ�� Object ������������������������������һ���ܸ��ݴ���Ĳ������ʹӶ��߱���ͬ��Ϊ�ķ�����Ϊ�������ģʽ�����������㷨�в���Ĳ��֣����԰����仯�Ĳ��֡����Ծ��Ǵ���Ķ���������Ҫִ�еĴ��롣�����Processor �����ǲ��ԣ�main() ����չʾ�����ֲ�ͬ��Ӧ���� String s �ϵĲ��ԡ�split() �� String ���еķ����������� String ���͵Ķ����Դ���Ĳ�����Ϊ�ָ���ޣ�����һ������ String[]��������������Ϊ�˸���ش��� String ���顣�������ڷ�����һ������˲��������ǿ�����������ʹ�� Applicator �� apply() ������xxxxxxxxxx// interfaces/filters/Waveform.javapackage interfaces.filters; public class Waveform { &nbsp; &nbsp;private static long counter; &nbsp; &nbsp;private final long id = counter++; &nbsp; &nbsp;@Override &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp;return \"Waveform \" + id; &nbsp; }} // interfaces/filters/Filter.javapackage interfaces.filters; public class Filter { &nbsp; &nbsp;public String name() { &nbsp; &nbsp; &nbsp; &nbsp;return getClass().getSimpleName(); &nbsp; } &nbsp; &nbsp;public Waveform process(Waveform input) { &nbsp; &nbsp; &nbsp; &nbsp;return input; &nbsp; }} // interfaces/filters/LowPass.javapackage interfaces.filters; public class LowPass extends Filter { &nbsp; &nbsp;double cutoff; &nbsp; &nbsp;public LowPass(double cutoff) { &nbsp; &nbsp; &nbsp; &nbsp;this.cutoff = cutoff; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public Waveform process(Waveform input) { &nbsp; &nbsp; &nbsp; &nbsp;return input; // Dummy processing �ƴ��� &nbsp; }} // interfaces/filters/HighPass.javapackage interfaces.filters; public class HighPass extends Filter { &nbsp; &nbsp;double cutoff; &nbsp; &nbsp;public HighPass(double cutoff) { &nbsp; &nbsp; &nbsp; &nbsp;this.cutoff = cutoff; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public Waveform process(Waveform input) { &nbsp; &nbsp; &nbsp; &nbsp;return input; &nbsp; }} // interfaces/filters/BandPass.javapackage interfaces.filters; public class BandPass extends Filter { &nbsp; &nbsp;double lowCutoff, highCutoff; &nbsp; &nbsp;public BandPass(double lowCut, double highCut) { &nbsp; &nbsp; &nbsp; &nbsp;lowCutoff = lowCut; &nbsp; &nbsp; &nbsp; &nbsp;highCutoff = highCut; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public Waveform process(Waveform input) { &nbsp; &nbsp; &nbsp; &nbsp;return input; &nbsp; }}Filter ���� Processor �������ͬ�Ľӿ�Ԫ�أ�������Ϊ�����Ǽ̳��� Processor ���� ��Ϊ Filter ��Ĵ����߸�����֪�����뽫������ Processor ʹ�� ���� ����㲻�ܽ� Applicator �� apply() ����Ӧ���� Filter ���ϣ���ʹ������Ҳ���������С���Ҫ����Ϊ Applicator �� apply() ������ Processor ������ϣ�����ֹ�� Applicator �� apply() ���������á�����Ҫע���һ���� Filter ���� process() ����������������� Waveform������� Processor ��һ���ӿڣ���ô���ƾͻ����ɶ������Ը��� Applicator �� apply() ���������������Ǹ��ӿڲ������������޸ĺ�� Processor �� Applicator �汾��xxxxxxxxxx// interfaces/interfaceprocessor/Processor.javapackage interfaces.interfaceprocessor; public interface Processor { &nbsp; &nbsp;default String name() { &nbsp; &nbsp; &nbsp; &nbsp;return getClass().getSimpleName(); &nbsp; } &nbsp; &nbsp;Object process(Object input);} // interfaces/interfaceprocessor/Applicator.javapackage interfaces.interfaceprocessor; public class Applicator { &nbsp; &nbsp;public static void apply(Processor p, Object s) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Using Processor \" + p.name()); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(p.process(s)); &nbsp; }}���ô���ĵ�һ�ַ�ʽ�ǿͻ��˳���Ա��ѭ�ӿڱ�д�࣬��������xxxxxxxxxx// interfaces/interfaceprocessor/StringProcessor.java// {java interfaces.interfaceprocessor.StringProcessor}package interfaces.interfaceprocessor;import java.util.*; interface StringProcessor extends Processor { &nbsp; &nbsp;@Override &nbsp; &nbsp;String process(Object input); // [1] &nbsp; &nbsp;String S = \"If she weighs the same as a duck, she's made of wood\"; // [2] &nbsp; &nbsp;static void main(String[] args) { // [3] &nbsp; &nbsp; &nbsp; &nbsp;Applicator.apply(new Upcase(), S); &nbsp; &nbsp; &nbsp; &nbsp;Applicator.apply(new Downcase(), S); &nbsp; &nbsp; &nbsp; &nbsp;Applicator.apply(new Splitter(), S); &nbsp; }} class Upcase implements StringProcessor { &nbsp; &nbsp;// ����Э������ &nbsp; &nbsp;@Override &nbsp; &nbsp;public String process(Object input) { &nbsp; &nbsp; &nbsp; &nbsp;return ((String) input).toUpperCase(); &nbsp; }} class Downcase implements StringProcessor { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String process(Object input) { &nbsp; &nbsp; &nbsp; &nbsp;return ((String) input).toLowerCase(); &nbsp; }} class Splitter implements StringProcessor { &nbsp; &nbsp;@Override &nbsp; &nbsp;public String process(Object input) { &nbsp; &nbsp; &nbsp; &nbsp;return Arrays.toString(((String) input).split(\" \")); &nbsp; }}�����xxxxxxxxxxUsing Processor UpcaseIF SHE WEIGHS THE SAME AS A DUCK, SHE'S MADE OF WOODUsing Processor Downcaseif she weighs the same as a duck, she's made of woodUsing Processor Splitter[If, she, weighs, the, same, as, a, duck,, she's, made, of, wood][1] ���������Ǳ�Ҫ�ģ���ʹ�Ƴ�����������Ҳ���ᱨ��������ע�������Э�䷵�����ʹ� Object ����� String��[2] S �Զ����� final �� static �ģ���Ϊ�����ڽӿ��ж���ġ�[3] �����ڽӿ��ж��� main() ���������ַ�ʽ�����úܺã�Ȼ���㾭��������������޷��޸��ࡣ�����ڵ����˲����������У�����Ǳ����ֶ����Ǵ����ġ�����Щ����£�����ʹ�����������ģʽ����������������������еĽӿڲ�����Ҫ�Ľӿڣ����£�xxxxxxxxxx// interfaces/interfaceprocessor/FilterProcessor.java// {java interfaces.interfaceprocessor.FilterProcessor}package interfaces.interfaceprocessor;import interfaces.filters.*; class FilterAdapter implements Processor { &nbsp; &nbsp;Filter filter; &nbsp; &nbsp;FilterAdapter(Filter filter) { &nbsp; &nbsp; &nbsp; &nbsp;this.filter = filter; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public String name() { &nbsp; &nbsp; &nbsp; &nbsp;return filter.name(); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public Waveform process(Object input) { &nbsp; &nbsp; &nbsp; &nbsp;return filter.process((Waveform) input); &nbsp; }} public class FilterProcessor { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Waveform w = new Waveform(); &nbsp; &nbsp; &nbsp; &nbsp;Applicator.apply(new FilterAdapter(new LowPass(1.0)), w); &nbsp; &nbsp; &nbsp; &nbsp;Applicator.apply(new FilterAdapter(new HighPass(2.0)), w); &nbsp; &nbsp; &nbsp; &nbsp;Applicator.apply(new FilterAdapter(new BandPass(3.0, 4.0)), w); &nbsp; }}�����xxxxxxxxxxUsing Processor LowPassWaveform 0Using Processor HighPassWaveform 0Using Processor BandPassWaveform 0������ʹ���������ķ�ʽ�У�FilterAdapter �Ĺ������������еĽӿ� Filter���̶�������Ҫ�� Processor �ӿڵĶ�������ܻ�ע�⵽ FilterAdapter ��ʹ����ί�С�Э���������Ǵ� process() �����в���һ�� Waveform ���� Object �������ӿ���ʵ�ֽ���ʹ�ýӿڿ���Ӧ���ڶ��ֲ�ͬ��ʵ�֣����������߿ɸ����ԡ���ӿڽ���ӿ�û���κ�ʵ�֡���Ҳ����˵��û���κ���ӿ���صĴ洢��������޷���ֹ��ϵĶ�ӿڡ������м�ֵ�ģ���Ϊ����ʱ��Ҫ��ʾ��һ�� x ��һ�� a ��һ�� b �Լ�һ�� c���������ಢ��Ҫ�����̳��Գ���Ļ򡰾���ġ���û���κγ��󷽷����Ļ��ࡣ����̳�һ���ǽӿڵ��࣬��ôֻ�ܼ̳�һ���࣬����Ļ�Ԫ�ر��붼�ǽӿڡ���Ҫ�����еĽӿ��������� implements �ؼ���֮�����ö��ŷָ����������������ӿڣ�����������ת��Ϊÿ���ӿڣ���Ϊÿ���ӿڶ��Ƕ��������͡�����չʾ��һ���ɶ���ӿ���϶��ɵľ�������������ࣺxxxxxxxxxx// interfaces/Adventure.java// Multiple interfacesinterface CanFight { &nbsp; &nbsp;void fight();} interface CanSwim { &nbsp; &nbsp;void swim();} interface CanFly { &nbsp; &nbsp;void fly();} class ActionCharacter { &nbsp; &nbsp;public void fight(){}} class Hero extends ActionCharacter implements CanFight, CanSwim, CanFly { &nbsp; &nbsp;public void swim() {} &nbsp; &nbsp;public void fly() {}} public class Adventure { &nbsp; &nbsp;public static void t(CanFight x) { &nbsp; &nbsp; &nbsp; &nbsp;x.fight(); &nbsp; } &nbsp; &nbsp;public static void u(CanSwim x) { &nbsp; &nbsp; &nbsp; &nbsp;x.swim(); &nbsp; } &nbsp; &nbsp;public staic void v(CanFly x) { &nbsp; &nbsp; &nbsp; &nbsp;x.fly(); &nbsp; } &nbsp; &nbsp;public static void w(ActionCharacter x) { &nbsp; &nbsp; &nbsp; &nbsp;x.fight(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Hero h = new Hero(); &nbsp; &nbsp; &nbsp; &nbsp;t(h); // Treat it as a CanFight &nbsp; &nbsp; &nbsp; &nbsp;u(h); // Treat it as a CanSwim &nbsp; &nbsp; &nbsp; &nbsp;v(h); // Treat it as a CanFly &nbsp; &nbsp; &nbsp; &nbsp;w(h); // Treat it as an ActionCharacter &nbsp; }}�� Hero ����˾����� ActionCharacter �ͽӿ� CanFight��CanSwim �� CanFly����ͨ�����ַ�ʽ��Ͼ�����ͽӿ�ʱ����Ҫ�����������ǰ�棬������Žӿڣ�����������ᱨ�������ӿ� CanFight ���� ActionCharacter �е� fight() ����ǩ����ͬ�������� Hero ��Ҳû���ṩ fight() �Ķ��塣������չһ���ӿڣ����ǵõ�������һ���ӿڡ����봴��һ������ʱ�����еĶ���������ȶ����ڡ��� Hero ��û����ʽ���ṩ fight() �Ķ��壬�����ڸ÷������� ActionCharacter ���Ѿ��������������ʹ�ô��� Hero �����Ϊ���ܡ����� Adventure �п��Կ����ĸ����������ǰѲ�ͬ�Ľӿں;�������Ϊ������������һ�� Hero ����ʱ�������Ա�������Щ�����е�����һ������ζ����������������ת��Ϊÿ���ӿڡ�Java �����ֽӿڵ���Ʒ�ʽ��ʹ�ó���Ա����Ҫ�����ر��Ŭ������ס��ǰ������չʾ��ʹ�ýӿڵĺ���ԭ��֮һ��Ϊ���ܹ�����ת��Ϊ��������ͣ��Լ��ɴ˴���������ԣ���Ȼ����ʹ�ýӿڵĵڶ���ԭ����ʹ�ó��������ͬ����ֹ�ͻ��˳���Ա���������Ķ���ȷ�������ֻ��һ���ӿڡ��������һ�����⣺Ӧ��ʹ�ýӿڻ��ǳ������أ�������������κη���������Ա�����Ļ��࣬��ѡ��ӿڶ����ǳ����ࡣ��ʵ�ϣ����֪��ĳ������һ�����࣬���Կ����ýӿ�ʵ��������������ڱ����ܽ���ٴ����ۣ���ʹ�ü̳���չ�ӿ�ͨ���̳У����Ժ������ڽӿ������ӷ������������������½ӿ��н�϶���ӿڡ���������������Եõ��½ӿڣ���������ʾ��xxxxxxxxxx// interfaces/HorrorShow.java// Extending an interface with inheritanceinterface Monster { &nbsp; &nbsp;void menace();} interface DangerousMonster extends Monster { &nbsp; &nbsp;void destroy();} interface Lethal { &nbsp; &nbsp;void kill();} class DragonZilla implements DangerousMonster { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void menace() {} &nbsp; &nbsp;@Override &nbsp; &nbsp;public void destroy() {}} interface Vampire extends DangerousMonster, Lethal { &nbsp; &nbsp;void drinkBlood();} class VeryBadVampire implements Vampire { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void menace() {} &nbsp; &nbsp;@Override &nbsp; &nbsp;public void destroy() {} &nbsp; &nbsp;@Override &nbsp; &nbsp;public void kill() {} &nbsp; &nbsp;@Override &nbsp; &nbsp;public void drinkBlood() {}} public class HorrorShow { &nbsp; &nbsp;static void u(Monster b) { &nbsp; &nbsp; &nbsp; &nbsp;b.menace(); &nbsp; } &nbsp; &nbsp;static void v(DangerousMonster d) { &nbsp; &nbsp; &nbsp; &nbsp;d.menace(); &nbsp; &nbsp; &nbsp; &nbsp;d.destroy(); &nbsp; } &nbsp; &nbsp;static void w(Lethal l) { &nbsp; &nbsp; &nbsp; &nbsp;l.kill(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;DangerousMonster barney = new DragonZilla(); &nbsp; &nbsp; &nbsp; &nbsp;u(barney); &nbsp; &nbsp; &nbsp; &nbsp;v(barney); &nbsp; &nbsp; &nbsp; &nbsp;Vampire vlad = new VeryBadVampire(); &nbsp; &nbsp; &nbsp; &nbsp;u(vlad); &nbsp; &nbsp; &nbsp; &nbsp;v(vlad); &nbsp; &nbsp; &nbsp; &nbsp;w(vlad); &nbsp; }}�ӿ� DangerousMonster �� Monster ����չ��һ���½ӿڣ��� DragonZilla ʵ��������ӿڡ�Vampire ��ʹ�õ��﷨�������ڽӿڼ̳С�ͨ����˵��extends ֻ�����ڵ�һ�࣬�����ڹ����ӿ�ʱ�������ö������ӿڡ�ע�⵽���ӿ���֮���ö��ŷָ�����Ͻӿ�ʱ��������ͻ��ʵ�ֶ���ӿ�ʱ���ܻ����һ��С���塣��ǰ��������У�CanFight �� ActionCharacter ������ȫ��ͬ�� fight() ��������ȫ��ͬ�ķ���û�����⣬����������ǵ�ǩ���򷵻����Ͳ�ͬ����ô���أ�������һ�����ӣ�xxxxxxxxxx// interfaces/InterfaceCollision.javainterface I1 { &nbsp; &nbsp;void f();} interface I2 { &nbsp; &nbsp;int f(int i);} interface I3 { &nbsp; &nbsp;int f();} class C { &nbsp; &nbsp;public int f() { &nbsp; &nbsp; &nbsp; &nbsp;return 1; &nbsp; }} class C2 implements I1, I2 { &nbsp; &nbsp;@Override &nbsp; &nbsp;public void f() {} &nbsp; &nbsp;@Override &nbsp; &nbsp;public int f(int i) { &nbsp; &nbsp; &nbsp; &nbsp;return 1; &nbsp;// ���� &nbsp; }} class C3 extends C implements I2 { &nbsp; &nbsp;@Override &nbsp; &nbsp;public int f(int i) { &nbsp; &nbsp; &nbsp; &nbsp;return 1; // ���� &nbsp; }} class C4 extends C implements I3 { &nbsp; &nbsp;// ��ȫ��ͬ��û���� &nbsp; &nbsp;@Override &nbsp; &nbsp;public int f() { &nbsp; &nbsp; &nbsp; &nbsp;return 1; &nbsp; }} // �����ķ������Ͳ�ͬ//- class C5 extends C implements I1 {}//- interface I4 extends I1, I3 {}��д��ʵ�ֺ��������˲���ؽ�����һ����������ѡ�ͬʱ�����ط��������ݷ������������ֲ��˵ġ�����ע���������ʱ��������Ϣ���£�xxxxxxxxxxerror: C5 is not abstract and does not override abstractmethod f() in I1class C5 extends C implements I1 {}error: types I3 and I1 are incompatible; both define f(),but with unrelated return typesinterfacce I4 extends I1, I3 {}��������Ͻӿ�ʱ���ڲ�ͬ�Ľӿ���ʹ����ͬ�ķ�����ͨ������ɴ���ɶ��ԵĻ��ң�������������������ӿ������ӿ��������˵�ԭ��֮һ����ͬ�Ľӿڿ����ж��ʵ�֡��ڼ������������һ���������ܽӿ���Ϊ�������ýӿڵ�ʵ�ֺʹ��ݶ����������������������ˣ��ӿڵ�һ�ֳ����÷���ǰ���ᵽ���������ģʽ����дһ������ִ��ĳЩ����������һ��ָ���Ľӿ���Ϊ����������˵����ֻҪ������ѭ�ӿڣ��Ϳ��Ե��÷����� ����ʹ�÷���������ͨ�ã������߿ɸ����ԡ����磬�� Scanner �Ĺ��������ܵ���һ�� Readable �ӿڣ��ڡ��ַ�����һ����ѧϰ����������ݣ�����ᷢ�� Readable û������ Java ��׼���������κη����Ĳ����������ǵ���Ϊ Scanner �����ģ���� Scanner û�н����������Ϊĳ���ض��ࡣͨ�����ַ�ʽ��Scanner ��������������Э��������㴴����һ�����ಢ���� Scanner ����������������ʵ�� Readable �ӿڣ���������xxxxxxxxxx// interfaces/RandomStrings.java// Implementing an interface to conform to a methodimport java.nio.*;import java.util.*; public class RandomStrings implements Readable { &nbsp; &nbsp;private static Random rand = new Random(47); &nbsp; &nbsp;private static final char[] CAPITALS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray(); &nbsp; &nbsp;private static final char[] LOWERS = \"abcdefghijklmnopqrstuvwxyz\".toCharArray(); &nbsp; &nbsp;private static final char[] VOWELS = \"aeiou\".toCharArray(); &nbsp; &nbsp;private int count; &nbsp; &nbsp;public RandomStrings(int count) { &nbsp; &nbsp; &nbsp; &nbsp;this.count = count; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public int read(CharBuffer cb) { &nbsp; &nbsp; &nbsp; &nbsp;if (count-- == 0) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return -1; // indicates end of input &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;cb.append(CAPITALS[rand.nextInt(CAPITALS.length)]); &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; 4; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cb.append(VOWELS[rand.nextInt(VOWELS.length)]); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cb.append(LOWERS[rand.nextInt(LOWERS.length)]); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;cb.append(\" \"); &nbsp; &nbsp; &nbsp; &nbsp;return 10; // Number of characters appended &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Scanner s = new Scanner(new RandomStrings(10)); &nbsp; &nbsp; &nbsp; &nbsp;while (s.hasNext()) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(s.next()); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxxYazeruyacFowenucorGoeazimomRaeuuacioNuoadesiwHageaikuxRuqicibuiNumasetihKuuuuozogWaqizeyoyReadable �ӿ�ֻ��Ҫʵ�� read() ������ע�� @Override ע���ͻ������������ read() ������������������ӵ� CharBuffer �����У��ж��ַ�������ʵ�֣��鿴 CharBuffer �ĵ���������û������ʱ���� -1����������һ����û��ʵ�� Readable �ӿڣ����������� Scanner ���������أ�������һ��������������������ӣ�xxxxxxxxxx// interfaces/RandomDoubles.javaimport java.util.*; public interface RandomDoubles { &nbsp; &nbsp;Random RAND = new Random(47); &nbsp; &nbsp;default double next() { &nbsp; &nbsp; &nbsp; &nbsp;return RAND.nextDouble(); &nbsp; } &nbsp; &nbsp;static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;RandomDoubles rd = new RandomDoubles(){}; &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; 7; i++) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(rd.next() + \" \"); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxx0.72711578607300440.53094545086342420.160206564933025990.188478669777717320.51660208012684570.26786620842005850.2613610344283964���ǿ����ٴ�ʹ��������ģʽ�������������������ʵ�������ӿڡ���ˣ�ͨ���ؼ��� interface �ṩ�Ķ�̳У����ǿ��Դ���һ������ RandomDoubles������ Readable ���ࣺxxxxxxxxxx// interfaces/AdaptedRandomDoubles.java// creating an adapter with inheritanceimport java.nio.*;import java.util.*; public class AdaptedRandomDoubles implements RandomDoubles, Readable { &nbsp; &nbsp;private int count; &nbsp; &nbsp;public AdaptedRandomDoubles(int count) { &nbsp; &nbsp; &nbsp; &nbsp;this.count = count; &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public int read(CharBuffer cb) { &nbsp; &nbsp; &nbsp; &nbsp;if (count-- == 0) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return -1; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;String result = Double.toString(next()) + \" \"; &nbsp; &nbsp; &nbsp; &nbsp;cb.append(result); &nbsp; &nbsp; &nbsp; &nbsp;return result.length(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Scanner s = new Scanner(new AdaptedRandomDoubles(7)); &nbsp; &nbsp; &nbsp; &nbsp;while (s.hasNextDouble()) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(s.nextDouble() + \" \"); &nbsp; &nbsp; &nbsp; } &nbsp; }}�����xxxxxxxxxx0.7271157860730044 0.53094545086342420.16020656493302599 0.188478669777717320.5166020801268457 0.26786620842005850.2613610344283964��Ϊ����������ַ�ʽ���������������½ӿڣ����������ζ��һ�����ܽӿ����͵ķ����ṩ��һ�����κ��඼������÷�����������ķ�ʽ�������ʹ�ýӿڶ��������ǿ��֮�����ӿ��ֶ���Ϊ�ӿ��е��ֶζ��Զ��� static �� final �ģ����Խӿھͳ�Ϊ�˴���һ�鳣���ķ���Ĺ��ߡ��� Java 5 ֮ǰ�����ǲ����� C �� C++ �е� enum (ö������) ������ͬЧ����Ψһ��ʽ������������� Java 5 ֮ǰ�Ĵ����п�����xxxxxxxxxx// interfaces/Months.java// Using interfaces to create groups of constantspublic interface Months { &nbsp; &nbsp;int &nbsp; &nbsp;JANUARY = 1, FEBRUARY = 2, MARCH = 3, &nbsp; &nbsp;APRIL = 4, MAY = 5, JUNE = 6, JULY = 7, &nbsp; &nbsp;AUGUST = 8, SEPTEMBER = 9, OCTOBER = 10, &nbsp; &nbsp;NOVEMBER = 11, DECEMBER = 12;}ע�� Java ��ʹ�ô�д��ĸ�ķ������г�ʼ��ֵ�� static final �������ӿ��е��ֶ��Զ��� public �ģ�����û����ʽָ����㡣�� Java 5 ��ʼ���������˸���ǿ������Ĺؼ��� enum����ô�ڽӿ��ж��峣������Ե�ûʲô�����ˡ�Ȼ�������Ķ������Ĵ���ʱ���ںܶೡ���㻹���������־ɵ�ϰ���÷����ڡ�ö�١�һ�������ѧϰ���������ö�ٵ����ݡ���ʼ���ӿ��е��ֶ��ӿ��ж�����ֶβ����ǡ��� final&quot;�����ǿ����÷ǳ�������ʽ��ʼ�������磺xxxxxxxxxx// interfaces/RandVals.java// Initializing interface fields with// non-constant initializersimport java.util.*; public interface RandVals { &nbsp; &nbsp;Random RAND = new Random(47); &nbsp; &nbsp;int RANDOM_INT = RAND.nextInt(10); &nbsp; &nbsp;long RANDOM_LONG = RAND.nextLong() * 10; &nbsp; &nbsp;float RANDOM_FLOAT = RAND.nextLong() * 10; &nbsp; &nbsp;double RANDOM_DOUBLE = RAND.nextDouble() * 10;}��Ϊ�ֶ��� static �ģ��������������һ�α�����ʱ��ʼ�����ⷢ�����κ��ֶ��״α�����ʱ�������Ǹ��򵥵Ĳ��ԣ�xxxxxxxxxx// interfaces/TestRandVals.javapublic class TestRandVals { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(RandVals.RANDOM_INT); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(RandVals.RANDOM_LONG); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(RandVals.RANDOM_FLOAT); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(RandVals.RANDOM_DOUBLE); &nbsp; }}�����xxxxxxxxxx8-32032247016559954-8.5939291E185.779976127815049��Щ�ֶβ��ǽӿڵ�һ���֣����ǵ�ֵ���洢�ڽӿڵľ�̬�洢�����С��ӿ�Ƕ���ӿڿ���Ƕ������������ӿ��С������ʾһЩ��Ȥ�����ԣ�xxxxxxxxxx// interfaces/nesting/NestingInterfaces.java// {java interfaces.nesting.NestingInterfaces}package interfaces.nesting; class A { &nbsp; &nbsp;interface B { &nbsp; &nbsp; &nbsp; &nbsp;void f(); &nbsp; } &nbsp; &nbsp;public class BImp implements B { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; } &nbsp; &nbsp;public class BImp2 implements B { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; } &nbsp; &nbsp;public interface C { &nbsp; &nbsp; &nbsp; &nbsp;void f(); &nbsp; } &nbsp; &nbsp;class CImp implements C { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; } &nbsp; &nbsp;private class CImp2 implements C { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; } &nbsp; &nbsp;private interface D { &nbsp; &nbsp; &nbsp; &nbsp;void f(); &nbsp; } &nbsp; &nbsp;private class DImp implements D { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; } &nbsp; &nbsp;public class DImp2 implements D { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; } &nbsp; &nbsp;public D getD() { &nbsp; &nbsp; &nbsp; &nbsp;return new DImp2(); &nbsp; } &nbsp; &nbsp;private D dRef; &nbsp; &nbsp;public void receiveD(D d) { &nbsp; &nbsp; &nbsp; &nbsp;dRef = d; &nbsp; &nbsp; &nbsp; &nbsp;dRef.f(); &nbsp; }} interface E { &nbsp; &nbsp;interface G { &nbsp; &nbsp; &nbsp; &nbsp;void f(); &nbsp; } &nbsp; &nbsp;// Redundant \"public\" &nbsp; &nbsp;public interface H { &nbsp; &nbsp; &nbsp; &nbsp;void f(); &nbsp; } &nbsp; &nbsp;void g(); &nbsp; &nbsp;// Cannot be private within an interface &nbsp; &nbsp;//- private interface I {}} public class NestingInterfaces { &nbsp; &nbsp;public class BImp implements A.B { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; } &nbsp; &nbsp;class CImp implements A.C { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; } &nbsp; &nbsp;// Cannot implements a private interface except &nbsp; &nbsp;// within that interface's defining class: &nbsp; &nbsp;//- class DImp implements A.D { &nbsp; &nbsp;//- public void f() {} &nbsp; &nbsp;//- } &nbsp; &nbsp;class EImp implements E { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void g() {} &nbsp; } &nbsp; &nbsp;class EGImp implements E.G { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; } &nbsp; &nbsp;class EImp2 implements E { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void g() {} &nbsp; &nbsp; &nbsp; &nbsp;class EG implements E.G { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public void f() {} &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;A a = new A(); &nbsp; &nbsp; &nbsp; &nbsp;// Can't access to A.D: &nbsp; &nbsp; &nbsp; &nbsp;//- A.D ad = a.getD(); &nbsp; &nbsp; &nbsp; &nbsp;// Doesn't return anything but A.D: &nbsp; &nbsp; &nbsp; &nbsp;//- A.DImp2 di2 = a.getD(); &nbsp; &nbsp; &nbsp; &nbsp;// cannot access a member of the interface: &nbsp; &nbsp; &nbsp; &nbsp;//- a.getD().f(); &nbsp; &nbsp; &nbsp; &nbsp;// Only another A can do anything with getD(): &nbsp; &nbsp; &nbsp; &nbsp;A a2 = new A(); &nbsp; &nbsp; &nbsp; &nbsp;a2.receiveD(a.getD()); &nbsp; }}������Ƕ�׽ӿڵ��﷨���൱�Զ��׼��ġ������Ƕ�׽ӿ�һ�������Ǿ��� public �������Ȩ�޵Ŀɼ��ԡ���Ϊһ�������ӵķ�ʽ���ӿ�Ҳ������ private �ģ����� A.D��ͬ�����﷨ͬʱ������Ƕ�׽ӿں�Ƕ���ࣩ����ô private Ƕ�׽ӿ���ʲô�ô��أ�����ܲ²���ֻ�Ǳ�����ʵ��һ�� private �ڲ��࣬���� DImp��Ȼ�� A.DImp2 չʾ�������Ա�ʵ��Ϊ public �࣬���� A.DImp2 ֻ�ܱ��Լ�ʹ�ã����޷�˵��ʵ���� private �ӿ� D������ʵ�� private �ӿ���һ�ֿ���ǿ�Ƹýӿ��еķ������岻�������κ�������Ϣ��������������ת�ͣ��ķ�ʽ��getD() ����������һ���� private �ӿ��йصľ���������һ�� public ����ȴ�����˶� private �ӿڵ����á��ܶ��������ֵ��Щʲô�أ�main() �����������һЩʹ�÷���ֵ�ĳ��Ե���ʧ���ˡ�����ֵ���뽻����Ȩʹ�����Ķ��󣬱�������һ�� A ͨ�� receiveD() ���������������ӿ� E ˵���˽ӿ�֮��Ҳ��Ƕ�ס�Ȼ���������ڽӿڵĹ��򡪡������ǣ��ӿ��е�Ԫ�ر����� public �ġ����ڴ˶��ᱻ�ϸ�ִ�У�����Ƕ������һ���ӿ��еĽӿ��Զ����� public �ģ�����ָ��Ϊ private���� NestingInterfaces չʾ��Ƕ�׽ӿڵĲ�ͬʵ�ַ�ʽ�������ǵ�ʵ��ĳ���ӿ�ʱ��������Ҫʵ��Ƕ�������ڲ��Ľӿڡ�ͬʱ��private �ӿڲ����ڶ���������֮�ⱻʵ�֡�������Щ���Ե����ԭ���������ǳ��ڶ��ϸ���﷨һ���ԵĿ��ǣ�������ͨ����Ϊ��һ�����˽���ĳ�����ԣ��������ҵ�������֮�ء��ӿں͹�������ģʽ�ӿ��Ƕ�ʵ�ֵ�;���������ɷ���ĳ���ӿڵĶ���ĵ��ͷ�ʽ�������������ģʽ����ͬ��ֱ�ӵ��ù�������ֻ����ù��������еĴ��������������ɶ����ʵ�֡��������ϣ�ͨ�����ַ�ʽ���Խ��ӿ���ʵ�ֵĴ�����ȫ���룬ʹ�ÿ���͸���ؽ�ĳ��ʵ���滻Ϊ��һ��ʵ�֡�������һ��չʾ���������ṹ�����ӣ�xxxxxxxxxx// interfaces/Factories.javainterface Service { &nbsp; &nbsp;void method1(); &nbsp; &nbsp;void method2();} interface ServiceFactory { &nbsp; &nbsp;Service getService();} class Service1 implements Service { &nbsp; &nbsp;Service1() {} // Package access &nbsp; &nbsp;@Override &nbsp; &nbsp;public void method1() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Service1 method1\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void method2() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Service1 method2\"); &nbsp; }} class Service1Factory implements ServiceFactory { &nbsp; &nbsp;@Override &nbsp; &nbsp;public Service getService() { &nbsp; &nbsp; &nbsp; &nbsp;return new Service1(); &nbsp; }} class Service2 implements Service { &nbsp; &nbsp;Service2() {} // Package access &nbsp; &nbsp;@Override &nbsp; &nbsp;public void method1() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Service2 method1\"); &nbsp; } &nbsp; &nbsp;@Override &nbsp; &nbsp;public void method2() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Service2 method2\"); &nbsp; }} class Service2Factory implements ServiceFactory { &nbsp; &nbsp;@Override &nbsp; &nbsp;public Service getService() { &nbsp; &nbsp; &nbsp; &nbsp;return new Service2(); &nbsp; }} public class Factories { &nbsp; &nbsp;public static void serviceConsumer(ServiceFactory fact) { &nbsp; &nbsp; &nbsp; &nbsp;Service s = fact.getService(); &nbsp; &nbsp; &nbsp; &nbsp;s.method1(); &nbsp; &nbsp; &nbsp; &nbsp;s.method2(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;serviceConsumer(new Service1Factory()); &nbsp; &nbsp; &nbsp; &nbsp;// Services are completely interchangeable: &nbsp; &nbsp; &nbsp; &nbsp;serviceConsumer(new Service2Factory()); &nbsp; }}�����xxxxxxxxxxService1 method1Service1 method2Service2 method1Service2 method2���û�й�������������ͱ�����ĳ��ָ����Ҫ������ Service ��ȷ�����ͣ��Ӷ�����ǡ���Ĺ�������ΪʲôҪ���Ӷ���ļ�Ӳ��أ�һ��������ԭ���Ǵ�����ܡ����������ڴ���һ����Ϸϵͳ�����磬����ͬ�������¹���������������壺xxxxxxxxxx// interfaces/Games.java// A Game framework using Factory Methodsinterface Game { &nbsp; &nbsp;boolean move();} interface GameFactory { &nbsp; &nbsp;Game getGame();} class Checkers implements Game { &nbsp; &nbsp;private int moves = 0; &nbsp; &nbsp;private static final int MOVES = 3; &nbsp; &nbsp;@Override &nbsp; &nbsp;public boolean move() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Checkers move \" + moves); &nbsp; &nbsp; &nbsp; &nbsp;return ++moves != MOVES; &nbsp; }} class CheckersFactory implements GameFactory { &nbsp; &nbsp;@Override &nbsp; &nbsp;public Game getGame() { &nbsp; &nbsp; &nbsp; &nbsp;return new Checkers(); &nbsp; }} class Chess implements Game { &nbsp; &nbsp;private int moves = 0; &nbsp; &nbsp;private static final int MOVES = 4; &nbsp; &nbsp;@Override &nbsp; &nbsp;public boolean move() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Chess move \" + moves); &nbsp; &nbsp; &nbsp; &nbsp;return ++moves != MOVES; &nbsp; }} class ChessFactory implements GameFactory { &nbsp; &nbsp;@Override &nbsp; &nbsp;public Game getGame() { &nbsp; &nbsp; &nbsp; &nbsp;return new Chess(); &nbsp; }} public class Games { &nbsp; &nbsp;public static void playGame(GameFactory factory) { &nbsp; &nbsp; &nbsp; &nbsp;Game s = factory.getGame(); &nbsp; &nbsp; &nbsp; &nbsp;while (s.move()) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;playGame(new CheckersFactory()); &nbsp; &nbsp; &nbsp; &nbsp;playGame(new ChessFactory()); &nbsp; }}�����xxxxxxxxxxCheckers move 0Checkers move 1Checkers move 2Chess move 0Chess move 1Chess move 2Chess move 3����� Games ��ʾһ�κܸ��ӵĴ��룬��ô���ַ�ʽ��ζ��������ڲ�ͬ���͵���Ϸ�︴����δ��롣�����������һЩ�ܹ������ģʽ������ĸ��Ӿ��ɵ���Ϸ������һ�£��㽫�ῴ��һ�ָ������ŵ�ʹ�������ڲ���Ĺ���ʵ�ַ�ʽ������С����Ϊ�ӿ��Ǻõ�ѡ�񣬴Ӷ�ʹ�ýӿڲ��þ����࣬������ջ��ԡ������κ�ʱ�򣬴����඼�������Ϊ����һ���ӿں͹������ܶ��˶�������������壬ֻҪ�п��ܾʹ����ӿں͹����������߼����������ǿ��ܻ�ʹ�ò�ͬ��ʵ�֣����������������ֳ����ԡ�������һ�ֹ��������Ż����κγ����Զ�Ӧ���������������������ġ����б�Ҫʱ��Ӧ��ʹ�ýӿڽ����ع��������ǵ������Ӷ���ļ�Ӳ㣬�Ӷ���������ĸ����ԡ����ָ����Էǳ��������������ĳ��ȥ�������ָ����ԣ�ֻ����Ϊ����ʶ�����Է���һ���������½ӿڣ���û����������˵������ԭ�򡪡��ðɣ������������������ƣ��ͻ����ɴ���������������������ˡ�ǡ����ԭ��������ʹ��������ǽӿڡ����࿪ʼ�����ʹ�ýӿڵı�Ҫ�Ա�ú���ȷ����ô���ع����ӿ���һ��ΰ��Ĺ��ߣ����������ױ����á�&nbsp;�� 11 �� �ڲ���һ����������һ�����е��࣬�����ڲ��ࡣ�ڲ�����һ�ַǳ����õ����ԣ���Ϊ���������һЩ�߼���ص�����֯��һ�𣬲�����λ���ڲ�����Ŀɼ��ԡ�Ȼ������Ҫ�˽⣬�ڲ������������ȫ��ͬ�ĸ����һ�����Ҫ����������ڲ��࿴����������һ�ִ������ػ��ƣ�����������������ڲ������ǣ��㽫���˽⵽���ڲ���Զ��ֹ��ˣ����˽���Χ�࣬������֮ͨ�ţ����������ڲ���д���Ĵ���������Ŷ����������ܲ����������������� Java 8 �� Lambda ����ʽ�ͷ������ü����˱�д�ڲ�������󣩡�������ڲ�����ܿ�������Щ��֣�����Ҫ��Щʱ���������������ɵ�ʹ�����ǡ����ڲ�������󲢷����Ǻ����Եģ��������������ڲ���Ļ����﷨������֮��&quot;Why inner classes?&quot;��Ӧ��ʹ���ڲ�����洦��ȷ�����ˡ�����ʣ�ಿ�ְ����˶��ڲ����﷨�����꾡��̽������Щ������Ϊ�����Ե��걸�Զ���Ƶģ�������Ҳ������Ҫʹ�����ǣ�����һ��ʼ����Ҫ����ˣ���������Ĳ���Ҳ�����������������ȫ��������Խ����꾡��̽�������ο����ϡ������ڲ��������ڲ���ķ�ʽ����ͬ�����һ����������Ķ���������Χ������棺xxxxxxxxxx// innerclasses/Parcel1.java// Creating inner classespublic class Parcel1 { &nbsp; &nbsp;class Contents { &nbsp; &nbsp; &nbsp; &nbsp;private int i = 11; &nbsp; &nbsp; &nbsp; &nbsp;public int value() { return i; } &nbsp; } &nbsp; &nbsp;class Destination { &nbsp; &nbsp; &nbsp; &nbsp;private String label; &nbsp; &nbsp; &nbsp; &nbsp;Destination(String whereTo) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;label = whereTo; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;String readLabel() { return label; } &nbsp; } &nbsp; &nbsp;// Using inner classes looks just like &nbsp; &nbsp;// using any other class, within Parcel1: &nbsp; &nbsp;public void ship(String dest) { &nbsp; &nbsp; &nbsp; &nbsp;Contents c = new Contents(); &nbsp; &nbsp; &nbsp; &nbsp;Destination d = new Destination(dest); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(d.readLabel()); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel1 p = new Parcel1(); &nbsp; &nbsp; &nbsp; &nbsp;p.ship(\"Tasmania\"); &nbsp; }}���Ϊ��xxxxxxxxxxTasmania�������� ship() ��������ʹ���ڲ����ʱ����ʹ����ͨ��ûʲô��ͬ����������Ե�����ֻ���ڲ����������Ƕ���� Parcel1 ����ġ������͵�����ǣ��ⲿ�ཫ��һ���������÷�������һ��ָ���ڲ�������ã������� to() �� contents() �����п�����������xxxxxxxxxx// innerclasses/Parcel2.java// Returning a reference to an inner classpublic class Parcel2 { &nbsp; &nbsp;class Contents { &nbsp; &nbsp; &nbsp; &nbsp;private int i = 11; &nbsp; &nbsp; &nbsp; &nbsp;public int value() { return i; } &nbsp; } &nbsp; &nbsp;class Destination { &nbsp; &nbsp; &nbsp; &nbsp;private String label; &nbsp; &nbsp; &nbsp; &nbsp;Destination(String whereTo) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;label = whereTo; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;String readLabel() { return label; } &nbsp; } &nbsp; &nbsp;public Destination to(String s) { &nbsp; &nbsp; &nbsp; &nbsp;return new Destination(s); &nbsp; } &nbsp; &nbsp;public Contents contents() { &nbsp; &nbsp; &nbsp; &nbsp;return new Contents(); &nbsp; } &nbsp; &nbsp;public void ship(String dest) { &nbsp; &nbsp; &nbsp; &nbsp;Contents c = contents(); &nbsp; &nbsp; &nbsp; &nbsp;Destination d = to(dest); &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(d.readLabel()); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel2 p = new Parcel2(); &nbsp; &nbsp; &nbsp; &nbsp;p.ship(\"Tasmania\"); &nbsp; &nbsp; &nbsp; &nbsp;Parcel2 q = new Parcel2(); &nbsp; &nbsp; &nbsp; &nbsp;// Defining references to inner classes: &nbsp; &nbsp; &nbsp; &nbsp;Parcel2.Contents c = q.contents(); &nbsp; &nbsp; &nbsp; &nbsp;Parcel2.Destination d = q.to(\"Borneo\"); &nbsp; }}���Ϊ��xxxxxxxxxxTasmania�������ⲿ��ķǾ�̬����֮�������λ�ô���ĳ���ڲ���Ķ�����ô�������� main() �����������������ָ�������������ͣ�OuterClassName.InnerClassName��(����ע�����ⲿ��ľ�̬������Ҳ����ֱ��ָ������ InnerClassName��������������Ҫָ�� OuterClassName.InnerClassName��)�����ⲿ����ĿǰΪֹ���ڲ����ƺ���ֻ��һ���������غ���֯�����ģʽ����Щ�Ǻ����ã���������������עĿ�ģ���������������;��������һ���ڲ���Ķ���ʱ���˶���������������Χ����enclosing object��֮�������һ����ϵ���������ܷ�������Χ��������г�Ա��������Ҫ�κ��������������⣬�ڲ��໹ӵ������Χ�������Ԫ�صķ���Ȩ��xxxxxxxxxx// innerclasses/Sequence.java// Holds a sequence of Objectsinterface Selector { &nbsp; &nbsp;boolean end(); &nbsp; &nbsp;Object current(); &nbsp; &nbsp;void next();}public class Sequence { &nbsp; &nbsp;private Object[] items; &nbsp; &nbsp;private int next = 0; &nbsp; &nbsp;public Sequence(int size) { &nbsp; &nbsp; &nbsp; &nbsp;items = new Object[size]; &nbsp; } &nbsp; &nbsp;public void add(Object x) { &nbsp; &nbsp; &nbsp; &nbsp;if(next &lt; items.length) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;items[next++] = x; &nbsp; } &nbsp; &nbsp;private class SequenceSelector implements Selector { &nbsp; &nbsp; &nbsp; &nbsp;private int i = 0; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public boolean end() { return i == items.length; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public Object current() { return items[i]; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void next() { if(i &lt; items.length) i++; } &nbsp; } &nbsp; &nbsp;public Selector selector() { &nbsp; &nbsp; &nbsp; &nbsp;return new SequenceSelector(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Sequence sequence = new Sequence(10); &nbsp; &nbsp; &nbsp; &nbsp;for(int i = 0; i &lt; 10; i++) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sequence.add(Integer.toString(i)); &nbsp; &nbsp; &nbsp; &nbsp;Selector selector = sequence.selector(); &nbsp; &nbsp; &nbsp; &nbsp;while(!selector.end()) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(selector.current() + \" \"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;selector.next(); &nbsp; &nbsp; &nbsp; } &nbsp; }}���Ϊ��xxxxxxxxxx0 1 2 3 4 5 6 7 8 9Sequence ��ֻ��һ���̶���С�� Object �����飬�������ʽ��װ�����������Ե��� add() ������ĩβ�����µ� Object��ֻҪ���пռ䣩��Ҫ��ȡ Sequence �е�ÿһ�����󣬿���ʹ�� Selector �ӿڡ����ǡ������������ģʽ��һ�����ӣ��ڱ����Ժ�Ĳ��ֽ������ѧϰ����Selector �������������Ƿ�ĩβ�ˣ�end()�������ʵ�ǰ����current()�����Լ��Ƶ������е���һ������next()������Ϊ Selector ��һ���ӿڣ����Ա������԰������Լ��ķ�ʽ��ʵ������ӿڣ����������������Դ˽ӿ�Ϊ�����������ɸ���ͨ�õĴ��롣���SequenceSelector ���ṩ Selector ���ܵ� private �ࡣ���Կ������� main() �д�����һ�� Sequence����������������һЩ String ����Ȼ��ͨ������ selector() ��ȡһ�� Selector���������� Sequence ���ƶ���ѡ��ÿһ��Ԫ�ء� ������� SequenceSelector�����ܻ������ֻ��������һ���ڲ�����ˡ�������ϸ�۲�����ע�ⷽ�� end()��current() �� next() ���õ��� items������һ�����ã��������� SequenceSelector ��һ���֣�������Χ���е�һ�� private �ֶΡ�Ȼ���ڲ�����Է�������Χ��ķ������ֶΣ������Լ�ӵ�������Ƶģ�������˺ܴ�ķ��㣬����ǰ���������ʾ�������ڲ����Զ�ӵ�ж�����Χ�����г�Ա�ķ���Ȩ����������������أ���ĳ����Χ��Ķ��󴴽���һ���ڲ������ʱ�����ڲ������ض������ܵز���һ��ָ���Ǹ���Χ���������á�Ȼ��������ʴ���Χ��ĳ�Աʱ���������Ǹ�������ѡ����Χ��ĳ�Ա�����˵��ǣ�����������㴦�����е�ϸ�ڣ��������ڿ��Կ������ڲ���Ķ���ֻ����������Χ��Ķ��������������²��ܱ�������������Ӧ�ÿ����ģ��ڲ����Ƿ� static ��ʱ���������ڲ������ʱ����Ҫһ��ָ������Χ���������ã�������������ʲ���������þͻᱨ���������������ʱ���ⶼ�������Ա���ġ�ʹ�� .this �� .new�������Ҫ���ɶ��ⲿ���������ã�����ʹ���ⲿ������ֺ������Բ��� this�����������������Զ��ؾ�����ȷ�����ͣ���һ���ڱ����ھͱ�֪�����ܵ���飬���û���κ�����ʱ�����������ʾ��չʾ�����ʹ�� .this��xxxxxxxxxx// innerclasses/DotThis.java// Accessing the outer-class objectpublic class DotThis { &nbsp; &nbsp;void f() { System.out.println(\"DotThis.f()\"); } &nbsp; &nbsp;public class Inner { &nbsp; &nbsp; &nbsp; &nbsp;public DotThis outer() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return DotThis.this; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// A plain \"this\" would be Inner's \"this\" &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public Inner inner() { return new Inner(); } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;DotThis dt = new DotThis(); &nbsp; &nbsp; &nbsp; &nbsp;DotThis.Inner dti = dt.inner(); &nbsp; &nbsp; &nbsp; &nbsp;dti.outer().f(); &nbsp; }}���Ϊ��xxxxxxxxxxDotThis.f()��ʱ�������Ҫ��֪ĳЩ��������ȥ������ĳ���ڲ���Ķ���Ҫʵ�ִ�Ŀ�ģ�������� new ����ʽ���ṩ�������ⲿ���������ã�������Ҫʹ�� .new �﷨����������������xxxxxxxxxx// innerclasses/DotNew.java// Creating an inner class directly using .new syntaxpublic class DotNew { &nbsp; &nbsp;public class Inner {} &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;DotNew dn = new DotNew(); &nbsp; &nbsp; &nbsp; &nbsp;DotNew.Inner dni = dn.new Inner(); &nbsp; }}Ҫ��ֱ�Ӵ����ڲ���Ķ����㲻�ܰ���������ķ�ʽ��ȥ�����ⲿ������� DotNew�����Ǳ���ʹ���ⲿ��Ķ������������ڲ�����󣬾���������ĳ���������������������Ҳ������ڲ�����������������⣬����㲻��������ʵ�����㲻��������dn.new DotNew.Inner����������Կ����� .new Ӧ���� Parcel ��ʾ����xxxxxxxxxx// innerclasses/Parcel3.java// Using .new to create instances of inner classespublic class Parcel3 { &nbsp; &nbsp;class Contents { &nbsp; &nbsp; &nbsp; &nbsp;private int i = 11; &nbsp; &nbsp; &nbsp; &nbsp;public int value() { return i; } &nbsp; } &nbsp; &nbsp;class Destination { &nbsp; &nbsp; &nbsp; &nbsp;private String label; &nbsp; &nbsp; &nbsp; &nbsp;Destination(String whereTo) { label = whereTo; } &nbsp; &nbsp; &nbsp; &nbsp;String readLabel() { return label; } &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel3 p = new Parcel3(); &nbsp; &nbsp; &nbsp; &nbsp;// Must use instance of outer class &nbsp; &nbsp; &nbsp; &nbsp;// to create an instance of the inner class: &nbsp; &nbsp; &nbsp; &nbsp;Parcel3.Contents c = p.new Contents(); &nbsp; &nbsp; &nbsp; &nbsp;Parcel3.Destination d = &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;p.new Destination(\"Tasmania\"); &nbsp; }}��ӵ���ⲿ�����֮ǰ�ǲ����ܴ����ڲ������ġ�������Ϊ�ڲ������ᰵ�������ӵ��������ⲿ������ϡ����ǣ�����㴴������Ƕ���ࣨ��̬�ڲ��ࣩ����ô���Ͳ���Ҫ���ⲿ���������á��ڲ���������ת�������ڲ�������ת��Ϊ����࣬������ת��Ϊһ���ӿڵ�ʱ���ڲ������������֮�ء�����ʵ����ĳ���ӿڵĶ��󣬵õ��Դ˽ӿڵ����ã�������ת��Ϊ�������Ļ��࣬ʵ����Ч����һ���ġ���������Ϊ���ڲ���-ĳ���ӿڵ�ʵ��-�ܹ���ȫ���ɼ������Ҳ����á����õ���ֻ��ָ������ӿڵ����ã������ܹ��ܷ��������ʵ��ϸ�ڡ����ǿ��Դ���ǰһ��ʾ���Ľӿڣ�xxxxxxxxxx// innerclasses/Destination.javapublic interface Destination { &nbsp; &nbsp;String readLabel();}xxxxxxxxxx// innerclasses/Contents.javapublic interface Contents { &nbsp; &nbsp;int value();}���� Contents �� Destination ��ʾ�ͻ��˳���Ա���õĽӿڡ���ס���ӿڵ����г�Ա�Զ�������Ϊ public����ȡ����һ��ָ������ӿڵ�����ʱ�����������޷��ҳ���ȷ�е����ͣ�����������ӣ�xxxxxxxxxx// innerclasses/TestParcel.javaclass Parcel4 { &nbsp; &nbsp;private class PContents implements Contents { &nbsp; &nbsp; &nbsp; &nbsp;private int i = 11; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public int value() { return i; } &nbsp; } &nbsp; &nbsp;protected final class PDestination implements Destination { &nbsp; &nbsp; &nbsp; &nbsp;private String label; &nbsp; &nbsp; &nbsp; &nbsp;private PDestination(String whereTo) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;label = whereTo; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String readLabel() { return label; } &nbsp; } &nbsp; &nbsp;public Destination destination(String s) { &nbsp; &nbsp; &nbsp; &nbsp;return new PDestination(s); &nbsp; } &nbsp; &nbsp;public Contents contents() { &nbsp; &nbsp; &nbsp; &nbsp;return new PContents(); &nbsp; }}public class TestParcel { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel4 p = new Parcel4(); &nbsp; &nbsp; &nbsp; &nbsp;Contents c = p.contents(); &nbsp; &nbsp; &nbsp; &nbsp;Destination d = p.destination(\"Tasmania\"); &nbsp; &nbsp; &nbsp; &nbsp;// Illegal -- can't access private class: &nbsp; &nbsp; &nbsp; &nbsp;//- Parcel4.PContents pc = p.new PContents(); &nbsp; }}�� Parcel4 �У��ڲ��� PContents �� private�����Գ��� Parcel4��û�����ܷ���������ͨ�����ڲ�����ķ���Ȩ�޲��ܱ���Ϊ private ���� protected������ֻ������Ϊ public �� package ����Ȩ�ޡ�PDestination �� protected������ֻ�� Parcel4 �������ࡢ������ Parcel4 ͬһ�����е��ࣨ��Ϊ protected Ҳ�����˰�����Ȩ���ܷ��� PDestination�������඼���ܷ��� PDestination������ζ�ţ�����ͻ��˳���Ա���˽�������Щ��Ա������Ҫ�ܵ����Ƶġ�ʵ���ϣ�������������ת�ͳ� private �ڲ��ࣨ�� protected �ڲ��࣬�����Ǽ̳����������ࣩ����Ϊ���ܷ��������֣������� TestParcel ���п�����������private �ڲ�������������ṩ��һ��;����ͨ�����ַ�ʽ������ȫ��ֹ�κ����������͵ı��룬������ȫ������ʵ�ֵ�ϸ�ڡ����⣬�ӿͻ��˳���Ա�ĽǶ����������ڲ��ܷ����κ������ӵġ�ԭ�������ڹ����ӿڵķ�����������չ�ӿ���û�м�ֵ�ġ���Ҳ�� Java �������ṩ�����ɸ�Ч����Ļ��ᡣ�ڲ��෽������������ĿǰΪֹ��������������ֻ���ڲ���ĵ�����;��ͨ�������������д�Ĵ���������ڲ��࣬��ô���Ƕ��ǡ�ƽ���ġ��ڲ��࣬�򵥲����������⡣Ȼ�����ڲ�����﷨�����˴��������ĸ�����������ļ��������磬������һ���������������������������ڶ����ڲ��ࡣ��ô�����������ɣ���ǰ��ʾ����ʵ����ĳ���͵Ľӿڣ����ǿ��Դ��������ض�������á���Ҫ���һ�����ӵ����⣬�봴��һ������������Ľ�������������ֲ�ϣ��������ǹ������õġ��ں���������У���ǰ�Ĵ��뽫���޸ģ�������ʵ�֣�һ�������ڷ����е��ࡣһ���������������ڵ��࣬���������ڷ������ڲ���һ��ʵ���˽ӿڵ������ࡣһ�������࣬����չ��û��Ĭ�Ϲ��������ࡣһ�������࣬��ִ���ֶγ�ʼ����һ�������࣬��ͨ��ʵ����ʼ��ʵ�ֹ��죨�����ڲ��಻�����й�����������һ������չʾ���ڷ������������ڣ�����������������������ڣ�����һ���������ࡣ�ⱻ�����ֲ��ڲ��ࣺxxxxxxxxxx// innerclasses/Parcel5.java// Nesting a class within a methodpublic class Parcel5 { &nbsp; &nbsp;public Destination destination(String s) { &nbsp; &nbsp; &nbsp; &nbsp;final class PDestination implements Destination { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;private String label; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;private PDestination(String whereTo) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;label = whereTo; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public String readLabel() { return label; } &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;return new PDestination(s); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel5 p = new Parcel5(); &nbsp; &nbsp; &nbsp; &nbsp;Destination d = p.destination(\"Tasmania\"); &nbsp; }}PDestination ���� destination() ������һ���֣������� Parcel5 ��һ���֡����ԣ��� destination() ֮�ⲻ�ܷ��� PDestination��ע������� return ����е�����ת��-���ص��� Destination �����ã����� PDestination �Ļ��ࡣ��Ȼ���� destination() �ж������ڲ��� PDestination��������ζ��һ�� dest() ����ִ����ϣ�PDestination �Ͳ������ˡ��������ͬһ����Ŀ¼�µ��������ж�ĳ���ڲ���ʹ�����ʶ�� PDestination���Ⲣ������������ͻ�����������չʾ��������������������Ƕ��һ���ڲ��ࣺxxxxxxxxxx// innerclasses/Parcel6.java// Nesting a class within a scopepublic class Parcel6 { &nbsp; &nbsp;private void internalTracking(boolean b) { &nbsp; &nbsp; &nbsp; &nbsp;if(b) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;class TrackingSlip { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;private String id; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TrackingSlip(String s) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;id = s; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;String getSlip() { return id; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TrackingSlip ts = new TrackingSlip(\"slip\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;String s = ts.getSlip(); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;// Can't use it here! Out of scope: &nbsp; &nbsp; &nbsp; &nbsp;//- TrackingSlip ts = new TrackingSlip(\"x\"); &nbsp; } &nbsp; &nbsp;public void track() { internalTracking(true); } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel6 p = new Parcel6(); &nbsp; &nbsp; &nbsp; &nbsp;p.track(); &nbsp; }}TrackingSlip �౻Ƕ���� if �����������ڣ��Ⲣ����˵����Ĵ������������ģ�����ʵ������һ�������ˡ�Ȼ�����ڶ��� Trackingslip ��������֮�⣬���ǲ����õģ�����֮�⣬������ͨ����һ���������ڲ�����������ӿ������е���֣�xxxxxxxxxx// innerclasses/Parcel7.java// Returning an instance of an anonymous inner classpublic class Parcel7 { &nbsp; &nbsp;public Contents contents() { &nbsp; &nbsp; &nbsp; &nbsp;return new Contents() { // Insert class definition &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;private int i = 11; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public int value() { return i; } &nbsp; &nbsp; &nbsp; }; // Semicolon required &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel7 p = new Parcel7(); &nbsp; &nbsp; &nbsp; &nbsp;Contents c = p.contents(); &nbsp; }}contents() ����������ֵ���������ʾ�������ֵ����Ķ�������һ�����⣬������������ģ���û�����֡�������ǣ��������ƺ�������Ҫ����һ�� Contents ���󡣵���Ȼ���ڵ����������ķֺ�֮ǰ����ȴ˵������һ�ȣ��������������һ����Ķ��塣������ֵ��﷨ָ���ǣ�������һ���̳��� Contents ��������Ķ��󡣡�ͨ�� new ����ʽ���ص����ñ��Զ�����ת��Ϊ�� Contents �����á����������ڲ�����﷨��������ʽ�ļ���ʽ��xxxxxxxxxx// innerclasses/Parcel7b.java// Expanded version of Parcel7.javapublic class Parcel7b { &nbsp; &nbsp;class MyContents implements Contents { &nbsp; &nbsp; &nbsp; &nbsp;private int i = 11; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public int value() { return i; } &nbsp; } &nbsp; &nbsp;public Contents contents() { &nbsp; &nbsp; &nbsp; &nbsp;return new MyContents(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel7b p = new Parcel7b(); &nbsp; &nbsp; &nbsp; &nbsp;Contents c = p.contents(); &nbsp; }}����������ڲ����У�ʹ����Ĭ�ϵĹ����������� Contents������Ĵ���չʾ���ǣ������Ļ�����Ҫһ���в����Ĺ�������Ӧ����ô�죺xxxxxxxxxx// innerclasses/Parcel8.java// Calling the base-class constructorpublic class Parcel8 { &nbsp; &nbsp;public Wrapping wrapping(int x) { &nbsp; &nbsp; &nbsp; &nbsp;// Base constructor call: &nbsp; &nbsp; &nbsp; &nbsp;return new Wrapping(x) { // [1] &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public int value() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return super.value() * 47; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; }; // [2] &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel8 p = new Parcel8(); &nbsp; &nbsp; &nbsp; &nbsp;Wrapping w = p.wrapping(10); &nbsp; }}[1] �����ʵĲ������ݸ�����Ĺ�������[2] �������ڲ���ĩβ�ķֺţ�������������Ǵ��ڲ�������ġ�ʵ���ϣ�����ǵ��Ǳ���ʽ�Ľ�����ֻ�����������ʽ���ɰ����������ڲ�����ˡ���ˣ������ĵط�ʹ�õķֺ���һ�µġ����� Wrapping ֻ��һ�����о���ʵ�ֵ���ͨ�࣬�������Ǳ������൱���������ӿڡ���ʹ�á�xxxxxxxxxx// innerclasses/Wrapping.javapublic class Wrapping { &nbsp; &nbsp;private int i; &nbsp; &nbsp;public Wrapping(int x) { i = x; } &nbsp; &nbsp;public int value() { return i; }}Ϊ�˶����ԣ�Wrapping ӵ��һ��Ҫ�󴫵�һ�������Ĺ����������������ж����ֶ�ʱ�����ܹ�����ִ�г�ʼ��������xxxxxxxxxx// innerclasses/Parcel9.javapublic class Parcel9 { &nbsp; &nbsp;// Argument must be final or \"effectively final\" &nbsp; &nbsp;// to use within the anonymous inner class: &nbsp; &nbsp;public Destination destination(final String dest) { &nbsp; &nbsp; &nbsp; &nbsp;return new Destination() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;private String label = dest; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public String readLabel() { return label; } &nbsp; &nbsp; &nbsp; }; &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel9 p = new Parcel9(); &nbsp; &nbsp; &nbsp; &nbsp;Destination d = p.destination(\"Tasmania\"); &nbsp; }}�������һ�������ڲ��࣬����ϣ����ʹ��һ�������ⲿ����Ķ�����ô��������Ҫ������������� final �ģ�Ҳ����˵�����ڳ�ʼ���󲻻�ı䣬���Կ��Ա����� final������������ destination() �Ĳ����п���������������ʡ�Ե� final Ҳû���⣬����ͨ����ü��� final ��Ϊһ�ְ�ʾ�����ֻ�Ǽ򵥵ظ�һ���ֶθ�ֵ����ô�����еķ����Ǻܺõġ����ǣ��������һЩ���ƹ���������Ϊ������ô���أ����������в���������������������Ϊ������û���֣�������ͨ��ʵ����ʼ�������ܹ��ﵽΪ�����ڲ��ഴ��һ����������Ч��������������xxxxxxxxxx// innerclasses/AnonymousConstructor.java// Creating a constructor for an anonymous inner classabstract class Base { &nbsp; &nbsp;Base(int i) { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Base constructor, i = \" + i); &nbsp; } &nbsp; &nbsp;public abstract void f();}public class AnonymousConstructor { &nbsp; &nbsp;public static Base getBase(int i) { &nbsp; &nbsp; &nbsp; &nbsp;return new Base(i) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { System.out.println( &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"Inside instance initializer\"); } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public void f() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"In anonymous f()\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; }; &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Base base = getBase(47); &nbsp; &nbsp; &nbsp; &nbsp;base.f(); &nbsp; }}���Ϊ��xxxxxxxxxxBase constructor, i = 47Inside instance initializerIn anonymous f()�ڴ����У���Ҫ�����һ���� final �ġ���Ϊ�����ݸ�������Ļ���Ĺ������������������������ڲ���ֱ��ʹ�á������Ǵ�ʵ����ʼ����&quot;parcel&quot;��ʽ��ע�� destination() �Ĳ��������� final �ģ���Ϊ���������������ڲ�ʹ�õģ�����ע����ʹ���� final, Java 8 �ı�����Ҳ��Ϊ�����Զ����� final���Ա�֤���ݵ�һ���ԣ���xxxxxxxxxx// innerclasses/Parcel10.java// Using \"instance initialization\" to perform// construction on an anonymous inner classpublic class Parcel10 { &nbsp; &nbsp;public Destination &nbsp; &nbsp;destination(final String dest, final float price) { &nbsp; &nbsp; &nbsp; &nbsp;return new Destination() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;private int cost; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Instance initialization for each object: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cost = Math.round(price); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(cost &gt; 100) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Over budget!\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;private String label = dest; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public String readLabel() { return label; } &nbsp; &nbsp; &nbsp; }; &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Parcel10 p = new Parcel10(); &nbsp; &nbsp; &nbsp; &nbsp;Destination d = p.destination(\"Tasmania\", 101.395F); &nbsp; }}���Ϊ��xxxxxxxxxxOver budget!��ʵ����ʼ���������ڲ������Կ�����һ�δ��룬���ǲ�����Ϊ�ֶγ�ʼ��������һ������ִ�У����� if ��䣩�����Զ�����������ԣ�ʵ����ʼ����ʵ��Ч�����ǹ���������Ȼ���ܵ�������-�㲻������ʵ����ʼ�����������������һ�������Ĺ������������ڲ���������ļ̳������Щ���ޣ���Ϊ�����ڲ���ȿ�����չ�࣬Ҳ����ʵ�ֽӿڣ����ǲ������߼汸�����������ʵ�ֽӿڣ�Ҳֻ��ʵ��һ���ӿڡ�Ƕ�����������Ҫ�ڲ������������Χ�����֮������ϵ����ô���Խ��ڲ�������Ϊ static����ͨ����ΪǶ���ࡣ��Ҫ���� static Ӧ�����ڲ���ʱ�ĺ��壬�ͱ����ס����ͨ���ڲ��������ʽ�ر�����һ�����ã�ָ�򴴽�������Χ�����Ȼ�������ڲ����� static ��ʱ���Ͳ��������ˡ�Ƕ������ζ�ţ�Ҫ����Ƕ����Ķ��󣬲�����Ҫ����Χ��Ķ������ܴ�Ƕ����Ķ����з��ʷǾ�̬����Χ�����Ƕ��������ͨ���ڲ��໹��һ��������ͨ�ڲ�����ֶ��뷽����ֻ�ܷ�������ⲿ����ϣ�������ͨ���ڲ��಻���� static ���ݺ� static �ֶΣ�Ҳ���ܰ���Ƕ���ࡣ����Ƕ������԰���������Щ������xxxxxxxxxx// innerclasses/Parcel11.java// Nested classes (static inner classes)public class Parcel11 { &nbsp; &nbsp;private static class ParcelContents implements Contents { &nbsp; &nbsp; &nbsp; &nbsp;private int i = 11; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public int value() { return i; } &nbsp; } &nbsp; &nbsp;protected static final class ParcelDestination &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;implements Destination { &nbsp; &nbsp; &nbsp; &nbsp;private String label; &nbsp; &nbsp; &nbsp; &nbsp;private ParcelDestination(String whereTo) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;label = whereTo; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String readLabel() { return label; } &nbsp; &nbsp; &nbsp; &nbsp;// Nested classes can contain other static elements: &nbsp; &nbsp; &nbsp; &nbsp;public static void f() {} &nbsp; &nbsp; &nbsp; &nbsp;static int x = 10; &nbsp; &nbsp; &nbsp; &nbsp;static class AnotherLevel { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public static void f() {} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;static int x = 10; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static Destination destination(String s) { &nbsp; &nbsp; &nbsp; &nbsp;return new ParcelDestination(s); &nbsp; } &nbsp; &nbsp;public static Contents contents() { &nbsp; &nbsp; &nbsp; &nbsp;return new ParcelContents(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Contents c = contents(); &nbsp; &nbsp; &nbsp; &nbsp;Destination d = destination(\"Tasmania\"); &nbsp; }}�� main() �У�û���κ� Parcel11 �Ķ����Ǳ���ģ�����ʹ��ѡȡ static ��Ա����ͨ�﷨�����÷���-��Щ�������ض� Contents �� Destination �����á��������ڱ���ǰ�濴������������һ����ͨ�ģ��� static���ڲ����У�ͨ��һ������� this ���ÿ������ӵ�����Χ�����Ƕ�����û���������� this ���ã���ʹ����������һ�� static �������ӿ��ڲ�����Ƕ���������Ϊ�ӿڵ�һ���֡���ŵ��ӿ��е��κ��඼�Զ����� public �� static �ġ���Ϊ���� static �ģ�ֻ�ǽ�Ƕ�������ڽӿڵ������ռ��ڣ��Ⲣ��Υ���ӿڵĹ����������������ڲ�����ʵ������Χ�ӿڣ���������������xxxxxxxxxx// innerclasses/ClassInInterface.java// {java ClassInInterface$Test}public interface ClassInInterface { &nbsp; &nbsp;void howdy(); &nbsp; &nbsp;class Test implements ClassInInterface { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void howdy() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Howdy!\"); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Test().howdy(); &nbsp; &nbsp; &nbsp; } &nbsp; }}���Ϊ��xxxxxxxxxxHowdy!�������Ҫ����ĳЩ�������룬ʹ�����ǿ��Ա�ĳ���ӿڵ����в�ͬʵ�������ã���ôʹ�ýӿ��ڲ���Ƕ������Եúܷ��㡣�����ڱ����н��������ÿ�����ж�дһ�� main() ������������������ࡣ��������һ��ȱ�㣬�Ǿ��Ǳ��������Щ�ѱ�����Ķ�����롣���������Ǹ��鷳���ǾͿ���ʹ��Ƕ���������ò��Դ��롣xxxxxxxxxx// innerclasses/TestBed.java// Putting test code in a nested class// {java TestBed$Tester}public class TestBed { &nbsp; &nbsp;public void f() { System.out.println(\"f()\"); } &nbsp; &nbsp;public static class Tester { &nbsp; &nbsp; &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TestBed t = new TestBed(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;t.f(); &nbsp; &nbsp; &nbsp; } &nbsp; }}���Ϊ��xxxxxxxxxxf()��������һ���������� TestBed$Tester��Ҫ�����������ִ�� java TestBed$Tester���� Unix/Linux ϵͳ����Ҫת�� $���������ʹ���������ԣ����ǲ����ڷ����Ĳ�Ʒ�а������������ڴ����Ʒǰɾ�� TestBed$Tester.class���Ӷ��Ƕ�����з����ⲿ��ĳ�Աһ���ڲ��౻Ƕ�׶��ٲ㲢����Ҫ��������͸���ط�����������Ƕ�����Χ������г�Ա��������ʾ��xxxxxxxxxx// innerclasses/MultiNestingAccess.java// Nested classes can access all members of all// levels of the classes they are nested withinclass MNA { &nbsp; &nbsp;private void f() {} &nbsp; &nbsp;class A { &nbsp; &nbsp; &nbsp; &nbsp;private void g() {} &nbsp; &nbsp; &nbsp; &nbsp;public class B { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;void h() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;g(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;f(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; } &nbsp; }}public class MultiNestingAccess { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;MNA mna = new MNA(); &nbsp; &nbsp; &nbsp; &nbsp;MNA.A mnaa = mna.new A(); &nbsp; &nbsp; &nbsp; &nbsp;MNA.A.B mnaab = mnaa.new B(); &nbsp; &nbsp; &nbsp; &nbsp;mnaab.h(); &nbsp; }}���Կ����� MNA.A.B �У����÷��� g() �� f() ����Ҫ�κ���������ʹ���Ǳ�����Ϊ private�����������ͬʱչʾ����δӲ�ͬ�����ﴴ�����Ƕ�׵��ڲ������Ļ����﷨��&quot;.new&quot;�﷨�ܲ�����ȷ�����������Բ����ڵ��ù�����ʱ�޶�������Ϊʲô��Ҫ�ڲ������ˣ������Ѿ����������������ڲ�����﷨�����壬�����Ⲣ����ͬ��Ϊʲô��Ҫ�ڲ��ࡱ������⡣��ô��Java �������Ϊʲô����˷��ĵ�����������������������أ�һ��˵�����ڲ���̳���ĳ�����ʵ��ĳ���ӿڣ��ڲ���Ĵ����������������Χ��Ķ������Կ�����Ϊ�ڲ����ṩ��ĳ�ֽ�������Χ��Ĵ��ڡ��ڲ������Ҫ�ش��һ�������ǣ����ֻ����Ҫһ���Խӿڵ����ã�Ϊʲô��ͨ����Χ��ʵ���Ǹ��ӿ��أ����ǣ��������������������ô��Ӧ��������������ô�ڲ���ʵ��һ���ӿ�����Χ��ʵ������ӿ���ʲô�����أ����ǣ����߲����������õ��ӿڴ����ķ��㣬��ʱ��Ҫ�õ��ӿڵ�ʵ�֡����ԣ�ʹ���ڲ����������˵�ԭ���ǣ�ÿ���ڲ��඼�ܶ����ؼ̳���һ�����ӿڵģ�ʵ�֣�����������Χ���Ƿ��Ѿ��̳���ĳ�����ӿڵģ�ʵ�֣������ڲ��඼û��Ӱ�졣���û���ڲ����ṩ�ġ����Լ̳ж������Ļ��������������һЩ�����������ͺ��ѽ����������Ƕȿ����ڲ���ʹ�ö��ؼ̳еĽ����������������ӿڽ���˲������⣬���ڲ�����Ч��ʵ���ˡ����ؼ̳С���Ҳ����˵���ڲ��������̳ж���ǽӿ����ͣ���ע���������ࣩ��Ϊ�˿��������ϸ�ڣ������ǿ�������һ�����Σ���������һ��������ĳ�ַ�ʽʵ�������ӿڡ����ڽӿڵ�����ԣ���������ѡ��ʹ�õ�һ�࣬����ʹ���ڲ��ࣺxxxxxxxxxx// innerclasses/mui/MultiInterfaces.java// Two ways a class can implement multiple interfaces// {java innerclasses.mui.MultiInterfaces}package innerclasses.mui;interface A {}interface B {}class X implements A, B {}class Y implements A { &nbsp; &nbsp;B makeB() { &nbsp; &nbsp; &nbsp; &nbsp;// Anonymous inner class: &nbsp; &nbsp; &nbsp; &nbsp;return new B() {}; &nbsp; }}public class MultiInterfaces { &nbsp; &nbsp;static void takesA(A a) {} &nbsp; &nbsp;static void takesB(B b) {} &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;X x = new X(); &nbsp; &nbsp; &nbsp; &nbsp;Y y = new Y(); &nbsp; &nbsp; &nbsp; &nbsp;takesA(x); &nbsp; &nbsp; &nbsp; &nbsp;takesA(y); &nbsp; &nbsp; &nbsp; &nbsp;takesB(x); &nbsp; &nbsp; &nbsp; &nbsp;takesB(y.makeB()); &nbsp; }}��Ȼ��������������ַ�ʽ�µĴ���ṹ��ȷʵ���߼����塣Ȼ�����������ʱ��ͨ�����Ȿ�����ܸ���ĳЩָ������������Ӧ��ʹ�õ�һ�࣬����ʹ���ڲ��ࡣ�����û���κ��������ƣ���ʵ�ֵĹ۵�������ǰ������Ӳ�û��ʲô�������Ƕ����������������ӵ�е��ǳ������������࣬�����ǽӿڣ��Ǿ�ֻ��ʹ���ڲ������ʵ�ֶ��ؼ̳У�xxxxxxxxxx// innerclasses/MultiImplementation.java// For concrete or abstract classes, inner classes// produce \"multiple implementation inheritance\"// {java innerclasses.MultiImplementation}package innerclasses; class D {} abstract class E {} class Z extends D { &nbsp; &nbsp;E makeE() { &nbsp; &nbsp; &nbsp;return new E() {}; &nbsp; }} public class MultiImplementation { &nbsp; &nbsp;static void takesD(D d) {} &nbsp; &nbsp;static void takesE(E e) {} &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Z z = new Z(); &nbsp; &nbsp; &nbsp; &nbsp;takesD(z); &nbsp; &nbsp; &nbsp; &nbsp;takesE(z.makeE()); &nbsp; }}�������Ҫ��������ؼ̳С������⣬��ô��Ȼ�����ñ�ķ�ʽ���룬������Ҫʹ���ڲ��ࡣ�����ʹ���ڲ��࣬�����Ի������һЩ���ԣ��ڲ�������ж��ʵ����ÿ��ʵ�������Լ���״̬��Ϣ������������Χ��������Ϣ�໥�������ڵ�����Χ���У������ö���ڲ����Բ�ͬ�ķ�ʽʵ��ͬһ���ӿڣ���̳�ͬһ���ࡣ �Ժ�ͻ�չʾһ�����������ӡ������ڲ�������ʱ�̲�����������Χ�����Ĵ����ڲ��ಢû�������Ի��&quot;is-a����ϵ��������һ��������ʵ�塣�ٸ����ӣ���� Sequence.java ��ʹ���ڲ��࣬�ͱ�������&quot;Sequence ��һ�� Selector&quot;������ĳ���ض��� Sequence ֻ����һ�� Selector��Ȼ��ʹ���ڲ�������׾���ӵ����һ������ reverseSelector()������������һ��������������е� Selector��ֻ���ڲ��������������ԡ��հ���ص��հ���closure����һ���ɵ��õĶ�������¼��һЩ��Ϣ����Щ��Ϣ�����ڴ�������������ͨ��������壬���Կ����ڲ������������ıհ�����Ϊ������������Χ����󣨴����ڲ���������򣩵���Ϣ�����Զ�ӵ��һ��ָ�����Χ���������ã��ڴ��������ڣ��ڲ�����Ȩ�������еĳ�Ա������ private ��Ա���� Java 8 ֮ǰ�����ɱհ���Ϊ��Ψһ��ʽ�����ڲ��ࡣ�� Java 8 ֮�����ǿ���ʹ�� lambda ����ʽ�����ɱհ���Ϊ�������﷨���Ӿ�ϸ�ͼ�ࣻ�㽫���� ����ʽ��� ��һ�½���ѧϰ���ϸ�ڡ���ʹӦ������ʹ�� lambda ����ʽ�����ڲ���հ��������ɻῴ����Щ Java 8 ��ǰ�Ĵ��룬��ʹ���ڲ�������ʾ�հ��ķ�ʽ�����Էǳ��б�Ҫ������������ʽ��Java ���������������֮һ���ǣ�������Ϊ Java Ӧ�ð���ĳ������ָ��Ļ��ƣ��������ص���callback����ͨ���ص��������ܹ�Я��һЩ��Ϣ����Щ��Ϣ���������Ժ��ĳ��ʱ�̵��ó�ʼ�Ķ����Ժ󽫻ῴ������һ���ǳ����õĸ������ص���ͨ��ָ��ʵ�ֵģ���ô��ֻ�ܼ�ϣ���ڳ���Ա�������ø�ָ�롣Ȼ��������Ӧ���Ѿ��˽⵽��Java ��С����ϸ������û���������а���ָ�롣ͨ���ڲ����ṩ�հ��Ĺ����������Ľ������������ָ���������ȫ����������xxxxxxxxxx// innerclasses/Callbacks.java// Using inner classes for callbacks// {java innerclasses.Callbacks}package innerclasses;interface Incrementable { &nbsp; &nbsp;void increment();}// Very simple to just implement the interface:class Callee1 implements Incrementable { &nbsp; &nbsp;private int i = 0; &nbsp; &nbsp;@Override &nbsp; &nbsp;public void increment() { &nbsp; &nbsp; &nbsp; &nbsp;i++; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(i); &nbsp; }}class MyIncrement { &nbsp; &nbsp;public void increment() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Other operation\"); &nbsp; } &nbsp; &nbsp;static void f(MyIncrement mi) { mi.increment(); }}// If your class must implement increment() in// some other way, you must use an inner class:class Callee2 extends MyIncrement { &nbsp; &nbsp;private int i = 0; &nbsp; &nbsp;@Override &nbsp; &nbsp;public void increment() { &nbsp; &nbsp; &nbsp; &nbsp;super.increment(); &nbsp; &nbsp; &nbsp; &nbsp;i++; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(i); &nbsp; } &nbsp; &nbsp;private class Closure implements Incrementable { &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void increment() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Specify outer-class method, otherwise &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// you'll get an infinite recursion: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Callee2.this.increment(); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;Incrementable getCallbackReference() { &nbsp; &nbsp; &nbsp; &nbsp;return new Closure(); &nbsp; }}class Caller { &nbsp; &nbsp;private Incrementable callbackReference; &nbsp; &nbsp;Caller(Incrementable cbh) { &nbsp; &nbsp; &nbsp; &nbsp;callbackReference = cbh; &nbsp; } &nbsp; &nbsp;void go() { callbackReference.increment(); }}public class Callbacks { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Callee1 c1 = new Callee1(); &nbsp; &nbsp; &nbsp; &nbsp;Callee2 c2 = new Callee2(); &nbsp; &nbsp; &nbsp; &nbsp;MyIncrement.f(c2); &nbsp; &nbsp; &nbsp; &nbsp;Caller caller1 = new Caller(c1); &nbsp; &nbsp; &nbsp; &nbsp;Caller caller2 = &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Caller(c2.getCallbackReference()); &nbsp; &nbsp; &nbsp; &nbsp;caller1.go(); &nbsp; &nbsp; &nbsp; &nbsp;caller1.go(); &nbsp; &nbsp; &nbsp; &nbsp;caller2.go(); &nbsp; &nbsp; &nbsp; &nbsp;caller2.go(); &nbsp; }}���Ϊ��xxxxxxxxxxOther operation112Other operation2Other operation3������ӽ�һ��չʾ����Χ��ʵ��һ���ӿ����ڲ���ʵ�ִ˽ӿ�֮������𡣾ʹ�����ԣ�Calleel �Ǹ��򵥵Ľ����ʽ��Callee2 �̳��� MyIncrement�������Ѿ�����һ����ͬ�� increment() ������������ Incrementable �ӿ������� increment() ������ȫ����ء�������� Callee2 �̳��� MyIncrement���Ͳ���Ϊ�� Incrementable ����;������ increment() ����������ֻ��ʹ���ڲ��������ʵ�� Incrementable����Ҫע�⣬��������һ���ڲ���ʱ����û������Χ��Ľӿ������Ӷ�����Ҳû���޸���Χ��Ľӿڡ�ע�⣬�� Callee2 �г��� getCallbackReference() ���⣬������Ա���� private �ġ�Ҫ�뽨�����ⲿ������κ����ӣ��ӿ� Incrementable ���Ǳ���ġ���������Կ�����interface ����������ӿ���ӿڵ�ʵ����ȫ�����ġ� �ڲ��� Closure ʵ���� Incrementable�����ṩһ������ Callee2 �ġ����ӡ���hook��-������һ����ȫ�Ĺ��ӡ�����˭��ô� Incrementable �����ã���ֻ�ܵ��� increment()������֮��û���������ܣ�����ָ�����������������ܶ����飩��Caller �Ĺ�������Ҫһ�� Incrementable ��������Ϊ��������Ȼ����������ʱ�̲���ص����ã���Ȼ�����Ժ��ĳ��ʱ�̣�Caller �������ʹ�ô����ûص� Callee �ࡣ�ص��ļ�ֵ�������������-����������ʱ��̬�ؾ�����Ҫ����ʲô���������磬��ͼ�ν���ʵ�� GUI ���ܵ�ʱ�򣬵������õ��ص����ڲ�������ƿ���ڽ�Ҫ���ܵĿ��ƿ�ܣ�control framework���У����Կ�������ʹ���ڲ���ľ������ӡ�Ӧ�ó����ܣ�application framework�����Ǳ�������Խ��ĳ���ض������һ�����һ���ࡣҪ����ĳ��Ӧ�ó����ܣ�ͨ���Ǽ̳�һ�������࣬������ĳЩ�������ڸ��Ǻ�ķ����У���д���붨��Ӧ�ó������ṩ��ͨ�ý���������Խ������ض����⡣�������ģʽ��ģ�巽����һ�����ӣ�ģ�巽�������㷨�Ļ����ṹ�����һ����һ�������ɸ��ǵķ�����������㷨�Ķ��������ģʽ���ǽ��仯�������뱣�ֲ����������뿪�������ģʽ�У�ģ�巽���Ǳ��ֲ����������ɸ��ǵķ������Ǳ仯��������ƿ����һ�������Ӧ�ó����ܣ������������Ӧ�¼���������Ҫ������Ӧ�¼���ϵͳ�������¼�����ϵͳ��Ӧ�ó�������г���������֮һ��ͼ���û��ӿڣ�GUI������������ȫ���¼�������ϵͳ��Ҫ�����ڲ�������������򵥵Ĵ��������Լ����ʹ�ÿ��ƿ�ܵģ��뿼������һ�����ƿ�ܣ����Ĺ����������¼�����������ʱ��ִ���¼�����Ȼ������������ָ�κ��£����ڱ�������ָ����ʱ�䴥�����¼�����������������ǣ�����Ҫ����ʲô�����ƿ�ܲ��������κξ������Ϣ����Щ��Ϣ����ʵ���㷨�� action() ����ʱ��ͨ���̳����ṩ�ġ����ȣ��ӿ�������Ҫ���Ƶ��¼�����Ϊ��Ĭ�ϵ���Ϊ�ǻ���ʱ��ȥִ�п��ƣ�����ʹ�ó��������ʵ�ʵĽӿڡ���������Ӱ�����ĳЩʵ�֣�xxxxxxxxxx// innerclasses/controller/Event.java// The common methods for any control eventpackage innerclasses.controller;import java.time.*; // Java 8 time classespublic abstract class Event { &nbsp; &nbsp;private Instant eventTime; &nbsp; &nbsp;protected final Duration delayTime; &nbsp; &nbsp;public Event(long millisecondDelay) { &nbsp; &nbsp; &nbsp; &nbsp;delayTime = Duration.ofMillis(millisecondDelay); &nbsp; &nbsp; &nbsp; &nbsp;start(); &nbsp; } &nbsp; &nbsp;public void start() { // Allows restarting &nbsp; &nbsp; &nbsp; &nbsp;eventTime = Instant.now().plus(delayTime); &nbsp; } &nbsp; &nbsp;public boolean ready() { &nbsp; &nbsp; &nbsp; &nbsp;return Instant.now().isAfter(eventTime); &nbsp; } &nbsp; &nbsp;public abstract void action();}��ϣ������ Event �������� start() ʱ����ô�������ͻᲶ�񣨴Ӷ��󴴽���ʱ�̿�ʼ�ģ�ʱ�䣬��ʱ�������������ģ�start() ��ȡ��ǰʱ�䣬Ȼ�����һ���ӳ�ʱ�䣬�������ɴ����¼���ʱ�䡣start() ��һ�������ķ�������û�а����ڹ������ڣ���Ϊ�����Ϳ������¼������Ժ�����������ʱ����Ҳ�����ܹ��ظ�ʹ�� Event �������磬�����Ҫ�ظ�һ���¼���ֻ��򵥵��� action() �е��� start() ������ready() �������ʱ�������� action() �����ˡ���Ȼ���������������и��� ready() ������ʹ�� Event �ܹ�����ʱ��������������ض�������������ļ�������һ�����������������¼���ʵ�ʿ��ƿ�ܡ�Event ���󱻱����� List&lt;Event&gt; ���ͣ�������Event ���б����������������У��������� ���� ����ϸ���ܡ�Ŀǰ����ֻ��Ҫ֪�� add() ����������һ�� Event ���ӵ� List ��β�ˣ�size() ���������õ� List ��Ԫ�صĸ�����foreach �﷨������������ List �е� Event��remove() ���������� List ���Ƴ�ָ���� Event��xxxxxxxxxx// innerclasses/controller/Controller.java// The reusable framework for control systemspackage innerclasses.controller;import java.util.*;public class Controller { &nbsp; &nbsp;// A class from java.util to hold Event objects: &nbsp; &nbsp;private List&lt;Event&gt; eventList = new ArrayList&lt;&gt;(); &nbsp; &nbsp;public void addEvent(Event c) { eventList.add(c); } &nbsp; &nbsp;public void run() { &nbsp; &nbsp; &nbsp; &nbsp;while(eventList.size() &gt; 0) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Make a copy so you're not modifying the list &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// while you're selecting the elements in it: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for(Event e : new ArrayList&lt;&gt;(eventList)) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(e.ready()) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(e); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;e.action(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;eventList.remove(e); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; }}run() ����ѭ������ eventList��Ѱ�Ҿ����ģ�ready()����Ҫ���е� Event ���󡣶��ҵ���ÿһ�������ģ�ready()���¼���ʹ�ö���� toString() ��ӡ����Ϣ�������� action() ������Ȼ����б����Ƴ��� Event��ע�⣬��Ŀǰ��������㲢��֪�� Event ��������ʲô�������Ǵ���ƵĹؼ����ڡ�&quot;ʹ�仯�������벻��������໥���롱�����ҵĻ�˵�����仯���������Ǹ��ֲ�ͬ�� Event ���������еĲ�ͬ��Ϊ������ͨ��������ͬ�� Event ���������ֲ�ͬ����Ϊ���������ڲ���Ҫ�������飬�ڲ������������ƿ�ܵ�����ʵ�����ɵ������ഴ���ģ��Ӷ�ʹ��ʵ�ֵ�ϸ�ڱ���װ���������ڲ���������ʾ�������������ĸ��ֲ�ͬ�� action()���ڲ����ܹ������׵ط�����Χ��������Ա�����Կ��Ա�������ʵ�ֱ�ñ�׾�����û���������������뽫����������ᣬ��������϶���ѡ���ķ��������Ǵ˿��ƿ�ܵ�һ���ض�ʵ�֣���������ҵ����������Ƶƹ⡢ˮ���¶ȵ������Ŀ��أ��Լ��������������ϵͳ��ÿ����Ϊ������ȫ��ͬ�ġ����ƿ�ܵ����ʹ�÷�����Щ��ͬ�Ĵ����÷ǳ����ס�ʹ���ڲ��࣬�����ڵ�һ�������������ͬһ������ Event �Ķ��������汾����������ϵͳ��ÿһ����Ϊ�����̳д���һ���µ� Event �ڲ��࣬����Ҫʵ�ֵ� action() �б�д���ƴ��롣��Ϊ���͵�Ӧ�ó����ܣ�GreenhouseControls ��̳��� Controller��xxxxxxxxxx// innerclasses/GreenhouseControls.java// This produces a specific application of the// control system, all in a single class. Inner// classes allow you to encapsulate different// functionality for each type of event.import innerclasses.controller.*;public class GreenhouseControls extends Controller { &nbsp; &nbsp;private boolean light = false; &nbsp; &nbsp;public class LightOn extends Event { &nbsp; &nbsp; &nbsp; &nbsp;public LightOn(long delayTime) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super(delayTime); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void action() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Put hardware control code here to &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// physically turn on the light. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;light = true; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"Light is on\"; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public class LightOff extends Event { &nbsp; &nbsp; &nbsp; &nbsp;public LightOff(long delayTime) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super(delayTime); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void action() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Put hardware control code here to &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// physically turn off the light. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;light = false; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"Light is off\"; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;private boolean water = false; &nbsp; &nbsp;public class WaterOn extends Event { &nbsp; &nbsp; &nbsp; &nbsp;public WaterOn(long delayTime) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super(delayTime); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void action() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Put hardware control code here. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;water = true; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"Greenhouse water is on\"; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public class WaterOff extends Event { &nbsp; &nbsp; &nbsp; &nbsp;public WaterOff(long delayTime) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super(delayTime); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void action() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Put hardware control code here. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;water = false; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"Greenhouse water is off\"; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;private String thermostat = \"Day\"; &nbsp; &nbsp;public class ThermostatNight extends Event { &nbsp; &nbsp; &nbsp; &nbsp;public ThermostatNight(long delayTime) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super(delayTime); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void action() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Put hardware control code here. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;thermostat = \"Night\"; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"Thermostat on night setting\"; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public class ThermostatDay extends Event { &nbsp; &nbsp; &nbsp; &nbsp;public ThermostatDay(long delayTime) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super(delayTime); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void action() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Put hardware control code here. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;thermostat = \"Day\"; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"Thermostat on day setting\"; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;// An example of an action() that inserts a &nbsp; &nbsp;// new one of itself into the event list: &nbsp; &nbsp;public class Bell extends Event { &nbsp; &nbsp; &nbsp; &nbsp;public Bell(long delayTime) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super(delayTime); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void action() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addEvent(new Bell(delayTime.toMillis())); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"Bing!\"; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public class Restart extends Event { &nbsp; &nbsp; &nbsp; &nbsp;private Event[] eventList; &nbsp; &nbsp; &nbsp; &nbsp;public &nbsp; &nbsp; &nbsp; &nbsp;Restart(long delayTime, Event[] eventList) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super(delayTime); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;this.eventList = eventList; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for(Event e : eventList) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addEvent(e); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void action() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for(Event e : eventList) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;e.start(); // Rerun each event &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addEvent(e); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;start(); // Rerun this Event &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addEvent(this); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"Restarting system\"; &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static class Terminate extends Event { &nbsp; &nbsp; &nbsp; &nbsp;public Terminate(long delayTime) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;super(delayTime); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void action() { System.exit(0); } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public String toString() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return \"Terminating\"; &nbsp; &nbsp; &nbsp; } &nbsp; }}ע�⣬light��water �� thermostat ��������Χ�� GreenhouseControls������Щ�ڲ����ܹ����ɵط�����Щ�ֶΣ������޶��������������ɡ����ң�action() ����ͨ�����漰��ĳ��Ӳ���Ŀ��ơ������ Event �࿴�����������ƣ����� Bell �� Restart ��Ƚ��ر�Bell �������壬Ȼ�����¼��б�������һ�� Bell �������ǹ�һ����������ٴ����塣���߿���ע�⵽���ڲ����Ƕ�ô����ؼ̳У�Bell �� Restart �� Event �����з����������ƺ�Ҳӵ����Χ�� GreenhouseContrlos �����з�����һ���� Event ������ɵ����鱻�ݽ��� Restart��������Ҫ�ӵ��������ϡ����� Restart() Ҳ��һ�� Event ��������ͬ�����Խ� Restart �������ӵ� Restart.action() �У���ʹϵͳ�ܹ��й��ɵ����������Լ����������ͨ������һ�� GreenhouseControls ���󣬲����Ӹ��ֲ�ͬ�� Event ���������ø�ϵͳ�������������ģʽ��һ�����ӡ�eventList �е�ÿ�����󶼱���װ�ɶ��������xxxxxxxxxx// innerclasses/GreenhouseController.java// Configure and execute the greenhouse systemimport innerclasses.controller.*;public class GreenhouseController { &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;GreenhouseControls gc = new GreenhouseControls(); &nbsp; &nbsp; &nbsp; &nbsp;// Instead of using code, you could parse &nbsp; &nbsp; &nbsp; &nbsp;// configuration information from a text file: &nbsp; &nbsp; &nbsp; &nbsp;gc.addEvent(gc.new Bell(900)); &nbsp; &nbsp; &nbsp; &nbsp;Event[] eventList = { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gc.new ThermostatNight(0), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gc.new LightOn(200), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gc.new LightOff(400), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gc.new WaterOn(600), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gc.new WaterOff(800), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gc.new ThermostatDay(1400) &nbsp; &nbsp; &nbsp; }; &nbsp; &nbsp; &nbsp; &nbsp;gc.addEvent(gc.new Restart(2000, eventList)); &nbsp; &nbsp; &nbsp; &nbsp;gc.addEvent( &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new GreenhouseControls.Terminate(5000)); &nbsp; &nbsp; &nbsp; &nbsp;gc.run(); &nbsp; }}���Ϊ��xxxxxxxxxxThermostat on night settingLight is onLight is offGreenhouse water is onGreenhouse water is offBing!Thermostat on day settingBing!Restarting systemThermostat on night settingLight is onLight is offGreenhouse water is onBing!Greenhouse water is offThermostat on day settingBing!Restarting systemThermostat on night settingLight is onLight is offBing!Greenhouse water is onGreenhouse water is offTerminating�����������ǳ�ʼ��ϵͳ��������������������Ӧ���¼���Restart �¼��������У�������ÿ�ζ��Ὣ eventList ���ص� GreenhouseControls �����С�����ṩ�������в�����ϵͳ��������Ϊ������������ʲôʱ����ֹ�������ǲ��Գ���ʱʹ�õģ�����Ȼ�������ķ����Ǳ�����¼�����Ӳ���롣�������Ӧ��ʹ���߸��˽��ڲ���ļ�ֵ�ˣ��ر����ڿ��ƿ����ʹ���ڲ����ʱ���̳��ڲ�����Ϊ�ڲ���Ĺ������������ӵ�ָ������Χ���������ã������ڼ̳��ڲ����ʱ����������е㸴�ӡ������ڸɣ��Ǹ�ָ����Χ�����ġ����ܵġ����ñ��뱻��ʼ���������������в��ٴ��ڿ����ӵ�Ĭ�϶���Ҫ���������⣬����ʹ��������﷨����ȷ˵������֮��Ĺ�����xxxxxxxxxx// innerclasses/InheritInner.java// Inheriting an inner classclass WithInner { &nbsp; &nbsp;class Inner {}}public class InheritInner extends WithInner.Inner { &nbsp; &nbsp;//- InheritInner() {} // Won't compile &nbsp; &nbsp;InheritInner(WithInner wi) { &nbsp; &nbsp; &nbsp; &nbsp;wi.super(); &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;WithInner wi = new WithInner(); &nbsp; &nbsp; &nbsp; &nbsp;InheritInner ii = new InheritInner(wi); &nbsp; }}���Կ�����InheritInner ֻ�̳����ڲ��࣬��������Χ�ࡣ���ǵ�Ҫ����һ��������ʱ��Ĭ�ϵĹ�����������ã����Ҳ���ֻ�Ǵ���һ��ָ����Χ���������á����⣬�����ڹ�������ʹ�������﷨��xxxxxxxxxxenclosingClassReference.super();�������ṩ�˱�Ҫ�����ã�Ȼ�������ܱ���ͨ�����ڲ�����Ա�����ô�����������һ���ڲ��࣬Ȼ��̳�����Χ�ಢ���¶�����ڲ���ʱ���ᷢ��ʲô�أ�Ҳ����˵���ڲ�����Ա��������⿴�����ƺ��Ǹ������õ�˼�룬���ǡ����ǡ��ڲ���ͺ���������Χ���һ����������ʵ������ʲô���ã�xxxxxxxxxx// innerclasses/BigEgg.java// An inner class cannot be overridden like a methodclass Egg { &nbsp; &nbsp;private Yolk y; &nbsp; &nbsp;protected class Yolk { &nbsp; &nbsp; &nbsp; &nbsp;public Yolk() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Egg.Yolk()\"); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;Egg() { &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"New Egg()\"); &nbsp; &nbsp; &nbsp; &nbsp;y = new Yolk(); &nbsp; }}public class BigEgg extends Egg { &nbsp; &nbsp;public class Yolk { &nbsp; &nbsp; &nbsp; &nbsp;public Yolk() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"BigEgg.Yolk()\"); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;new BigEgg(); &nbsp; }}���Ϊ��xxxxxxxxxxNew Egg()Egg.Yolk()Ĭ�ϵ��޲ι������Ǳ������Զ����ɵģ������ǵ��û����Ĭ�Ϲ��������������Ϊ��Ȼ������ BigEgg �Ķ�����ô��ʹ�õ�Ӧ���ǡ����Ǻ󡱵� Yolk �汾����������п��Կ���ʵ����������������ġ��������˵�������̳���ĳ����Χ���ʱ���ڲ��ಢû�з���ʲô�ر�����ı仯���������ڲ�������ȫ����������ʵ�壬�������Լ��������ռ��ڡ���Ȼ����ȷ�ؼ̳�ĳ���ڲ���Ҳ�ǿ��Եģ�xxxxxxxxxx// innerclasses/BigEgg2.java// Proper inheritance of an inner classclass Egg2 { &nbsp; &nbsp;protected class Yolk { &nbsp; &nbsp; &nbsp; &nbsp;public Yolk() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Egg2.Yolk()\"); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;public void f() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Egg2.Yolk.f()\"); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;private Yolk y = new Yolk(); &nbsp; &nbsp;Egg2() { System.out.println(\"New Egg2()\"); } &nbsp; &nbsp;public void insertYolk(Yolk yy) { y = yy; } &nbsp; &nbsp;public void g() { y.f(); }}public class BigEgg2 extends Egg2 { &nbsp; &nbsp;public class Yolk extends Egg2.Yolk { &nbsp; &nbsp; &nbsp; &nbsp;public Yolk() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"BigEgg2.Yolk()\"); &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp;public void f() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"BigEgg2.Yolk.f()\"); &nbsp; &nbsp; &nbsp; } &nbsp; } &nbsp; &nbsp;public BigEgg2() { insertYolk(new Yolk()); } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;Egg2 e2 = new BigEgg2(); &nbsp; &nbsp; &nbsp; &nbsp;e2.g(); &nbsp; }}���Ϊ��xxxxxxxxxxEgg2.Yolk()New Egg2()Egg2.Yolk()BigEgg2.Yolk()BigEgg2.Yolk.f()���� BigEgg2.Yolk ͨ�� extends Egg2.Yolk ��ȷ�ؼ̳��˴��ڲ��࣬���Ҹ��������еķ�����insertYolk() �������� BigEgg2 �����Լ��� Yolk ��������ת��Ϊ Egg2 �е����� y�����Ե� g() ���� y.f() ʱ�����Ǻ���°�� f() ��ִ�С��ڶ��ε��� Egg2.Yolk()������� BigEgg2.Yolk �Ĺ����������������Ĺ����������Կ����ڵ��� g() ��ʱ���°�� f() �������ˡ��ֲ��ڲ���ǰ���ᵽ���������ڴ�����ﴴ���ڲ��࣬���͵ķ�ʽ����һ������������洴�����ֲ��ڲ��಻���з���˵��������Ϊ��������Χ���һ���֣����������Է��ʵ�ǰ������ڵĳ������Լ�����Χ������г�Ա����������ӶԾֲ��ڲ����������ڲ���Ĵ��������˱Ƚϡ�xxxxxxxxxx// innerclasses/LocalInnerClass.java// Holds a sequence of Objectsinterface Counter { &nbsp; &nbsp;int next();}public class LocalInnerClass { &nbsp; &nbsp;private int count = 0; &nbsp; &nbsp;Counter getCounter(final String name) { &nbsp; &nbsp; &nbsp; &nbsp;// A local inner class: &nbsp; &nbsp; &nbsp; &nbsp;class LocalCounter implements Counter { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LocalCounter() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Local inner class can have a constructor &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"LocalCounter()\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public int next() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(name); // Access local final &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return count++; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;return new LocalCounter(); &nbsp; } &nbsp; &nbsp;// Repeat, but with an anonymous inner class: &nbsp; &nbsp;Counter getCounter2(final String name) { &nbsp; &nbsp; &nbsp; &nbsp;return new Counter() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Anonymous inner class cannot have a named &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// constructor, only an instance initializer: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Counter()\"); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public int next() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.print(name); // Access local final &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return count++; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; }; &nbsp; } &nbsp; &nbsp;public static void main(String[] args) { &nbsp; &nbsp; &nbsp; &nbsp;LocalInnerClass lic = new LocalInnerClass(); &nbsp; &nbsp; &nbsp; &nbsp;Counter &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c1 = lic.getCounter(\"Local inner \"), &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;c2 = lic.getCounter2(\"Anonymous inner \"); &nbsp; &nbsp; &nbsp; &nbsp;for(int i = 0; i &lt; 5; i++) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(c1.next()); &nbsp; &nbsp; &nbsp; &nbsp;for(int i = 0; i &lt; 5; i++) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(c2.next()); &nbsp; }}���Ϊ��xxxxxxxxxxLocalCounter()Counter()Local inner 0Local inner 1Local inner 2Local inner 3Local inner 4Anonymous inner 5Anonymous inner 6Anonymous inner 7Anonymous inner 8Anonymous inner 9Counter ���ص��������е���һ��ֵ�����Ƿֱ�ʹ�þֲ��ڲ���������ڲ���ʵ����������ܣ����Ǿ�����ͬ����Ϊ����������Ȼ�ֲ��ڲ���������ڷ������ǲ��ɼ��ģ���Ϊʲô������Ȼʹ�þֲ��ڲ�������������ڲ����أ�Ψһ�������ǣ�������Ҫһ���������Ĺ�������������Ҫ���ع��������������ڲ���ֻ������ʵ����ʼ��������ʹ�þֲ��ڲ������ʹ�������ڲ������һ�����ɾ��ǣ���Ҫ��ֹһ�����ڲ���Ķ����ڲ����ʶ�����ڱ����ÿ���඼�����һ��.class �ļ������а�������δ��������͵Ķ����ȫ����Ϣ������Ϣ����һ��&quot;meta-class&quot;������ Class ���󣩡�����ܲµ��ˣ��ڲ���Ҳ��������һ��.class �ļ��԰������ǵ� Class ������Ϣ����Щ���ļ����������ϸ�Ĺ�����Χ������֣����ϡ�$&quot;���ټ����ڲ�������֡����磬LocalInnerClass.java ���ɵ� .class �ļ�������xxxxxxxxxxCounter.classLocalInnerClass$1.classLocalInnerClass$1LocalCounter.classLocalInnerClass.class����ڲ����������ģ���������򵥵ز���һ��������Ϊ���ʶ��������ڲ�����Ƕ���ڱ���ڲ���֮�У�ֻ��ֱ�ӽ����ǵ����ּ�������Χ���ʶ���롰$���ĺ��档��Ȼ����������ʽ�򵥶�ֱ�ӣ��������Ǻܽ�׳�ģ�����Ӧ�Ծ�������������Ϊ���� java �ı�׼������ʽ�����Բ������ļ��Զ�����ƽ̨�޹صġ���ע�⣬Ϊ�˱�֤����ڲ����������ã�Java �������ᾡ���ܵ�ת�����ǡ�������С����������������������ĸ��������ӿں��ڲ������¸��ӣ����� C++ ��û����Щ�������߽��������ͬ���ܹ���� C++ �е��ö��ؼ̳����ܽ�������⡣Ȼ�������ؼ̳��� C++ �б�֤�����൱����ʹ�õģ���Ƚ϶��ԣ�Java �Ľӿں��ڲ��������������ˡ���Ȼ��Щ���Ա������൱ֱ�۵ģ����Ǿ����̬����һ������Щ���Ե�ʹ��Ӧ������ƽ׶ο��ǵ����⡣����ʱ������ƣ����߽��ܹ����õ�ʶ��ʲô�����Ӧ��ʹ�ýӿڣ�ʲô���ʹ���ڲ��࣬��������ͬʱʹ�á�����ʱ����������Ӧ���Ѿ���ȫ���������ǵ��﷨�����塣�����߼�����Щ�������Ե�ʵ��Ӧ��ʱ�������������������ˡ�&nbsp;&nbsp;&nbsp;�� 12 �� �������һ������ֻ�����̶������Ķ����Ҷ�����������ڶ�����֪�ģ���ô����һ���ǳ��򵥵ĳ���ͨ�����������Ǹ�������ʱ��֪����ĳЩ����ȥ�����µĶ����ڴ�֮ǰ���޷�֪������������������ȷ�����͡�Ϊ�˽������ձ�ı�����⣬��Ҫ������ʱ�̺�����λ�ô������������Ķ�����ˣ�����������������������������ÿһ������xxxxxxxxxxMyType aReference;��Ϊ��������֪��ʵ����Ҫ���ٸ����������á������������Զ��ṩ��ĳ�ַ������������������⡣Java �ж��ַ�ʽ�������ȷ�е�˵���Ƕ�������ã�������ǰ������ѧϰ�������飬���Ǳ�����֧�ֵ����͡������Ǳ���һ����������Ч�ķ�ʽ�������Ҫ����һ������������ݣ�Ҳ�Ƽ�ʹ�����顣����������й̶��Ĵ�С�ߴ磬�����ڸ�һ�������£���д�����ʱ�򲢲�֪������Ҫ���ٸ����󣬻����Ƿ���Ҫ�����ӵķ�ʽ���洢�����������ߴ�̶���һ���ƾ��Ե�̫�������ˡ�java.util ���ṩ��һ���൱��������������collection classes�������������⣬���л����������� List �� Set �� Queue �� Map����Щ����Ҳ��������������container classes�������ҽ�ʹ�� Java ���ʹ�õ���������ṩ�����Ƶķ�����������󣬿���ʹ����Щ������������������⡣���ϻ���һЩ�������ԡ����磬 Set ����ÿ��ֵ��ֻ����һ������ Map ��һ���������飬������ĳЩ�����������������������Java �����඼�����Զ��ص����Լ��Ĵ�С����ˣ������鲻ͬ���ڱ��ʱ�����Խ����������Ķ�������ڼ����У������ù��ļ���Ӧ���ж�������� Java ��û��ֱ�ӵĹؼ���֧�֣�1����������Ȼ�ǿ���������ǿ��������Ļ������ߡ��ڱ����У������� Java �������Ļ���֪ʶ�����ص����һЩ�����÷������ｫרע�����ճ������ʹ�õļ��ϡ��Ժ�����¼�����������У�����ѧϰ���������Щ���Ϻ���ع��ܣ��Լ����ʹ�����ǵĸ�����ϸ��Ϣ�����ͺ����Ͱ�ȫ�ļ���ʹ�� Java 5 ֮ǰ�ļ��ϵ�һ����Ҫ�����Ǳ������������򼯺��в��벻��ȷ�����͡����磬����һ�� Apple ����ļ��ϣ�����ʹ���������ɿ��� ArrayList �����ڣ����԰� ArrayList �����������Զ����������ߴ�����顱��������ʹ�� ArrayList �൱�򵥣�����һ��ʵ������ add() �������Ȼ���� get() ��������Щ���󣬴�ʱ��Ҫʹ�������������������������ǲ���Ҫ�����š�2 ArrayList ����һ�� size() ��������˵�������а����˶��ٸ�Ԫ�أ����Բ��᲻С��������Խ�����������ͨ���׳�����ʱ�쳣���쳣�½ڽ������쳣�����ڱ����У� Apple �� Orange �����ŵ��˼����У�Ȼ������ȡ������������£�Java ��������������棬��Ϊ���ʾ��û��ʹ�÷��͡������ʹ���ض���ע�������ƾ�����Ϣ��ע���ԡ�@�����ſ�ͷ�����Դ������������ @SuppressWarning ע�⼰�������ʾֻ���ơ�unchecked�����͵ľ��棨ע���½ڽ����ܸ����й�ע�����Ϣ����xxxxxxxxxx// collections/ApplesAndOrangesWithoutGenerics.java// Simple collection use (suppressing compiler warnings)// {ThrowsException}import java.util.*; class Apple { &nbsp;private static long counter; &nbsp;private final long id = counter++; &nbsp;public long id() { return id; }} class Orange {} public class ApplesAndOrangesWithoutGenerics { &nbsp;@SuppressWarnings(\"unchecked\") &nbsp;public static void main(String[] args) { &nbsp; &nbsp;ArrayList apples = new ArrayList(); &nbsp; &nbsp;for(int i = 0; i &lt; 3; i++) &nbsp; &nbsp; &nbsp;apples.add(new Apple()); &nbsp; &nbsp;// No problem adding an Orange to apples: &nbsp; &nbsp;apples.add(new Orange()); &nbsp; &nbsp;for(Object apple : apples) { &nbsp; &nbsp; ((Apple) apple).id(); &nbsp; &nbsp; &nbsp;// Orange is detected only at run time &nbsp; } }}/* Output:___[ Error Output ]___Exception in thread \"main\"java.lang.ClassCastException: Orange cannot be cast toApple &nbsp; &nbsp; &nbsp; &nbsp;at ApplesAndOrangesWithoutGenerics.main(ApplesAndOrangesWithoutGenerics.java:23)*/Apple �� Orange �ǽ�Ȼ��ͬ�ģ����ǳ��˶��� Object ֮��û���κι�ͬ�㣨���һ����û����ʽ�������̳����ĸ��࣬��ô�����Զ��̳��� Object������Ϊ ArrayList ������� Object �����Բ�������ͨ�� ArrayList �� add() ������ Apple �������������ϣ����ҿ��Է��� Orange �����������ڱ����ڻ�������ʱ�����������⡣��ʹ�� ArrayList �� get() ������ȡ������Ϊ�� Apple �Ķ���ʱ���õ���ֻ�� Object ���ã����뽫��ת��Ϊ Apple��Ȼ����Ҫ����������ʽ���������������Ա��ڵ��� Apple �� id() ����֮ǰ��ǿ��ִ��ת�͡����򣬽�������﷨����������ʱ�������Խ� Orange ����תΪ Apple ʱ��������������ʾ�Ĵ����������½��У��㽫�˽⵽ʹ�� Java ��������������ܸܺ��ӡ����ǣ�ʹ��Ԥ�ȶ���ķ�����ȴ�൱�򵥡����磬Ҫ����һ�����ڱ��� Apple ����� ArrayList ��ֻ��Ҫʹ�� ArrayList&lt;Apple&gt; ������ ArrayList ���������������������Ͳ��������ܻ��ж��������ָ�����������ʵ�����Ա�������͡�ͨ��ʹ�÷��ͣ��Ϳ����ڱ����ڷ�ֹ���������͵Ķ�����õ������С�3���滹�����ʾ��������ʹ���˷��ͣ�xxxxxxxxxx// collections/ApplesAndOrangesWithGenerics.javaimport java.util.*; public class ApplesAndOrangesWithGenerics { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;ArrayList&lt;Apple&gt; apples = new ArrayList&lt;&gt;(); &nbsp; &nbsp;for(int i = 0; i &lt; 3; i++) &nbsp; &nbsp; &nbsp;apples.add(new Apple()); &nbsp; &nbsp;// Compile-time error: &nbsp; &nbsp;// apples.add(new Orange()); &nbsp; &nbsp;for(Apple apple : apples) { &nbsp; &nbsp; &nbsp;System.out.println(apple.id()); &nbsp; } }}/* Output:012*/�� apples ������Ҳ࣬���Կ��� new ArrayList&lt;&gt;() ������ʱ����Ϊ�������﷨����diamond syntax������ Java 7 ֮ǰ������Ҫ�����˶���������������������ʾ��xxxxxxxxxxArrayList&lt;Apple&gt; apples = new ArrayList&lt;Apple&gt;();�������ͱ��Խ��Խ���ӣ������ظ������Ĵ���ǳ������������Ķ�������Ա��������������Ϣ�����Դ�����ã���ˣ�������û������ǿ���Ҳ����ظ���Щ����Ȼ�����ƶ���type inference��ֻ�Ǹ���С������Java �����Ŷ���Ȼ��Ȼ���ܲ������˸Ľ������� ArrayList �����е�����ָ��������������ֹ�� Orange ���� apples ����ˣ�����Ϊһ�������ڴ������������ʱ����ʹ�÷��ͣ��� List �л�ȡԪ�ز���Ҫǿ������ת������Ϊ List ֪��������ʲô���ͣ���˵����� get() ʱ����������ִ��ת�͡���ˣ�ʹ�÷��ͣ��㲻��֪���������������뼯�ϵĶ������ͣ�������ʹ�ü����еĶ���ʱҲ���Ի�ø��������﷨����ָ����ĳ������Ϊ���Ͳ���ʱ������������ֻ�ܽ�ȷ�����͵Ķ�����뼯���С�����ת��Ҳ��������������������һ�������ڷ��ͣ�xxxxxxxxxx// collections/GenericsAndUpcasting.javaimport java.util.*; class GrannySmith extends Apple {}class Gala extends Apple {}class Fuji extends Apple {}class Braeburn extends Apple {} public class GenericsAndUpcasting { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;ArrayList&lt;Apple&gt; apples = new ArrayList&lt;&gt;(); &nbsp; &nbsp;apples.add(new GrannySmith()); &nbsp; &nbsp;apples.add(new Gala()); &nbsp; &nbsp;apples.add(new Fuji()); &nbsp; &nbsp;apples.add(new Braeburn()); &nbsp; &nbsp;for(Apple apple : apples) &nbsp; &nbsp; &nbsp;System.out.println(apple); }}/* Output:GrannySmith@15db9742Gala@6d06d69cFuji@7852e922Braeburn@4e25154f*/��ˣ����Խ� Apple �����������ӵ���ָ��Ϊ���� Apple ����ļ����С����������Ǵ� Object Ĭ�ϵ� toString() ���������ģ��÷�����ӡ��������߸��Ŷ����ɢ������޷���ʮ�����Ʊ�ʾ�����ɢ������ͨ�� hashCode() ���������ģ���������¼������ equals �� hashCode �������˽��й�ɢ��������ݡ���������Java ���������á����ж��󡱣�holding objects����˼�룬�������Ϊ������ͬ�ĸ����ʾΪ���Ļ����ӿڣ����ϣ�Collection�� ��һ������Ԫ�ص����У���ЩԪ�ض�����һ�����������List �����Բ����˳�򱣴�Ԫ�أ� Set ���ܰ����ظ�Ԫ�أ� Queue �����Ŷӹ�����ȷ�����������˳��ͨ�������Ǳ������˳����ͬ����ӳ�䣨Map�� �� һ��ɶԵġ���ֵ�ԡ���������ʹ�ü�������ֵ�� ArrayList ʹ�����������Ҷ��������ĳ�������Ͻ������ǽ����ֺͶ��������һ�� map ��������ʹ��һ��������������һ��������Ҳ����������������associative array������Ϊ����������������������һ�𣻻��߳����ֵ���dictionary������Ϊ����ʹ��һ��������������ֵ���󣬾������ֵ���ʹ�õ��ʲ��Ҷ���һ���� Map ��ǿ��ı�̹��ߡ����ܲ������ǿ��У�������������£����д�Ĵ󲿷ִ��붼������Щ�ӿڴ򽻵�������Ψһ��Ҫָ����ʹ�õľ�ȷ���͵ĵط������ڴ�����ʱ����ˣ�������������������һ�� List ��xxxxxxxxxxList&lt;Apple&gt; apples = new ArrayList&lt;&gt;();��ע�⣬ ArrayList �Ѿ�������ת��Ϊ�� List ������֮ǰʾ���еĴ�����ʽ�����෴��ʹ�ýӿڵ�Ŀ���ǣ������Ҫ�ı����ʵ�֣�ֻ���ڴ���ʱ�޸��������ˣ���������������xxxxxxxxxxList&lt;Apple&gt; apples = new LinkedList&lt;&gt;();��ˣ�Ӧ�ô���һ��������Ķ��󣬽�������ת��Ϊ��Ӧ�Ľӿڣ�Ȼ������������ж���������ӿڡ����ַ�ʽ����������Ч�ģ���ΪĳЩ�������ж���Ĺ��ܡ����磬 LinkedList ���� List �ӿ���δ�����Ķ��ⷽ������ TreeMap Ҳ������ Map �ӿ���δ�����ķ����������Ҫʹ����Щ�������Ͳ��ܽ���������ת��Ϊ��ͨ�õĽӿڡ�Collection �ӿڸ����������ĸ����һ�ִ��һ�����ķ�ʽ�������Ǹ��򵥵�ʾ������ Integer ���������һ�� Collection �������� ArrayList ��ʾ����Ȼ���ӡ�����е�ÿ��Ԫ�أ�xxxxxxxxxx// collections/SimpleCollection.javaimport java.util.*; public class SimpleCollection { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Collection&lt;Integer&gt; c = new ArrayList&lt;&gt;(); &nbsp; &nbsp;for(int i = 0; i &lt; 10; i++) &nbsp; &nbsp; &nbsp;c.add(i); // Autoboxing &nbsp; &nbsp;for(Integer i : c) &nbsp; &nbsp; &nbsp;System.out.print(i + \", \"); }}/* Output:0, 1, 2, 3, 4, 5, 6, 7, 8, 9,*/������ӽ�ʹ���� Collection �еķ������� add() ��������ʹ���κμ̳��� Collection ����Ķ��󶼿����������������� ArrayList ����������������͡�add() ���������ƾͱ��������� Collection ������һ����Ԫ�ء����ǣ��ĵ��зǳ���ϸ�������� add() ��Ҫȷ����� Collection ����ָ����Ԫ�ء���������Ϊ���ǵ��� Set �ĺ��壬��Ϊ�� Set�У�ֻ�е�Ԫ�ز�����ʱ�Ż�����Ԫ�ء���ʹ�� ArrayList �����κ��������͵� List ʱ��add() ���Ǳ�ʾ�������Ž�ȥ������Ϊ List �������Ƿ�����ظ�Ԫ�ء�����ʹ�� for-in �﷨���������е� Collection ������������չʾ���������ڱ��µĺ������֣�����ѧϰ��һ�������ĸ��������������Ԫ������ java.util ���е� Arrays �� Collections ���ж��кܶ�ʵ�õķ�����������һ�� Collection ������һ��Ԫ�ء�Arrays.asList() ��������һ��������Ƕ��ŷָ���Ԫ���б���ʹ�ÿɱ��������������ת��Ϊ List ���� Collections.addAll() ��������һ�� Collection �����Լ�һ���������һ�����ŷָ����б���������Ԫ�����ӵ� Collection �С��±ߵ�ʾ��չʾ���������������Լ���ͨ�õ� addAll() ���������� Collection ���Ͷ������÷�����xxxxxxxxxx// collections/AddingGroups.java// Adding groups of elements to Collection objectsimport java.util.*; public class AddingGroups { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Collection&lt;Integer&gt; collection = &nbsp; &nbsp; &nbsp;new ArrayList&lt;&gt;(Arrays.asList(1, 2, 3, 4, 5)); &nbsp; &nbsp;Integer[] moreInts = { 6, 7, 8, 9, 10 }; &nbsp; &nbsp;collection.addAll(Arrays.asList(moreInts)); &nbsp; &nbsp;// Runs significantly faster, but you can't &nbsp; &nbsp;// construct a Collection this way: &nbsp; &nbsp;Collections.addAll(collection, 11, 12, 13, 14, 15); &nbsp; &nbsp;Collections.addAll(collection, moreInts); &nbsp; &nbsp;// Produces a list \"backed by\" an array: &nbsp; &nbsp;List&lt;Integer&gt; list = Arrays.asList(16,17,18,19,20); &nbsp; &nbsp;list.set(1, 99); // OK -- modify an element &nbsp; &nbsp;// list.add(21); // Runtime error; the underlying &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // array cannot be resized. }}Collection �Ĺ��������Խ�����һ�� Collection����������������ʼ������ˣ�����ʹ�� Arrays.asList() ��Ϊ����������������롣���ǣ� Collections.addAll() ���еø��죬���Һ����׹���һ��������Ԫ�ص� Collection ��Ȼ����� Collections.addAll() �����������ѡ��ʽ��Collection.addAll() ����ֻ�ܽ�����һ�� Collection ��Ϊ�����������û�� Arrays.asList() �� Collections.addAll() ��������������ʹ�ÿɱ�����б���Ҳ����ֱ��ʹ�� Arrays.asList() �������Ϊһ�� List ����������ĵײ�ʵ�������飬û��������С�������������� List �ϵ��� add() �� remove()�����������������᳢���޸������С�����Ի�������ʱ�õ���Unsupported Operation����֧�ֵĲ�����������xxxxxxxxxx// collections/AsListInference.javaimport java.util.*; class Snow {}class Powder extends Snow {}class Light extends Powder {}class Heavy extends Powder {}class Crusty extends Snow {}class Slush extends Snow {} public class AsListInference { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;List&lt;Snow&gt; snow1 = Arrays.asList( &nbsp; &nbsp; &nbsp;new Crusty(), new Slush(), new Powder()); &nbsp; &nbsp;//- snow1.add(new Heavy()); // Exception &nbsp; &nbsp;List&lt;Snow&gt; snow2 = Arrays.asList( &nbsp; &nbsp; &nbsp;new Light(), new Heavy()); &nbsp; &nbsp;//- snow2.add(new Slush()); // Exception &nbsp; &nbsp;List&lt;Snow&gt; snow3 = new ArrayList&lt;&gt;(); &nbsp; &nbsp;Collections.addAll(snow3, &nbsp; &nbsp; &nbsp;new Light(), new Heavy(), new Powder()); &nbsp; &nbsp;snow3.add(new Crusty()); &nbsp; &nbsp;// Hint with explicit type argument specification: &nbsp; &nbsp;List&lt;Snow&gt; snow4 = Arrays.&lt;Snow&gt;asList( &nbsp; &nbsp; &nbsp; new Light(), new Heavy(), new Slush()); &nbsp; &nbsp;//- snow4.add(new Powder()); // Exception }}�� snow4 �У�ע�� Arrays.asList() �м�ġ���ʾ������ &lt;Snow&gt; �������߱����� Arrays.asList() ���ɵĽ�� List ���͵�ʵ��Ŀ��������ʲô�����Ϊ��ʽ���Ͳ���˵����explicit type argument specification�������ϵĴ�ӡ����ʹ�� Arrays.toString() ����������Ŀɴ�ӡ��ʽ�����Ǵ�ӡ���������κΰ�����������һ�����ӣ����������Ҳ�����˻����� Java ���ϣ�xxxxxxxxxx// collections/PrintingCollections.java// Collections print themselves automaticallyimport java.util.*; public class PrintingCollections { &nbsp;static Collection &nbsp;fill(Collection&lt;String&gt; collection) { &nbsp; &nbsp;collection.add(\"rat\"); &nbsp; &nbsp;collection.add(\"cat\"); &nbsp; &nbsp;collection.add(\"dog\"); &nbsp; &nbsp;collection.add(\"dog\"); &nbsp; &nbsp;return collection; } &nbsp;static Map fill(Map&lt;String, String&gt; map) { &nbsp; &nbsp;map.put(\"rat\", \"Fuzzy\"); &nbsp; &nbsp;map.put(\"cat\", \"Rags\"); &nbsp; &nbsp;map.put(\"dog\", \"Bosco\"); &nbsp; &nbsp;map.put(\"dog\", \"Spot\"); &nbsp; &nbsp;return map; } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;System.out.println(fill(new ArrayList&lt;&gt;())); &nbsp; &nbsp;System.out.println(fill(new LinkedList&lt;&gt;())); &nbsp; &nbsp;System.out.println(fill(new HashSet&lt;&gt;())); &nbsp; &nbsp;System.out.println(fill(new TreeSet&lt;&gt;())); &nbsp; &nbsp;System.out.println(fill(new LinkedHashSet&lt;&gt;())); &nbsp; &nbsp;System.out.println(fill(new HashMap&lt;&gt;())); &nbsp; &nbsp;System.out.println(fill(new TreeMap&lt;&gt;())); &nbsp; &nbsp;System.out.println(fill(new LinkedHashMap&lt;&gt;())); }}/* Output:[rat, cat, dog, dog][rat, cat, dog, dog][rat, cat, dog][cat, dog, rat][rat, cat, dog]{rat=Fuzzy, cat=Rags, dog=Spot}{cat=Rags, dog=Spot, rat=Fuzzy}{rat=Fuzzy, cat=Rags, dog=Spot}*/����ʾ�� Java ���Ͽ��е�������Ҫ���͡����ǵ��������ڼ����е�ÿ�����ۡ���slot�������Ԫ�ظ����� Collection ������ÿ������ֻ�ܱ���һ��Ԫ�ء����༯�ϰ����� List �������ض���˳�򱣴�һ��Ԫ�أ� Set ������Ԫ�ز������ظ��� Queue ��ֻ���ڼ���һ�˲�����󣬲�����һ���Ƴ����󣨾ͱ������ԣ���ֻ�ǲ鿴���е���һ�ַ�ʽ����˲�û����ʾ������ Map ��ÿ�����д��������Ԫ�أ���������֮������ֵ��Ĭ�ϵĴ�ӡ��Ϊ��ʹ�ü����ṩ�� toString() �����������ɿɶ��ԺܺõĽ���� Collection ��ӡ���������÷�������ס��ÿ��Ԫ���ɶ��ŷָ��� Map ���ɴ�������ס��ÿ������ֵ�õȺ����ӣ�������ֵ࣬���Ҳࣩ����һ�� fill() �����������������͵� Collection ����Щ���Ͷ�ʵ���� add() ������������Ԫ�ء�ArrayList �� LinkedList ���� List �����ͣ�������п��Կ��������Ƕ�������˳�򱣴�Ԫ�ء�����֮������𲻽�����ִ��ĳЩ���͵Ĳ���ʱ�����ܣ����� LinkedList �����Ĳ������� ArrayList �����º��潫����Щ���ݽ��и�ȫ���̽�֡�HashSet �� TreeSet �� LinkedHashSet �� Set �����͡�������п��Կ����� Set ������ÿ����ͬ���е�һ�������Ҳ�ͬ�� Set ʵ�ִ洢Ԫ�صķ�ʽҲ��ͬ�� HashSet ʹ���൱���ӵķ����洢Ԫ�أ�������¼�����������н�����̽�֡�����ֻ��Ҫ֪�������ּ����Ǽ���Ԫ�ص���췽������ˣ��洢˳����ȥû��ʲô���壨ͨ��ֻ����ĳ�����Ƿ��� Set �ĳ�Ա�����洢˳�򲢲���Ҫ��������洢˳�����Ҫ�������ʹ�� TreeSet ���������ȽϽ�������򱣴���󣩻� LinkedHashSet �������ձ����ӵ��Ⱥ�˳�򱣴����Map ��Ҳ��Ϊ����������ʹ���������Ҷ��󣬾���һ���򵥵����ݿ⡣�������Ķ����Ϊֵ�� ������һ�� Map ���������������ǵ��׸���ϵ��һ�������Ҫ�������ݣ�Ohio�����׸��������á�Ohio����Ϊ�������ң���������ʹ�������±�һ������������������Ϊ������ÿ������ Map ֻ�洢һ�Ρ�Map.put(key, value) ����һ������Ҫ���ӵ�ֵ��������һ��������������ֵ��������� Map.get(key) ������ü��������ֵ�������ʾ�������Ӽ�ֵ�ԣ���û��ִ�в��ҡ��⽫���Ժ�չʾ����ע�⣬����û��ָ�������ǣ� Map �Ĵ�С����Ϊ�����Զ�������С�� ���⣬ Map ��֪����δ�ӡ�Լ���������ʾ������ļ���ֵ������ʹ���� Map �����ֻ������ HashMap �� TreeMap �� LinkedHashMap ������ֵ������ HashMap �е�˳���ǲ���˳����Ϊ HashMap ʵ��ʹ���˷ǳ����ٵ��㷨������˳�� TreeMap ͨ���ȽϽ����������������� LinkedHashMap �ڱ��� HashMap �����ٶȵ�ͬʱ�����Ĳ���˳�򱣴�����б� ListLists ��ŵ��Ԫ�ر������ض��������С� List �ӿ��� Collection �Ļ��������������෽���������� List ���м�����ɾ��Ԫ�ء����������͵� List �������� ArrayList ���ó��������Ԫ�أ����� List �м�����ɾ��Ԫ��ʱ�ٶȽ�����LinkedList ����ͨ�����۽ϵ͵��� List �м���еĲ����ɾ���������ṩ���Ż���˳����ʡ� LinkedList �������������˵��Խ������������б� ArrayList ������������������ʾ������ typeinfo.pets ����ǰʹ����������Ϣһ���е���⡣����������� Pet ���νṹ���Լ������������ Pet �����һЩ�����ࡣ��ʱ����Ҫ�˽���������ϸ��Ϣ��ֻ��Ҫ֪�����㣺��һ�� Pet �࣬�Լ� Pet �ĸ��������͡���̬�� Pets.arrayList() ��������һ����������ѡȡ�� Pet ����� ArrayList��xxxxxxxxxx// collections/ListFeatures.javaimport typeinfo.pets.*;import java.util.*; public class ListFeatures { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp;List&lt;Pet&gt; pets = Pets.list(7); &nbsp; &nbsp;System.out.println(\"1: \" + pets); &nbsp; &nbsp;Hamster h = new Hamster(); &nbsp; &nbsp;pets.add(h); // Automatically resizes &nbsp; &nbsp;System.out.println(\"2: \" + pets); &nbsp; &nbsp;System.out.println(\"3: \" + pets.contains(h)); &nbsp; &nbsp;pets.remove(h); // Remove by object &nbsp; &nbsp;Pet p = pets.get(2); &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"4: \" + &nbsp;p + \" \" + pets.indexOf(p)); &nbsp; &nbsp;Pet cymric = new Cymric(); &nbsp; &nbsp;System.out.println(\"5: \" + pets.indexOf(cymric)); &nbsp; &nbsp;System.out.println(\"6: \" + pets.remove(cymric)); &nbsp; &nbsp;// Must be the exact object: &nbsp; &nbsp;System.out.println(\"7: \" + pets.remove(p)); &nbsp; &nbsp;System.out.println(\"8: \" + pets); &nbsp; &nbsp;pets.add(3, new Mouse()); // Insert at an index &nbsp; &nbsp;System.out.println(\"9: \" + pets); &nbsp; &nbsp;List&lt;Pet&gt; sub = pets.subList(1, 4); &nbsp; &nbsp;System.out.println(\"subList: \" + sub); &nbsp; &nbsp;System.out.println(\"10: \" + pets.containsAll(sub)); &nbsp; &nbsp;Collections.sort(sub); // In-place sort &nbsp; &nbsp;System.out.println(\"sorted subList: \" + sub); &nbsp; &nbsp;// Order is not important in containsAll(): &nbsp; &nbsp;System.out.println(\"11: \" + pets.containsAll(sub)); &nbsp; &nbsp;Collections.shuffle(sub, rand); // Mix it up &nbsp; &nbsp;System.out.println(\"shuffled subList: \" + sub); &nbsp; &nbsp;System.out.println(\"12: \" + pets.containsAll(sub)); &nbsp; &nbsp;List&lt;Pet&gt; copy = new ArrayList&lt;&gt;(pets); &nbsp; &nbsp;sub = Arrays.asList(pets.get(1), pets.get(4)); &nbsp; &nbsp;System.out.println(\"sub: \" + sub); &nbsp; &nbsp;copy.retainAll(sub); &nbsp; &nbsp;System.out.println(\"13: \" + copy); &nbsp; &nbsp;copy = new ArrayList&lt;&gt;(pets); // Get a fresh copy &nbsp; &nbsp;copy.remove(2); // Remove by index &nbsp; &nbsp;System.out.println(\"14: \" + copy); &nbsp; &nbsp;copy.removeAll(sub); // Only removes exact objects &nbsp; &nbsp;System.out.println(\"15: \" + copy); &nbsp; &nbsp;copy.set(1, new Mouse()); // Replace an element &nbsp; &nbsp;System.out.println(\"16: \" + copy); &nbsp; &nbsp;copy.addAll(2, sub); // Insert a list in the middle &nbsp; &nbsp;System.out.println(\"17: \" + copy); &nbsp; &nbsp;System.out.println(\"18: \" + pets.isEmpty()); &nbsp; &nbsp;pets.clear(); // Remove all elements &nbsp; &nbsp;System.out.println(\"19: \" + pets); &nbsp; &nbsp;System.out.println(\"20: \" + pets.isEmpty()); &nbsp; &nbsp;pets.addAll(Pets.list(4)); &nbsp; &nbsp;System.out.println(\"21: \" + pets); &nbsp; &nbsp;Object[] o = pets.toArray(); &nbsp; &nbsp;System.out.println(\"22: \" + o[3]); &nbsp; &nbsp;Pet[] pa = pets.toArray(new Pet[0]); &nbsp; &nbsp;System.out.println(\"23: \" + pa[3].id()); }}/* Output:1: [Rat, Manx, Cymric, Mutt, Pug, Cymric, Pug]2: [Rat, Manx, Cymric, Mutt, Pug, Cymric, Pug, Hamster]3: true4: Cymric 25: -16: false7: true8: [Rat, Manx, Mutt, Pug, Cymric, Pug]9: [Rat, Manx, Mutt, Mouse, Pug, Cymric, Pug]subList: [Manx, Mutt, Mouse]10: truesorted subList: [Manx, Mouse, Mutt]11: trueshuffled subList: [Mouse, Manx, Mutt]12: truesub: [Mouse, Pug]13: [Mouse, Pug]14: [Rat, Mouse, Mutt, Pug, Cymric, Pug]15: [Rat, Mutt, Cymric, Pug]16: [Rat, Mouse, Cymric, Pug]17: [Rat, Mouse, Mouse, Pug, Cymric, Pug]18: false19: []20: true21: [Manx, Cymric, Rat, EgyptianMau]22: EgyptianMau23: 14*/��ӡ�ж����˺ţ���˿ɴ����׷�ݵ�Դ���롣 �� 1 �����չʾ��ԭʼ���� Pet ��ɵ� List �� �����鲻ͬ�� List �����ڴ��������ӻ�ɾ��Ԫ�أ������е�����С��������������Ҫ��ֵ��һ�ֿ��޸ĵ����С��ڵ� 2 ������п��Կ�������һ�� Hamster �Ľ�����ö��󽫱�׷�ӵ��б���ĩβ������ʹ�� contains() ����ȷ�������Ƿ����б��С����Ҫɾ��һ�����󣬿��Խ��ö�������ô��ݸ� remove() ������ͬ���������һ����������ã�����ʹ�� indexOf() �� List ���ҵ��ö�������λ�õ��±�ţ���� 4 �������ʾ����ʾ����ȷ��Ԫ���Ƿ�������ĳ�� List ��Ѱ��ĳ��Ԫ�ص��������Լ�ͨ�����ô� List ��ɾ��Ԫ��ʱ�������õ� equals() ���������� Object ��һ����������ÿ�� Pet ������Ϊһ��Ψһ�Ķ������Լ�ʹ�б����Ѿ������� Cymrics ������ٴ���һ���µ� Cymric ���󲢽��䴫�ݸ� indexOf() �����������Ϊ -1 ����ʾδ�ҵ��������ҳ��Ե��� remove() ������ɾ��������󽫷��� false �����������࣬ equals() �Ķ������������ͬ�����磬������� String ��������ͬ���������� String ��ȡ���ˣ�Ϊ�˷�ֹ�������⣬�����ע�� List ��Ϊ����� equals() ��Ϊ�������仯���� 7��8 �����չʾ��ɾ���� List �еĶ�����ȫƥ��Ķ����ǳɹ��ġ������� List ���м����һ��Ԫ�أ������ڵ� 9 ���������֮ǰ�Ĵ�����������������һ�����⣺���� LinkedList �����б��м�����ɾ���������۲������ڱ����У����˶��б��м���е�������������ʣ��������� ArrayList ������Ǵ��۸߰��Ĳ��������Ƿ���ζ����Զ��Ӧ���� ArrayList ���м����Ԫ�أ��������ת��Ϊ LinkedList ��������ֻ����ζ����Ӧ����ʶ��������⣬����㿪ʼ��ĳ�� ArrayList �м�ִ�кܶ������������ҳ���ʼ��������ô��Ӧ�ÿ������ List ʵ���п��ܾ���������ף����ִ���ƿ������ѷ�ʽ��ʹ�÷����� profiler�����Ż���һ���ܼ��ֵ����⣬��õĲ��Ծ�����֮���ˣ�ֱ�����ֱ���Ҫȥ�������ˣ�����ȥ������Щ��������һ���ܺõ����⣩��subList() �����������ɵشӸ�����б��д�����Ƭ��������Ƭ������ݸ�ԭ������ϴ���б��� containsAll() ����ʱ������Ȼ�ػ�õ� true����ע�⣬˳�򲢲���Ҫ���ڵ� 11��12 ������п��Կ������� sub �ϵ���ֱ�������� Collections.sort() �� Collections.shuffle() ����������Ӱ�� containsAll() �Ľ���� subList() ���������б���Ļ��֧�־���ԭʼ�б�����ˣ����������б��ĸ��Ķ����ᷴӳ��ԭʼ�б��У���֮��Ȼ��retainAll() ����ʵ������һ�������Ͻ������������ڱ����У���������ͬʱ�� copy �� sub �е�����Ԫ�ء����ٴ�ע�⣬�������Ľ����Ϊ������ equals() �������� 14 �����չʾ��ʹ����������ɾ��Ԫ�صĽ������ͨ������������ɾ��Ԫ����ȣ����Եø���ֱ�ۣ���Ϊ��ʹ������ʱ�����ص��� equals() ����Ϊ��removeAll() ����Ҳ�ǻ��� equals() �������еġ� ����˼�壬����� List ��ɾ���ڲ��� List �е�����Ԫ�ء�set() �����������Եúܲ���ʱ�ˣ���Ϊ���� Set �����Ǳ�ڵĳ�ͻ��������ʹ�á�replace�����ܸ��ʺϣ���Ϊ���Ĺ������õڶ��������滻��������Ԫ�أ���һ������������ 17 ��������������� List ����һ�����ص� addAll() �������Խ����б����뵽ԭʼ�б����м�λ�ã������ǽ����� Collection �� addAll() ��������׷�ӵ��б���ĩβ���� 18 - 20 �����չʾ�� isEmpty() �� clear() ������Ч������ 22��23 �����չʾ�����ʹ�� toArray() ����������� Collection ת��Ϊ���顣����һ�����ط��������޲ΰ汾����һ�� Object ���飬���������Ŀ�����͵����鴫�ݸ�������ذ汾����ô��������һ��ָ�����͵����飨������ͨ�������ͼ�飩�������������̫С���޷����� List �е�����Ԫ�أ�������һ�������� toArray() �ᴴ��һ�����к��ʳߴ�������顣 Pet ������һ�� id() �������������������������еĶ����ϵ������������������ Iterators���κμ����У���������ĳ�ַ�ʽ���Բ���Ԫ�ز��ٴλ�ȡ���ǡ��Ͼ������������Ǽ���������Ĺ��������� List �� add() �ǲ���Ԫ�ص�һ�ַ�ʽ�� get() �ǻ�ȡԪ�ص�һ�ַ�ʽ������Ӹ��߲�εĽǶȿ��ǣ��ᷢ�������и�ȱ�㣺Ҫʹ�ü��ϣ�����Լ��ϵ�ȷ�����ͱ�̡���һ��ʼ���ܿ��������Ǻ���⣬���ǿ����������������ԭ���Ƕ� List ����ģ����Ǻ�����������ܹ�����ͬ�Ĵ���Ӧ���� Set ������㣬��ʱӦ����ô�������߼������һ��ʼ�ͱ�дһ��ͨ�ô��룬����֪���򲻹���������ʹ��ʲô���͵ļ��ϣ�������������ڲ�ͬ���͵ļ��ϣ���ô��β��ܲ���д����Ϳ���Ӧ���ڲ�ͬ���͵ļ��ϣ���������Ҳ��һ�����ģʽ���ĸ���ʵ�������ֳ��󡣵�������һ����������һ���������ƶ���ѡ��������е�ÿ�����󣬶��ͻ��˳���Ա��֪���򲻹��ĸ����еĵײ�ṹ�����⣬������ͨ������Ϊ������������lightweight object�����������Ĵ���С����ˣ��������Կ���һЩ�Ե�������Щ��ֵ�Լ�������磬Java �� Iterator ֻ�ܵ����ƶ������ Iterator ֻ��������ʹ�� iterator() ����Ҫ�󼯺Ϸ���һ�� Iterator�� Iterator ��׼���÷��������еĵ�һ��Ԫ�ء�ʹ�� next() ������������е���һ��Ԫ�ء�ʹ�� hasNext() ��������������Ƿ���Ԫ�ء�ʹ�� remove() ������������������ص��Ǹ�Ԫ��ɾ����Ϊ�˹۲����Ĺ�����ʽ�������ٴ�ʹ��������Ϣ�½��е� Pet ���ߣ�xxxxxxxxxx// collections/SimpleIteration.javaimport typeinfo.pets.*;import java.util.*; public class SimpleIteration { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;List&lt;Pet&gt; pets = Pets.list(12); &nbsp; &nbsp;Iterator&lt;Pet&gt; it = pets.iterator(); &nbsp; &nbsp;while(it.hasNext()) { &nbsp; &nbsp; &nbsp;Pet p = it.next(); &nbsp; &nbsp; &nbsp;System.out.print(p.id() + \":\" + p + \" \"); &nbsp; } &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;// A simpler approach, when possible: &nbsp; &nbsp;for(Pet p : pets) &nbsp; &nbsp; &nbsp;System.out.print(p.id() + \":\" + p + \" \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;// An Iterator can also remove elements: &nbsp; &nbsp;it = pets.iterator(); &nbsp; &nbsp;for(int i = 0; i &lt; 6; i++) { &nbsp; &nbsp; &nbsp;it.next(); &nbsp; &nbsp; &nbsp;it.remove(); &nbsp; } &nbsp; &nbsp;System.out.println(pets); }}/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx 8:Cymric 9:Rat 10:EgyptianMau 11:Hamster0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx 8:Cymric 9:Rat 10:EgyptianMau 11:Hamster[Pug, Manx, Cymric, Rat, EgyptianMau, Hamster]*/���� Iterator ���Ͳ�����Ϊ������Ԫ�ص����������ˡ������� hasNext() �� next() ���ĵ����顣���ֻ������ǰ���� List �����������޸� List ����������ôʹ�� for-in �﷨���Ӽ�ࡣIterator ������ɾ���� next() ���ɵ����һ��Ԫ�أ�����ζ���ڵ��� remove() ֮ǰ�����ȵ��� next() ��4�ڼ����е�ÿ��������ִ�в���������˼��ʮ��ǿ�󣬲��ҹᴩ�ڱ��顣���ڿ��Ǵ���һ�� display() ������������֪�����ϵ�ȷ�����ͣ�xxxxxxxxxx// collections/CrossCollectionIteration.javaimport typeinfo.pets.*;import java.util.*; public class CrossCollectionIteration { &nbsp;public static void display(Iterator&lt;Pet&gt; it) { &nbsp; &nbsp;while(it.hasNext()) { &nbsp; &nbsp; &nbsp;Pet p = it.next(); &nbsp; &nbsp; &nbsp;System.out.print(p.id() + \":\" + p + \" \"); &nbsp; } &nbsp; &nbsp;System.out.println(); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;List&lt;Pet&gt; pets = Pets.list(8); &nbsp; &nbsp;LinkedList&lt;Pet&gt; petsLL = new LinkedList&lt;&gt;(pets); &nbsp; &nbsp;HashSet&lt;Pet&gt; petsHS = new HashSet&lt;&gt;(pets); &nbsp; &nbsp;TreeSet&lt;Pet&gt; petsTS = new TreeSet&lt;&gt;(pets); &nbsp; &nbsp;display(pets.iterator()); &nbsp; &nbsp;display(petsLL.iterator()); &nbsp; &nbsp;display(petsHS.iterator()); &nbsp; &nbsp;display(petsTS.iterator()); }}/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx5:Cymric 2:Cymric 7:Manx 1:Manx 3:Mutt 6:Pug 4:Pug0:Rat*/display() �����������κ��й��������������е�������Ϣ����Ҳչʾ�� Iterator �������������ܹ����������еĲ���������еĵײ�ṹ���롣�������ԭ��������ʱ��˵��������ͳһ�˶Լ��ϵķ��ʷ�ʽ�����ǿ���ʹ�� Iterable �ӿ�������һ��ʾ���ĸ����汾���ýӿ������ˡ����Բ��� Iterator ���κζ�������xxxxxxxxxx// collections/CrossCollectionIteration2.javaimport typeinfo.pets.*;import java.util.*; public class CrossCollectionIteration2 { &nbsp;public static void display(Iterable&lt;Pet&gt; ip) { &nbsp; &nbsp;Iterator&lt;Pet&gt; it = ip.iterator(); &nbsp; &nbsp;while(it.hasNext()) { &nbsp; &nbsp; &nbsp;Pet p = it.next(); &nbsp; &nbsp; &nbsp;System.out.print(p.id() + \":\" + p + \" \"); &nbsp; } &nbsp; &nbsp;System.out.println(); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;List&lt;Pet&gt; pets = Pets.list(8); &nbsp; &nbsp;LinkedList&lt;Pet&gt; petsLL = new LinkedList&lt;&gt;(pets); &nbsp; &nbsp;HashSet&lt;Pet&gt; petsHS = new HashSet&lt;&gt;(pets); &nbsp; &nbsp;TreeSet&lt;Pet&gt; petsTS = new TreeSet&lt;&gt;(pets); &nbsp; &nbsp;display(pets); &nbsp; &nbsp;display(petsLL); &nbsp; &nbsp;display(petsHS); &nbsp; &nbsp;display(petsTS); }}/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx5:Cymric 2:Cymric 7:Manx 1:Manx 3:Mutt 6:Pug 4:Pug0:Rat*/�������е��඼�� Iterable ���������ڶ� display() �ĵ�����Ȼ���򵥡�ListIteratorListIterator ��һ����ǿ��� Iterator �����ͣ���ֻ���ɸ��� List �����ɡ� Iterator ֻ����ǰ�ƶ����� ListIterator ����˫���ƶ�������������������ڵ��������б���ָ��ĵ�ǰλ�õĺ�һ����ǰһ��Ԫ�ص����������ҿ���ʹ�� set() �����滻�����ʹ������һ��Ԫ�ء�����ͨ������ listIterator() ����������ָ�� List ��ͷ���� ListIterator ��������ͨ������ listIterator(n) ����һ��һ��ʼ��ָ���б�������Ϊ n ��Ԫ�ش��� ListIterator �� �����ʾ����ʾ��������Щ������xxxxxxxxxx// collections/ListIteration.javaimport typeinfo.pets.*;import java.util.*; public class ListIteration { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;List&lt;Pet&gt; pets = Pets.list(8); &nbsp; &nbsp;ListIterator&lt;Pet&gt; it = pets.listIterator(); &nbsp; &nbsp;while(it.hasNext()) &nbsp; &nbsp; &nbsp;System.out.print(it.next() + &nbsp; &nbsp; &nbsp; &nbsp;\", \" + it.nextIndex() + &nbsp; &nbsp; &nbsp; &nbsp;\", \" + it.previousIndex() + \"; \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;// Backwards: &nbsp; &nbsp;while(it.hasPrevious()) &nbsp; &nbsp; &nbsp;System.out.print(it.previous().id() + \" \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;System.out.println(pets); &nbsp; &nbsp;it = pets.listIterator(3); &nbsp; &nbsp;while(it.hasNext()) { &nbsp; &nbsp; &nbsp;it.next(); &nbsp; &nbsp; &nbsp;it.set(Pets.get()); &nbsp; } &nbsp; &nbsp;System.out.println(pets); }}/* Output:Rat, 1, 0; Manx, 2, 1; Cymric, 3, 2; Mutt, 4, 3; Pug,5, 4; Cymric, 6, 5; Pug, 7, 6; Manx, 8, 7;7 6 5 4 3 2 1 0[Rat, Manx, Cymric, Mutt, Pug, Cymric, Pug, Manx][Rat, Manx, Cymric, Cymric, Rat, EgyptianMau, Hamster,EgyptianMau]*/Pets.get() ����������λ�� 3 ��ʼ�滻 List �е����� Pet �������� LinkedListLinkedList Ҳ�� ArrayList һ��ʵ���˻����� List �ӿڣ������� List �м�ִ�в����ɾ������ʱ�� ArrayList ����Ч��Ȼ��,����������ʲ���Ч�ʷ���ȴҪѷɫһЩ��LinkedList ��������һЩ������ʹ����Ա�����ջ�����л�˫�˶��У�deque�� ������Щ�����У���Щ�˴�֮�����ֻ��������Щ���죬����ֻ����Щ�����죬��ʹ����Щ�������ض��÷��������Ļ����и������ã��ر����� Queue �У������磺getFirst() �� element() ����ͬ�ģ����Ƕ������б���ͷ������һ��Ԫ�أ�������ɾ��������� List Ϊ�գ����׳� NoSuchElementException �쳣�� peek() ����������������ֻ�����в��죬�����б�Ϊ��ʱ���� null ��removeFirst() �� remove() Ҳ����ͬ�ģ�����ɾ���������б���ͷ��Ԫ�أ������б�Ϊ��ʱ�׳� NoSuchElementException �쳣�� poll() ���в��죬�����б�Ϊ��ʱ���� null ��addFirst() ���б��Ŀ�ͷ����һ��Ԫ�ء�offer() �� add() �� addLast() ��ͬ�� ���Ƕ����б���β����ĩβ������һ��Ԫ�ء�removeLast() ɾ���������б������һ��Ԫ�ء������ʾ��չʾ����Щ����֮������������ԺͲ����ԡ����������ظ�ִ�� ListFeatures.java ����ʾ����Ϊ��xxxxxxxxxx// collections/LinkedListFeatures.javaimport typeinfo.pets.*;import java.util.*; public class LinkedListFeatures { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;LinkedList&lt;Pet&gt; pets = &nbsp; &nbsp; &nbsp;new LinkedList&lt;&gt;(Pets.list(5)); &nbsp; &nbsp;System.out.println(pets); &nbsp; &nbsp;// Identical: &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"pets.getFirst(): \" + pets.getFirst()); &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"pets.element(): \" + pets.element()); &nbsp; &nbsp;// Only differs in empty-list behavior: &nbsp; &nbsp;System.out.println(\"pets.peek(): \" + pets.peek()); &nbsp; &nbsp;// Identical; remove and return the first element: &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"pets.remove(): \" + pets.remove()); &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"pets.removeFirst(): \" + pets.removeFirst()); &nbsp; &nbsp;// Only differs in empty-list behavior: &nbsp; &nbsp;System.out.println(\"pets.poll(): \" + pets.poll()); &nbsp; &nbsp;System.out.println(pets); &nbsp; &nbsp;pets.addFirst(new Rat()); &nbsp; &nbsp;System.out.println(\"After addFirst(): \" + pets); &nbsp; &nbsp;pets.offer(Pets.get()); &nbsp; &nbsp;System.out.println(\"After offer(): \" + pets); &nbsp; &nbsp;pets.add(Pets.get()); &nbsp; &nbsp;System.out.println(\"After add(): \" + pets); &nbsp; &nbsp;pets.addLast(new Hamster()); &nbsp; &nbsp;System.out.println(\"After addLast(): \" + pets); &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"pets.removeLast(): \" + pets.removeLast()); }}/* Output:[Rat, Manx, Cymric, Mutt, Pug]pets.getFirst(): Ratpets.element(): Ratpets.peek(): Ratpets.remove(): Ratpets.removeFirst(): Manxpets.poll(): Cymric[Mutt, Pug]After addFirst(): [Rat, Mutt, Pug]After offer(): [Rat, Mutt, Pug, Cymric]After add(): [Rat, Mutt, Pug, Cymric, Pug]After addLast(): [Rat, Mutt, Pug, Cymric, Pug, Hamster]pets.removeLast(): Hamster*/Pets.list() �Ľ�������ݸ� LinkedList �Ĺ��������Ա�ʹ��������� LinkedList ������鿴 Queue �ӿھͻᷢ�֣����� LinkedList �Ļ����������� element() �� offer() �� peek() �� poll() �� remove() ��������ʹ����Գ�Ϊһ�� Queue ��ʵ�֡� Queue ������ʾ�����ڱ����Ժ��������ջ Stack��ջ�ǡ�����ȳ�����LIFO�����ϡ�����ʱ����Ϊ����ջ��pushdown stack������Ϊ���ѹ�롱��push��ջ��Ԫ�أ���һ��������������pop��ջ�������������ջ�������Ǵ��е���֧�ܵ������������̡����װ����������������ó���ʹ�õġ�Java 1.0 �и�����һ�� Stack �࣬�����Ƶú���⣨Ϊ�������ݣ�������Զ��� Java �еľ���ƴ��󣩡�Java 6 ������ ArrayDeque �����а���ֱ��ʵ�ֶ�ջ���ܵķ�����xxxxxxxxxx// collections/StackTest.javaimport java.util.*; public class StackTest { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Deque&lt;String&gt; stack = new ArrayDeque&lt;&gt;(); &nbsp; &nbsp;for(String s : \"My dog has fleas\".split(\" \")) &nbsp; &nbsp; &nbsp;stack.push(s); &nbsp; &nbsp;while(!stack.isEmpty()) &nbsp; &nbsp; &nbsp;System.out.print(stack.pop() + \" \"); }}/* Output:fleas has dog My*/��ʹ������Ϊһ����ջ��ʹ�ã�������Ȼ���뽫������Ϊ Deque ����ʱһ����Ϊ Stack ������ܰ����齲�����xxxxxxxxxx// onjava/Stack.java// A Stack class built with an ArrayDequepackage onjava;import java.util.Deque;import java.util.ArrayDeque; public class Stack&lt;T&gt; { &nbsp;private Deque&lt;T&gt; storage = new ArrayDeque&lt;&gt;(); &nbsp;public void push(T v) { storage.push(v); } &nbsp;public T peek() { return storage.peek(); } &nbsp;public T pop() { return storage.pop(); } &nbsp;public boolean isEmpty() { return storage.isEmpty(); } &nbsp;@Override &nbsp;public String toString() { &nbsp; &nbsp;return storage.toString(); }}����������ʹ�÷��͵��ඨ�����򵥵Ŀ���ʾ���������ƺ���� ���߱���������һ�����������ͣ������е����Ͳ��� T ����ʹ����ʱ��ʵ�������滻�������ϣ���������������������ڶ���һ�����Գ��� T ���Ͷ���� Stack ���� Stack ��ʹ�� ArrayDeque ʵ�ֵģ��� ArrayDeque Ҳ����֪�������� T ���Ͷ���ע�⣬ push() ��������Ϊ T �Ķ��󣬶� peek() �� pop() ��������Ϊ T �Ķ��� peek() ����������ջ��Ԫ�أ������������ջ��ɾ������ pop() ɾ�������ض���Ԫ�ء����ֻ��Ҫջ����Ϊ����ôʹ�ü̳��ǲ����ʵģ���Ϊ�⽫����һ������ ArrayDeque ���������з������ࣨ����¼�����������н��ῴ���� Java 1.0 ������ڴ��� java.util.Stack ʱ���ͷ���������󣩡�ʹ����ϣ�����ѡ��Ҫ�����ķ����Լ�����������ǡ����潫ʹ�� StackTest.java �е���ͬ��������ʾ����µ� Stack �ࣺxxxxxxxxxx// collections/StackTest2.javaimport onjava.*; public class StackTest2 { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Stack&lt;String&gt; stack = new Stack&lt;&gt;(); &nbsp; &nbsp;for(String s : \"My dog has fleas\".split(\" \")) &nbsp; &nbsp; &nbsp;stack.push(s); &nbsp; &nbsp;while(!stack.isEmpty()) &nbsp; &nbsp; &nbsp;System.out.print(stack.pop() + \" \"); }}/* Output:fleas has dog My*/��������Լ��Ĵ�����ʹ����� Stack �࣬���ڴ�����ʵ��ʱ������Ҫ����ָ�����������߸������������ƣ����򣬾��п��ܻ��� java.util ���е� Stack ������ͻ�����磬�������������������е��� java.util.*����ô�ͱ���ʹ�ð�������ֹ��ͻ��xxxxxxxxxx// collections/StackCollision.java public class StackCollision { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;onjava.Stack&lt;String&gt; stack = new onjava.Stack&lt;&gt;(); &nbsp; &nbsp;for(String s : \"My dog has fleas\".split(\" \")) &nbsp; &nbsp; &nbsp;stack.push(s); &nbsp; &nbsp;while(!stack.isEmpty()) &nbsp; &nbsp; &nbsp;System.out.print(stack.pop() + \" \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;java.util.Stack&lt;String&gt; stack2 = &nbsp; &nbsp; &nbsp;new java.util.Stack&lt;&gt;(); &nbsp; &nbsp;for(String s : \"My dog has fleas\".split(\" \")) &nbsp; &nbsp; &nbsp;stack2.push(s); &nbsp; &nbsp;while(!stack2.empty()) &nbsp; &nbsp; &nbsp;System.out.print(stack2.pop() + \" \"); }}/* Output:fleas has dog Myfleas has dog My*/�����Ѿ����� java.util.Stack ������ ArrayDeque ���Բ������õ� Stack ����˸���ȡ��������ʹ����ʽ���������ƶԡ���ѡ�� Stack ʵ�ֵ�ѡ��xxxxxxxxxximport onjava.Stack;����,�κζ� Stack �����ö���ѡ�� onjava �汾������ѡ�� java.util.Stack ʱ������ʹ��ȫ�޶����ƣ�full qualification�������� SetSet �������ظ���Ԫ�ء� �����ͼ����ͬ����Ķ��ʵ�����ӵ� Set �У���ô������ֹ�����ظ���Ϊ�� Set �������;�ǲ��Թ����ԣ����Ժ����ɵ�ѯ��ĳ�������Ƿ���һ�� Set �С���ˣ�����ͨ���� Set ����Ҫ�Ĳ��������ͨ����ѡ�� HashSet ʵ�֣���ʵ����Կ��ٲ��ҽ������Ż���Set ������ Collection ��ͬ�Ľӿڣ����û���κζ���Ĺ��ܣ�����ǰ�����ֲ�ͬ���͵� List ������ʵ���ϣ� Set ����һ�� Collection ��ֻ����Ϊ��ͬ�������Ǽ̳кͶ�̬˼��ĵ���Ӧ�ã����ֲ�ͬ����Ϊ����Set ���ݶ���ġ�ֵ��ȷ�������ԣ������ӵ����ݽ�����¼�����������н��ܡ�������ʹ�ô�� Integer ����� HashSet ��ʾ����xxxxxxxxxx// collections/SetOfInteger.javaimport java.util.*; public class SetOfInteger { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp;Set&lt;Integer&gt; intset = new HashSet&lt;&gt;(); &nbsp; &nbsp;for(int i = 0; i &lt; 10000; i++) &nbsp; &nbsp; &nbsp;intset.add(rand.nextInt(30)); &nbsp; &nbsp;System.out.println(intset); }}/* Output:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]*/�� 0 �� 29 ֮��� 10000 ��������������ӵ� Set �У���˿�������ÿ��ֵ���ظ��˺ܶ�Ρ����Ǵӽ���п��Կ�����ÿһ����ֻ��һ��ʵ�������ڽ���С����� Java �汾�е� HashSet ���������û�пɱ���˳��������Ϊ���ڶ��ٶȵ�׷�� HashSet ʹ����ɢ�У��������¼����������һ�¡��� HashSet ά����˳���� TreeSet �� LinkedHashSet ��ͬ����Ϊ���ǵ�ʵ�־��в�ͬ��Ԫ�ش洢��ʽ�� TreeSet ��Ԫ�ش洢�ں�-�������ݽṹ�У��� HashSet ʹ��ɢ�к����� LinkedHashSet ��Ϊ��ѯ�ٶȵ�ԭ��Ҳʹ����ɢ�У����ǿ�����ʹ����������ά��Ԫ�صĲ���˳�򡣿�����ɢ���㷨�����Ѿ��ı��ˣ����� Integer ��˳�����򡣵��ǣ�����Ӧ����������Ϊ��xxxxxxxxxx// collections/SetOfString.javaimport java.util.*; public class SetOfString { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Set&lt;String&gt; colors = new HashSet&lt;&gt;(); &nbsp; &nbsp;for(int i = 0; i &lt; 100; i++) { &nbsp; &nbsp; &nbsp;colors.add(\"Yellow\"); &nbsp; &nbsp; &nbsp;colors.add(\"Blue\"); &nbsp; &nbsp; &nbsp;colors.add(\"Red\"); &nbsp; &nbsp; &nbsp;colors.add(\"Red\"); &nbsp; &nbsp; &nbsp;colors.add(\"Orange\"); &nbsp; &nbsp; &nbsp;colors.add(\"Yellow\"); &nbsp; &nbsp; &nbsp;colors.add(\"Blue\"); &nbsp; &nbsp; &nbsp;colors.add(\"Purple\"); &nbsp; } &nbsp; &nbsp;System.out.println(colors); }}/* Output:[Red, Yellow, Blue, Purple, Orange]*/String �����ƺ�û������Ҫ�Խ����������һ�ַ�����ʹ�� TreeSet ������ HashSet ��xxxxxxxxxx// collections/SortedSetOfString.javaimport java.util.*; public class SortedSetOfString { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Set&lt;String&gt; colors = new TreeSet&lt;&gt;(); &nbsp; &nbsp;for(int i = 0; i &lt; 100; i++) { &nbsp; &nbsp; &nbsp;colors.add(\"Yellow\"); &nbsp; &nbsp; &nbsp;colors.add(\"Blue\"); &nbsp; &nbsp; &nbsp;colors.add(\"Red\"); &nbsp; &nbsp; &nbsp;colors.add(\"Red\"); &nbsp; &nbsp; &nbsp;colors.add(\"Orange\"); &nbsp; &nbsp; &nbsp;colors.add(\"Yellow\"); &nbsp; &nbsp; &nbsp;colors.add(\"Blue\"); &nbsp; &nbsp; &nbsp;colors.add(\"Purple\"); &nbsp; } &nbsp; &nbsp;System.out.println(colors); }}/* Output:[Blue, Orange, Purple, Red, Yellow]*/����Ĳ���֮һ��ʹ�� contains() ���Գ�Ա�����ԣ���Ҳ��һЩ��������������ܻ�����������Сѧѧ����ά��ͼ������ע������ͼ�εĽ��ϱ�ʾ�������֮����߼���ϵ����xxxxxxxxxx// collections/SetOperations.javaimport java.util.*; public class SetOperations { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Set&lt;String&gt; set1 = new HashSet&lt;&gt;(); &nbsp; &nbsp;Collections.addAll(set1, &nbsp; &nbsp; &nbsp;\"A B C D E F G H I J K L\".split(\" \")); &nbsp; &nbsp;set1.add(\"M\"); &nbsp; &nbsp;System.out.println(\"H: \" + set1.contains(\"H\")); &nbsp; &nbsp;System.out.println(\"N: \" + set1.contains(\"N\")); &nbsp; &nbsp;Set&lt;String&gt; set2 = new HashSet&lt;&gt;(); &nbsp; &nbsp;Collections.addAll(set2, \"H I J K L\".split(\" \")); &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"set2 in set1: \" + set1.containsAll(set2)); &nbsp; &nbsp;set1.remove(\"H\"); &nbsp; &nbsp;System.out.println(\"set1: \" + set1); &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"set2 in set1: \" + set1.containsAll(set2)); &nbsp; &nbsp;set1.removeAll(set2); &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"set2 removed from set1: \" + set1); &nbsp; &nbsp;Collections.addAll(set1, \"X Y Z\".split(\" \")); &nbsp; &nbsp;System.out.println( &nbsp; &nbsp; &nbsp;\"'X Y Z' added to set1: \" + set1); }}/* Output:H: trueN: falseset2 in set1: trueset1: [A, B, C, D, E, F, G, I, J, K, L, M]set2 in set1: falseset2 removed from set1: [A, B, C, D, E, F, G, M]'X Y Z' added to set1: [A, B, C, D, E, F, G, M, X, Y,Z]*/��Щ�����������Խ��͵ģ�JDK �ĵ��л���һЩ�����ķ������ܹ�����ÿ��Ԫ�ض�Ψһ���б����൱���õĹ��ܡ����磬������Ҫ�г������ SetOperations.java �ļ��е����е��ʣ�ͨ��ʹ�ñ��������ܵ� java.nio.file.Files.readAllLines() ���������Դ�һ���ļ�����������Ϊһ�� List&lt;String&gt; ��ȡ��ÿ�� String ���������ļ��е�һ�У�xxxxxxxxxx// collections/UniqueWords.javaimport java.util.*;import java.nio.file.*; public class UniqueWords { &nbsp;public static void &nbsp;main(String[] args) throws Exception { &nbsp; &nbsp;List&lt;String&gt; lines = Files.readAllLines( &nbsp; &nbsp; &nbsp;Paths.get(\"SetOperations.java\")); &nbsp; &nbsp;Set&lt;String&gt; words = new TreeSet&lt;&gt;(); &nbsp; &nbsp;for(String line : lines) &nbsp; &nbsp; &nbsp;for(String word : line.split(\"\\\\W+\")) &nbsp; &nbsp; &nbsp; &nbsp;if(word.trim().length() &gt; 0) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;words.add(word); &nbsp; &nbsp;System.out.println(words); }}/* Output:[A, B, C, Collections, D, E, F, G, H, HashSet, I, J, K,L, M, N, Output, Set, SetOperations, String, System, X,Y, Z, add, addAll, added, args, class, collections,contains, containsAll, false, from, import, in, java,main, new, out, println, public, remove, removeAll,removed, set1, set2, split, static, to, true, util,void]*/����������ļ��е�ÿһ�У���ʹ�� String.split() ����ֽ�Ϊ���ʣ�����ʹ���������ʽ \\\\ W + ������ζ����������һ���������� + ���ǵ�����ĸ������ַ������������ʽ�����ַ����½ڽ��ܣ���ÿ��������ʶ������ӵ� Set words �С���Ϊ���� TreeSet �����ԶԽ������������������ǰ��ֵ�˳����lexicographically����ɵģ���˴�д��Сд��ĸλ�ڲ�ͬ�����С�����밴��ĸ˳����alphabetically������������򣬿����� TreeSet ���������� String.CASE_INSENSITIVE_ORDER �Ƚ������Ƚ�����һ����������˳��Ķ��󣩣�xxxxxxxxxx// collections/UniqueWordsAlphabetic.java// Producing an alphabetic listingimport java.util.*;import java.nio.file.*; public class UniqueWordsAlphabetic { &nbsp;public static void &nbsp;main(String[] args) throws Exception { &nbsp; &nbsp;List&lt;String&gt; lines = Files.readAllLines( &nbsp; &nbsp; &nbsp;Paths.get(\"SetOperations.java\")); &nbsp; &nbsp;Set&lt;String&gt; words = &nbsp; &nbsp; &nbsp;new TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); &nbsp; &nbsp;for(String line : lines) &nbsp; &nbsp; &nbsp;for(String word : line.split(\"\\\\W+\")) &nbsp; &nbsp; &nbsp; &nbsp;if(word.trim().length() &gt; 0) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;words.add(word); &nbsp; &nbsp;System.out.println(words); }}/* Output:[A, add, addAll, added, args, B, C, class, collections,contains, containsAll, D, E, F, false, from, G, H,HashSet, I, import, in, J, java, K, L, M, main, N, new,out, Output, println, public, remove, removeAll,removed, Set, set1, set2, SetOperations, split, static,String, System, to, true, util, void, X, Y, Z]*/Comparator �Ƚ������������½���ϸ���ܡ�ӳ�� Map������ӳ�䵽��������������ǽ������������Ч���������磬����һ����������������� Java �� Random �������ԡ���������£� Random ��������������ֲַ�����Ϊ�˲�����һ�㣬����Ҫ���ɴ���������������������ڸ��ַ�Χ�ڵ����ָ����� Map ���Ժ����׵ؽ��������⡣�ڱ����У����� Random ���ɵ����֣���ֵ�Ǹ����ֳ��ֵĴ�����xxxxxxxxxx// collections/Statistics.java// (c)2017 MindView LLC: see Copyright.txt// We make no guarantees that this code is fit for any purpose.// Visit http://OnJava8.com for more book information.// Simple demonstration of HashMapimport java.util.*; public class Statistics { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp;Map&lt;Integer, Integer&gt; m = new HashMap&lt;&gt;(); &nbsp; &nbsp;for(int i = 0; i &lt; 10000; i++) { &nbsp; &nbsp; &nbsp;// Produce a number between 0 and 20: &nbsp; &nbsp; &nbsp;int r = rand.nextInt(20); &nbsp; &nbsp; &nbsp;Integer freq = m.get(r); // [1] &nbsp; &nbsp; &nbsp;m.put(r, freq == null ? 1 : freq + 1); &nbsp; } &nbsp; &nbsp;System.out.println(m); }}/* Output:{0=481, 1=502, 2=489, 3=508, 4=481, 5=503, 6=519,7=471, 8=468, 9=549, 10=513, 11=531, 12=521, 13=506,14=477, 15=497, 16=533, 17=509, 18=478, 19=464}*/[1] �Զ���װ���ƽ�������ɵ� int ת��Ϊ������ HashMap һ��ʹ�õ� Integer ���ã�����ʹ�û������͵ļ��ϣ�����������ڼ����У��� get() ���� null ������ζ�Ÿ����ֵ�һ�γ��֣������� get() ��Ϊ��������֮������ Integer ֵ��Ȼ���ֵ���������Զ���װ�����ٴμ��˱���ʽ����ʵ����ȷʵ�����˶� Integer ��װ��Ͳ��䣩����������ʾ����ʹ��һ�� String ���������� Pet ��������չʾ��ͨ��ʹ�� containsKey() �� containsValue() ����ȥ����һ�� Map ���Բ鿴���Ƿ����ĳ������ĳ��ֵ��xxxxxxxxxx// collections/PetMap.javaimport typeinfo.pets.*;import java.util.*; public class PetMap { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Map&lt;String, Pet&gt; petMap = new HashMap&lt;&gt;(); &nbsp; &nbsp;petMap.put(\"My Cat\", new Cat(\"Molly\")); &nbsp; &nbsp;petMap.put(\"My Dog\", new Dog(\"Ginger\")); &nbsp; &nbsp;petMap.put(\"My Hamster\", new Hamster(\"Bosco\")); &nbsp; &nbsp;System.out.println(petMap); &nbsp; &nbsp;Pet dog = petMap.get(\"My Dog\"); &nbsp; &nbsp;System.out.println(dog); &nbsp; &nbsp;System.out.println(petMap.containsKey(\"My Dog\")); &nbsp; &nbsp;System.out.println(petMap.containsValue(dog)); }}/* Output:{My Dog=Dog Ginger, My Cat=Cat Molly, MyHamster=Hamster Bosco}Dog Gingertruetrue*/Map ������������� Collection һ�����������ɵ���չ�����ά�ȣ�ֻ��Ҫ����һ��ֵΪ Map �� Map����Щ Map ��ֵ�������������ϣ����������� Map������ˣ��ܹ������׵ؽ�������������Կ�������ǿ������ݽṹ�����磬����������׷���ж��������ˣ�ֻ��Ҫһ�� Map&lt;Person, List&lt;Pet&gt;&gt; ���ɣ�xxxxxxxxxx// collections/MapOfList.java// {java collections.MapOfList}package collections;import typeinfo.pets.*;import java.util.*; public class MapOfList { &nbsp;public static final Map&lt;Person, List&lt; ? extends Pet&gt;&gt; &nbsp; &nbsp;petPeople = new HashMap&lt;&gt;(); &nbsp;static { &nbsp; &nbsp;petPeople.put(new Person(\"Dawn\"), &nbsp; &nbsp; &nbsp;Arrays.asList( &nbsp; &nbsp; &nbsp; &nbsp;new Cymric(\"Molly\"), &nbsp; &nbsp; &nbsp; &nbsp;new Mutt(\"Spot\"))); &nbsp; &nbsp;petPeople.put(new Person(\"Kate\"), &nbsp; &nbsp; &nbsp;Arrays.asList(new Cat(\"Shackleton\"), &nbsp; &nbsp; &nbsp; &nbsp;new Cat(\"Elsie May\"), new Dog(\"Margrett\"))); &nbsp; &nbsp;petPeople.put(new Person(\"Marilyn\"), &nbsp; &nbsp; &nbsp;Arrays.asList( &nbsp; &nbsp; &nbsp; &nbsp;new Pug(\"Louie aka Louis Snorkelstein Dupree\"), &nbsp; &nbsp; &nbsp; &nbsp;new Cat(\"Stanford\"), &nbsp; &nbsp; &nbsp; &nbsp;new Cat(\"Pinkola\"))); &nbsp; &nbsp;petPeople.put(new Person(\"Luke\"), &nbsp; &nbsp; &nbsp;Arrays.asList( &nbsp; &nbsp; &nbsp; &nbsp;new Rat(\"Fuzzy\"), new Rat(\"Fizzy\"))); &nbsp; &nbsp;petPeople.put(new Person(\"Isaac\"), &nbsp; &nbsp; &nbsp;Arrays.asList(new Rat(\"Freckly\"))); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;System.out.println(\"People: \" + petPeople.keySet()); &nbsp; &nbsp;System.out.println(\"Pets: \" + petPeople.values()); &nbsp; &nbsp;for(Person person : petPeople.keySet()) { &nbsp; &nbsp; &nbsp;System.out.println(person + \" has:\"); &nbsp; &nbsp; &nbsp;for(Pet pet : petPeople.get(person)) &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\" &nbsp; \" + pet); &nbsp; } }}/* Output:People: [Person Dawn, Person Kate, Person Isaac, PersonMarilyn, Person Luke]Pets: [[Cymric Molly, Mutt Spot], [Cat Shackleton, CatElsie May, Dog Margrett], [Rat Freckly], [Pug Louie akaLouis Snorkelstein Dupree, Cat Stanford, Cat Pinkola],[Rat Fuzzy, Rat Fizzy]]Person Dawn has: &nbsp; &nbsp;Cymric Molly &nbsp; &nbsp;Mutt SpotPerson Kate has: &nbsp; &nbsp;Cat Shackleton &nbsp; &nbsp;Cat Elsie May &nbsp; &nbsp;Dog MargrettPerson Isaac has: &nbsp; &nbsp;Rat FrecklyPerson Marilyn has: &nbsp; &nbsp;Pug Louie aka Louis Snorkelstein Dupree &nbsp; &nbsp;Cat Stanford &nbsp; &nbsp;Cat PinkolaPerson Luke has: &nbsp; &nbsp;Rat Fuzzy &nbsp; &nbsp;Rat Fizzy*/Map ���Է����������ɵ� Set ������ֵ��ɵ� Collection ���������ֵ�Ե� Set �� keySet() ������������ petPeople �е����м���ɵ� Set ������ for-in ����б����������� Map ������ Queue������һ�����͵ġ��Ƚ��ȳ�����FIFO�����ϡ� ���Ӽ��ϵ�һ�˷�������ٴ���һ��ȥ��ȡ���ǣ�������뼯�ϵ�˳��ͱ�ȡ����˳������ͬ�ġ�����ͨ��������һ�ֿɿ��Ľ�����ӳ����ĳ�������䵽��һ�������;���������������������Ϊ��Ҫ����Ϊ���ǿ��԰�ȫ�ؽ������һ�������䵽��һ������LinkedList ʵ���� Queue �ӿڣ������ṩ��һЩ������֧�ֶ�����Ϊ����� LinkedList �������� Queue ��һ��ʵ�֡� ͨ���� LinkedList ����ת��Ϊ Queue �������ʾ��ʹ������ Queue �ӿ����� Queue ���(Queue-specific)�ķ�����xxxxxxxxxx// collections/QueueDemo.java// Upcasting to a Queue from a LinkedListimport java.util.*; public class QueueDemo { &nbsp;public static void printQ(Queue queue) { &nbsp; &nbsp;while(queue.peek() != null) &nbsp; &nbsp; &nbsp;System.out.print(queue.remove() + \" \"); &nbsp; &nbsp;System.out.println(); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;(); &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp;for(int i = 0; i &lt; 10; i++) &nbsp; &nbsp; &nbsp;queue.offer(rand.nextInt(i + 10)); &nbsp; &nbsp;printQ(queue); &nbsp; &nbsp;Queue&lt;Character&gt; qc = new LinkedList&lt;&gt;(); &nbsp; &nbsp;for(char c : \"Brontosaurus\".toCharArray()) &nbsp; &nbsp; &nbsp;qc.offer(c); &nbsp; &nbsp;printQ(qc); }}/* Output:8 1 1 1 5 14 3 1 0 1B r o n t o s a u r u s*/offer() ���� Queue ��صķ���֮һ����������������£��ڶ��е�β������һ��Ԫ�أ����߷��� false �� peek() �� element() �����ض�ͷԪ�ض���ɾ�����������������Ϊ�գ��� element() �׳� NoSuchElementException ���� peek() ���� null �� poll() �� remove()* ��ɾ�������ض�ͷԪ�أ����������Ϊ�գ�poll() ���� null ���� remove() �׳� NoSuchElementException ���Զ���װ���ƻ��Զ��� nextInt() �� int ���ת��Ϊ queue ����� Integer ���󣬲��� char c ת��Ϊ qc ����� Character ���� Queue �ӿ�խ���˶� LinkedList �����ķ���Ȩ�ޣ����ֻ���ʵ��ķ�������ʹ�ã�����ܹ����ʵ��� LinkedList �ķ�������٣�����ʵ���Ͽ��Խ� Queue ǿ��ת���� LinkedList �����������ǲ����������������� Queue ��صķ����ṩ�������������Ĺ��ܡ� Ҳ����˵������ Queue ���̳е� Collection ���ڲ���Ҫʹ�������κη���������£��Ϳ���ӵ��һ�����õ� Queue �����ȼ����� PriorityQueue�Ƚ��ȳ���FIFO������������͵����й�����queuing discipline�������й�����ָ�ڸ��������е�һ��Ԫ�ص�����£�ȷ����һ���������е�Ԫ�صĹ����Ƚ��ȳ�����������һ��������Ԫ��Ӧ���ǵȴ�ʱ�����Ԫ�ء����ȼ�����������һ��������Ԫ��������Ҫ��Ԫ�أ�������ߵ����ȼ��������磬�ڻ��������ɻ��ٽ����ʱ����ܷɻ��ĳ˿Ϳ����ڰ����ǻ�����ʱ�ŵ���ͷ�����������һ����Ϣ����ϵͳ��ĳЩ��Ϣ��������Ϣ����Ҫ��Ӧ�þ��촦�������������Ǻ�ʱ����� Java 5 �������� PriorityQueue ���Ա��Զ�ʵ��������Ϊ������ PriorityQueue �ϵ��� offer() ����������һ������ʱ���ö�����ڶ����б�����5Ĭ�ϵ�����ʹ�ö����ж������Ȼ˳����natural order�������ǿ���ͨ���ṩ�Լ��� Comparator ���޸����˳�� PriorityQueue ȷ���ڵ��� peek() �� poll() �� remove() ����ʱ����õ�Ԫ�ؽ��Ƕ��������ȼ���ߵ�Ԫ�ء��� PriorityQueue �� Integer �� String �� Character ��������������һ�������練�ơ��������ʾ���У���һ��ֵ��ǰһ��ʾ���е����ֵ��ͬ�����Կ������Ǵ� PriorityQueue �е�����˳����ǰһ��ʾ����ͬ��xxxxxxxxxx// collections/PriorityQueueDemo.javaimport java.util.*; public class PriorityQueueDemo { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;PriorityQueue&lt;Integer&gt; priorityQueue = &nbsp; &nbsp; &nbsp;new PriorityQueue&lt;&gt;(); &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp;for(int i = 0; i &lt; 10; i++) &nbsp; &nbsp; &nbsp;priorityQueue.offer(rand.nextInt(i + 10)); &nbsp; &nbsp;QueueDemo.printQ(priorityQueue); &nbsp; &nbsp;List&lt;Integer&gt; ints = Arrays.asList(25, 22, 20, &nbsp; &nbsp; &nbsp;18, 14, 9, 3, 1, 1, 2, 3, 9, 14, 18, 21, 23, 25); &nbsp; &nbsp;priorityQueue = new PriorityQueue&lt;&gt;(ints); &nbsp; &nbsp;QueueDemo.printQ(priorityQueue); &nbsp; &nbsp;priorityQueue = new PriorityQueue&lt;&gt;( &nbsp; &nbsp; &nbsp; &nbsp;ints.size(), Collections.reverseOrder()); &nbsp; &nbsp;priorityQueue.addAll(ints); &nbsp; &nbsp;QueueDemo.printQ(priorityQueue); &nbsp; &nbsp;String fact = \"EDUCATION SHOULD ESCHEW OBFUSCATION\"; &nbsp; &nbsp;List&lt;String&gt; strings = &nbsp; &nbsp; &nbsp;Arrays.asList(fact.split(\"\")); &nbsp; &nbsp;PriorityQueue&lt;String&gt; stringPQ = &nbsp; &nbsp; &nbsp;new PriorityQueue&lt;&gt;(strings); &nbsp; &nbsp;QueueDemo.printQ(stringPQ); &nbsp; &nbsp;stringPQ = new PriorityQueue&lt;&gt;( &nbsp; &nbsp; &nbsp;strings.size(), Collections.reverseOrder()); &nbsp; &nbsp;stringPQ.addAll(strings); &nbsp; &nbsp;QueueDemo.printQ(stringPQ); &nbsp; &nbsp;Set&lt;Character&gt; charSet = new HashSet&lt;&gt;(); &nbsp; &nbsp;for(char c : fact.toCharArray()) &nbsp; &nbsp; &nbsp;charSet.add(c); // Autoboxing &nbsp; &nbsp;PriorityQueue&lt;Character&gt; characterPQ = &nbsp; &nbsp; &nbsp;new PriorityQueue&lt;&gt;(charSet); &nbsp; &nbsp;QueueDemo.printQ(characterPQ); }}/* Output:0 1 1 1 1 1 3 5 8 141 1 2 3 3 9 9 14 14 18 18 20 21 22 23 25 2525 25 23 22 21 20 18 18 14 14 9 9 3 3 2 1 1 &nbsp; &nbsp; &nbsp;A A B C C C D D E E E F H H I I L N N O O O O S SS T T U U U WW U U U T T S S S O O O O N N L I I H H F E E E D D C CC B A A &nbsp;A B C D E F H I L N O S T U W*/PriorityQueue �������ظ��ģ���С��ֵ������ߵ����ȼ�������� String ���ո�Ҳ��������ֵ�����ұ���ĸ�����ȼ��ߣ���Ϊ��չʾ���ͨ���ṩ�Լ��� Comparator �������ı�˳�򣬵������� PriorityQueue&lt;Integer&gt; �������ĵ��ã��͵ڶ����� PriorityQueue&lt;String&gt; �ĵ���ʹ������ Collections.reverseOrder() ��Java 5 �������ӵģ������ķ���� Comparator �����һ����������һ�� HashSet �������ظ��� Character��Integer �� String �� Character ������ PriorityQueue һ��ʹ�ã���Ϊ��Щ���Ѿ���������Ȼ����������� PriorityQueue ��ʹ���Լ����࣬������������Ĺ����Բ�����Ȼ���򣬻��߱����ṩ�Լ��� Comparator ������¼��������������һ�������ӵ�ʾ������ʾ��������������������Collection ���������м��Ϲ��еĸ��ӿڡ������ܻᱻ��Ϊ��һ�֡������ӿڡ���incidental interface��������ΪҪ��ʾ�������ɸ��ӿڵĹ��Զ����ֵĽӿڡ����⣬java.util.AbstractCollection ���ṩ�� Collection ��Ĭ��ʵ�֣�ʹ������Դ��� AbstractCollection �������ͣ�������û�в���Ҫ�Ĵ����ظ���ʹ�ýӿ�������һ��������������ʹ���Ǵ�����ͨ�õĴ��롣ͨ����Խӿڶ��Ǿ���ʵ������д���룬���ǵĴ������Ӧ���ڸ������͵Ķ���6��ˣ��������д�ķ�������һ�� Collection ����ô�÷�������Ӧ�����κ�ʵ���� Collection ���ࡪ����Ҳ��ʹ��һ���������ѡ��ȥʵ�� Collection �ӿڣ��Ա�÷�������ʹ��������׼ C++ ����еĵļ��ϲ�û�й�ͬ�Ļ��ࡪ������֮������й��Զ���ͨ��������ʵ�ֵġ��� Java �У���ѭ C++ �ķ�ʽ�������ƺ������ǣ����õ����������� Collection ����ʾ����֮��Ĺ��ԡ����ǣ������ַ���������һ����Ϊʵ�� Collection ����ζ����Ҫ�ṩ iterator() ������xxxxxxxxxx// collections/InterfaceVsIterator.javaimport typeinfo.pets.*;import java.util.*; public class InterfaceVsIterator { &nbsp;public static void display(Iterator&lt;Pet&gt; it) { &nbsp; &nbsp;while(it.hasNext()) { &nbsp; &nbsp; &nbsp;Pet p = it.next(); &nbsp; &nbsp; &nbsp;System.out.print(p.id() + \":\" + p + \" \"); &nbsp; } &nbsp; &nbsp;System.out.println(); } &nbsp;public static void display(Collection&lt;Pet&gt; pets) { &nbsp; &nbsp;for(Pet p : pets) &nbsp; &nbsp; &nbsp;System.out.print(p.id() + \":\" + p + \" \"); &nbsp; &nbsp;System.out.println(); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;List&lt;Pet&gt; petList = Pets.list(8); &nbsp; &nbsp;Set&lt;Pet&gt; petSet = new HashSet&lt;&gt;(petList); &nbsp; &nbsp;Map&lt;String, Pet&gt; petMap = new LinkedHashMap&lt;&gt;(); &nbsp; &nbsp;String[] names = (\"Ralph, Eric, Robin, Lacey, \" + &nbsp; &nbsp; &nbsp;\"Britney, Sam, Spot, Fluffy\").split(\", \"); &nbsp; &nbsp;for(int i = 0; i &lt; names.length; i++) &nbsp; &nbsp; &nbsp;petMap.put(names[i], petList.get(i)); &nbsp; &nbsp;display(petList); &nbsp; &nbsp;display(petSet); &nbsp; &nbsp;display(petList.iterator()); &nbsp; &nbsp;display(petSet.iterator()); &nbsp; &nbsp;System.out.println(petMap); &nbsp; &nbsp;System.out.println(petMap.keySet()); &nbsp; &nbsp;display(petMap.values()); &nbsp; &nbsp;display(petMap.values().iterator()); }}/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx{Ralph=Rat, Eric=Manx, Robin=Cymric, Lacey=Mutt,Britney=Pug, Sam=Cymric, Spot=Pug, Fluffy=Manx}[Ralph, Eric, Robin, Lacey, Britney, Sam, Spot, Fluffy]0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx*/�����汾�� display() ����������ʹ�� Map �� Collection ���������������� ����Collection �ӿں� Iterator ���� display() ������Ͳ㼯�ϵ��ض�ʵ�ֽ���ڱ����У������ַ�ʽ��������Ч����ʵ�ϣ� Collection Ҫ������һ�㣬��Ϊ���� Iterable ���ͣ������ display(Collection) ��ʵ���п���ʹ�� for-in ���죬��ʹ�ô����������������Ҫʵ��һ������ Collection ���ⲿ��ʱ����������ȥʵ�� Collection �ӿڿ��ܷǳ����ѻ��鷳�����ʹ�� Iterator �ͻ��÷ǳ������ˡ����磬�������ͨ���̳�һ������ Pet �������������һ�� Collection ��ʵ�֣���ô���Ǳ���ʵ�� Collection ���еķ�������ʹ���ǲ��� display() ������ʹ�����ǣ�Ҳ��������������Ȼ�����ͨ���̳� AbstractCollection �������׵�ʵ�֣�����������λ���Ҫ��ǿ��ȥʵ�� iterator() �� size() ��������Щ���� AbstractCollection û��ʵ�֣����� AbstractCollection �е������������õ���xxxxxxxxxx// collections/CollectionSequence.javaimport typeinfo.pets.*;import java.util.*; public class CollectionSequenceextends AbstractCollection&lt;Pet&gt; { &nbsp;private Pet[] pets = Pets.array(8); &nbsp;@Override &nbsp;public int size() { return pets.length; } &nbsp;@Override &nbsp;public Iterator&lt;Pet&gt; iterator() { &nbsp; &nbsp;return new Iterator&lt;Pet&gt;() { // [1] &nbsp; &nbsp; &nbsp;private int index = 0; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp;public boolean hasNext() { &nbsp; &nbsp; &nbsp; &nbsp;return index &lt; pets.length; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp;public Pet next() { return pets[index++]; } &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp;public void remove() { // Not implemented &nbsp; &nbsp; &nbsp; &nbsp;throw new UnsupportedOperationException(); &nbsp; &nbsp; } &nbsp; }; } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;CollectionSequence c = new CollectionSequence(); &nbsp; &nbsp;InterfaceVsIterator.display(c); &nbsp; &nbsp;InterfaceVsIterator.display(c.iterator()); }}/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx*/remove() ������һ������ѡ������������¼��������������ϸ���ܡ� ������Բ���ʵ�����������������������׳��쳣��[1] ����ܻ���Ϊ����Ϊ iterator() ���� Iterator&lt;Pet&gt; �������ڲ��ඨ�����ʹ�������﷨��Java �����ƶϳ����͡����ⲻ�����ã������ƶ���Ȼ�ǳ����ޡ�������ӱ��������ʵ���� Collection ���ͱ���ʵ�� iterator() ������ֻ��ʵ�� iterator() ��̳� AbstractCollection ��ȣ����ѵĴ���ֻ����΢���١����ǣ�������Ѿ��̳����������࣬��ô�Ͳ��ܼ̳��� AbstractCollection �ˡ�����������£�Ҫʵ�� Collection ���ͱ���ʵ�ָýӿ��е����з�������ʱ���̳в��ṩ����������������Ҫ���׵öࣺxxxxxxxxxx// collections/NonCollectionSequence.javaimport typeinfo.pets.*;import java.util.*; class PetSequence { &nbsp;protected Pet[] pets = Pets.array(8);} public class NonCollectionSequence extends PetSequence { &nbsp;public Iterator&lt;Pet&gt; iterator() { &nbsp; &nbsp;return new Iterator&lt;Pet&gt;() { &nbsp; &nbsp; &nbsp;private int index = 0; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp;public boolean hasNext() { &nbsp; &nbsp; &nbsp; &nbsp;return index &lt; pets.length; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp;public Pet next() { return pets[index++]; } &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp;public void remove() { // Not implemented &nbsp; &nbsp; &nbsp; &nbsp;throw new UnsupportedOperationException(); &nbsp; &nbsp; } &nbsp; }; } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;NonCollectionSequence nc = &nbsp; &nbsp; &nbsp;new NonCollectionSequence(); &nbsp; &nbsp;InterfaceVsIterator.display(nc.iterator()); }}/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx*/���� Iterator �ǽ����������Ѹ����еķ���������һ����϶���С�ķ�ʽ��������ʵ�� Collection ��ȣ���������������ʩ�ӵ�Լ��Ҳ�ٵöࡣfor-in �͵�������ĿǰΪֹ��for-in �﷨��Ҫ�������飬����Ҳ�������κ� Collection ����ʵ������ʹ�� ArrayList ʱ���Ѿ�������һЩʹ������ʾ����������һ����ͨ�õ�֤����xxxxxxxxxx// collections/ForInCollections.java// All collections work with for-inimport java.util.*; public class ForInCollections { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Collection&lt;String&gt; cs = new LinkedList&lt;&gt;(); &nbsp; &nbsp;Collections.addAll(cs, &nbsp; &nbsp; &nbsp;\"Take the long way home\".split(\" \")); &nbsp; &nbsp;for(String s : cs) &nbsp; &nbsp; &nbsp;System.out.print(\"'\" + s + \"' \"); }}/* Output:'Take' 'the' 'long' 'way' 'home'*/���� cs ��һ�� Collection ����˸ô���չʾ��ʹ�� for-in ������ Collection �������������������ԭ���� Java 5 ������һ����Ϊ Iterable �Ľӿڣ��ýӿڰ���һ���ܹ����� Iterator �� iterator() ������for-in ʹ�ô� Iterable �ӿ����������С���ˣ�����������κ�ʵ���� Iterable ���࣬�����Խ������� for-in ����У�// collections/IterableClass.java// Anything Iterable works with for-inimport java.util.*; public class IterableClass implements Iterable&lt;String&gt; { &nbsp;protected String[] words = (\"And that is how \" + &nbsp; &nbsp;\"we know the Earth to be banana-shaped.\" &nbsp; ).split(\" \"); &nbsp;@Override &nbsp;public Iterator&lt;String&gt; iterator() { &nbsp; &nbsp;return new Iterator&lt;String&gt;() { &nbsp; &nbsp; &nbsp;private int index = 0; &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp;public boolean hasNext() { &nbsp; &nbsp; &nbsp; &nbsp;return index &lt; words.length; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp;public String next() { return words[index++]; } &nbsp; &nbsp; &nbsp;@Override &nbsp; &nbsp; &nbsp;public void remove() { // Not implemented &nbsp; &nbsp; &nbsp; &nbsp;throw new UnsupportedOperationException(); &nbsp; &nbsp; } &nbsp; }; } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;for(String s : new IterableClass()) &nbsp; &nbsp; &nbsp;System.out.print(s + \" \"); }}/* Output:And that is how we know the Earth to be banana-shaped.*/iterator() ���ص���ʵ���� Iterator&lt;String&gt; �������ڲ����ʵ�����������ڲ�����Ա��������е�ÿ�����ʡ����������У����Կ��� IterableClass ȷʵ�������� for-in ��䡣�� Java 5 �У������඼�� Iterable ����Ҫ�������е� Collection �ࣨ������������ Maps ���� ���磬����Ĵ��������ʾ���еĲ���ϵͳ����������// collections/EnvironmentVariables.java// {VisuallyInspectOutput}import java.util.*; public class EnvironmentVariables { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;for(Map.Entry entry: System.getenv().entrySet()) { &nbsp; &nbsp; &nbsp;System.out.println(entry.getKey() + \": \" + &nbsp; &nbsp; &nbsp; &nbsp;entry.getValue()); &nbsp; } }}System.getenv() 7����һ�� Map �� entrySet() ����һ���� Map.Entry ��Ԫ�ع��ɵ� Set ��������� Set ��һ�� Iterable ��������������� for-in ѭ����for-in �������������������κ� Iterable �����Ⲣ����ζ������϶�Ҳ�Ǹ� Iterable ��Ҳ���ᷢ���κ��Զ�װ�䣺xxxxxxxxxx// collections/ArrayIsNotIterable.javaimport java.util.*; public class ArrayIsNotIterable { &nbsp;static &lt;T&gt; void test(Iterable&lt;T&gt; ib) { &nbsp; &nbsp;for(T t : ib) &nbsp; &nbsp; &nbsp;System.out.print(t + \" \"); } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;test(Arrays.asList(1, 2, 3)); &nbsp; &nbsp;String[] strings = { \"A\", \"B\", \"C\" }; &nbsp; &nbsp;// An array works in for-in, but it's not Iterable: &nbsp; &nbsp;//- test(strings); &nbsp; &nbsp;// You must explicitly convert it to an Iterable: &nbsp; &nbsp;test(Arrays.asList(strings)); }}/* Output:1 2 3 A B C*/���Խ�������Ϊһ�� Iterable �������ݻᵼ��ʧ�ܡ���˵���������κδ����鵽 Iterable ���Զ�ת��; �����ֹ�ִ������ת�����������������÷����������һ�� Iterable �࣬����Ҫ����һ�ֻ������ for-in �����ʹ�������ķ�����Ӧ����ô���أ����磬��ϣ������ѡ�������Ƿ������һ�������б������ֱ�Ӽ̳�����࣬������ iterator() ��������ֻ���滻���еķ�����������ʵ�ֱ���˳���ѡ��һ�ֽ����������ν������������Adapter Method���Ĺ��÷��������������������������ģʽ����Ϊ����Ҫ�ṩ�ض��Ľӿ������� for-in ��䡣����Ѿ���һ���ӿڲ�����Ҫ��һ���ӿ�ʱ�����д�������Ϳ��Խ��������⡣ �������ϣ����Ĭ�ϵ�����������Ļ����ϣ����Ӳ����������������������˲���ʹ�ø��ǣ��෴������������һ���ܹ����� Iterable ����ķ������ö���������� for-in ��䡣��ʹ�����ǿ����ṩ����ʹ�� for-in ���ķ�ʽ��xxxxxxxxxx// collections/AdapterMethodIdiom.java// The \"Adapter Method\" idiom uses for-in// with additional kinds of Iterablesimport java.util.*; class ReversibleArrayList&lt;T&gt; extends ArrayList&lt;T&gt; { &nbsp;ReversibleArrayList(Collection&lt;T&gt; c) { &nbsp; &nbsp;super(c); } &nbsp;public Iterable&lt;T&gt; reversed() { &nbsp; &nbsp;return new Iterable&lt;T&gt;() { &nbsp; &nbsp; &nbsp;public Iterator&lt;T&gt; iterator() { &nbsp; &nbsp; &nbsp; &nbsp;return new Iterator&lt;T&gt;() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int current = size() - 1; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public boolean hasNext() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return current &gt; -1; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public T next() { return get(current--); } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public void remove() { // Not implemented &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw new UnsupportedOperationException(); &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; }; &nbsp; &nbsp; } &nbsp; }; }} public class AdapterMethodIdiom { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;ReversibleArrayList&lt;String&gt; ral = &nbsp; &nbsp; &nbsp;new ReversibleArrayList&lt;String&gt;( &nbsp; &nbsp; &nbsp; &nbsp;Arrays.asList(\"To be or not to be\".split(\" \"))); &nbsp; &nbsp;// Grabs the ordinary iterator via iterator(): &nbsp; &nbsp;for(String s : ral) &nbsp; &nbsp; &nbsp;System.out.print(s + \" \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;// Hand it the Iterable of your choice &nbsp; &nbsp;for(String s : ral.reversed()) &nbsp; &nbsp; &nbsp;System.out.print(s + \" \"); }}/* Output:To be or not to bebe to not or be To*/���������У����ֱ�ӽ� ral ������� for-in ����У����õ���Ĭ�ϵģ��������������������ڸö����ϵ��� reversed() ���������������ͬ����Ϊ��ͨ��ʹ�����ַ�ʽ�������� IterableClass.java ʾ������������������������xxxxxxxxxx// collections/MultiIterableClass.java// Adding several Adapter Methodsimport java.util.*; public class MultiIterableClass extends IterableClass { &nbsp;public Iterable&lt;String&gt; reversed() { &nbsp; &nbsp;return new Iterable&lt;String&gt;() { &nbsp; &nbsp; &nbsp;public Iterator&lt;String&gt; iterator() { &nbsp; &nbsp; &nbsp; &nbsp;return new Iterator&lt;String&gt;() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int current = words.length - 1; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public boolean hasNext() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return current &gt; -1; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public String next() { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return words[current--]; &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public void remove() { // Not implemented &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw new UnsupportedOperationException(); &nbsp; &nbsp; &nbsp; &nbsp; } &nbsp; &nbsp; &nbsp; }; &nbsp; &nbsp; } &nbsp; }; } &nbsp;public Iterable&lt;String&gt; randomized() { &nbsp; &nbsp;return new Iterable&lt;String&gt;() { &nbsp; &nbsp; &nbsp;public Iterator&lt;String&gt; iterator() { &nbsp; &nbsp; &nbsp; &nbsp;List&lt;String&gt; shuffled = &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new ArrayList&lt;String&gt;(Arrays.asList(words)); &nbsp; &nbsp; &nbsp; &nbsp;Collections.shuffle(shuffled, new Random(47)); &nbsp; &nbsp; &nbsp; &nbsp;return shuffled.iterator(); &nbsp; &nbsp; } &nbsp; }; } &nbsp;public static void main(String[] args) { &nbsp; &nbsp;MultiIterableClass mic = new MultiIterableClass(); &nbsp; &nbsp;for(String s : mic.reversed()) &nbsp; &nbsp; &nbsp;System.out.print(s + \" \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;for(String s : mic.randomized()) &nbsp; &nbsp; &nbsp;System.out.print(s + \" \"); &nbsp; &nbsp;System.out.println(); &nbsp; &nbsp;for(String s : mic) &nbsp; &nbsp; &nbsp;System.out.print(s + \" \"); }}/* Output:banana-shaped. be to Earth the know we how is that Andis banana-shaped. Earth that how the be And we know toAnd that is how we know the Earth to be banana-shaped.*/ע�⣬�ڶ������� random() û�д������Լ��� Iterator ������ֱ�ӷ��ر����ҵ� List �е� Iterator ��������п��Կ����� Collections.shuffle() ��������Ӱ�쵽ԭʼ���飬��ֻ�Ǵ����� shuffled �е����á�֮��������������Ϊ randomized() ������һ�� ArrayList �� Arrays.asList() �Ľ����װ���������������� Arrays.asList() ���ɵ� List ��ֱ�Ӵ��ң���ô�����޸ĵײ����飬������ʾ��xxxxxxxxxx// collections/ModifyingArraysAsList.javaimport java.util.*; public class ModifyingArraysAsList { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;Random rand = new Random(47); &nbsp; &nbsp;Integer[] ia = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; &nbsp; &nbsp;List&lt;Integer&gt; list1 = &nbsp; &nbsp; &nbsp;new ArrayList&lt;&gt;(Arrays.asList(ia)); &nbsp; &nbsp;System.out.println(\"Before shuffling: \" + list1); &nbsp; &nbsp;Collections.shuffle(list1, rand); &nbsp; &nbsp;System.out.println(\"After shuffling: \" + list1); &nbsp; &nbsp;System.out.println(\"array: \" + Arrays.toString(ia)); &nbsp; &nbsp;List&lt;Integer&gt; list2 = Arrays.asList(ia); &nbsp; &nbsp;System.out.println(\"Before shuffling: \" + list2); &nbsp; &nbsp;Collections.shuffle(list2, rand); &nbsp; &nbsp;System.out.println(\"After shuffling: \" + list2); &nbsp; &nbsp;System.out.println(\"array: \" + Arrays.toString(ia)); }}/* Output:Before shuffling: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]After shuffling: [4, 6, 3, 1, 8, 7, 2, 5, 10, 9]array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]Before shuffling: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]After shuffling: [9, 1, 6, 3, 7, 2, 5, 10, 4, 8]array: [9, 1, 6, 3, 7, 2, 5, 10, 4, 8]*/�ڵ�һ������£� Arrays.asList() ����������ݸ��� ArrayList �Ĺ��������⽫����һ������ ia ��Ԫ�ص� ArrayList ����˴�����Щ���ò����޸ĸ����顣���ǣ����ֱ��ʹ�� Arrays.asList(ia) �Ľ�������ִ��Ҿͻ��޸� ia ��˳����Ҫ����Ҫע�� Arrays.asList() ����һ�� List ���󣬸ö���ʹ�õײ�������Ϊ������ʵ�֡����ִ�еĲ������޸���� List �����Ҳ�ϣ���޸�ԭʼ���飬��ô��Ӧ������һ�������д���һ������������С��Java �ṩ�����ౣ�����ķ��������齫��������������������������������ȷ�Ķ�������ڲ��Ҷ���ʱ���ضԽ��������ת�����������Ƕ�ά�ģ����Ա���������͵����ݡ���Ȼ����������ʱ�������飬����һ���������飬���޷���������Ĵ�С��Collection ���浥һ��Ԫ�أ��� Map ����������ļ�ֵ�ԡ�ʹ�� Java ���ͣ�����ָ�������б���Ķ�������ͣ���˲��ܽ��������͵Ķ�����뼯���У������ڴӼ����л�ȡԪ��ʱ�����ؽ�������ת�������� Collection �͸��� Map �������������������Ӹ����Ԫ��ʱ���Զ�������ߴ��С�����ϲ��ܱ���������ͣ����Զ�װ����ƻḺ��ִ�л������ͺͼ����б���İ�װ����֮���˫��ת����������һ���� List Ҳ������������������������ˣ������ List �������򼯺ϡ����Ҫִ�д�����������ʣ���ʹ�� ArrayList �����Ҫ�����ӱ��м�����ɾ��Ԫ�أ���Ӧ��ʹ�� LinkedList �����кͶ�ջ����Ϊ��ͨ�� LinkedList �ṩ�ġ�Map ��һ�ֽ����󣨶������֣���������������ơ� HashMap רΪ���ٷ��ʶ���ƣ��� TreeMap ���ּ�ʼ�մ�������״̬������û�� HashMap �졣 LinkedHashMap ������˳�򱣴���Ԫ�أ���ʹ��ɢ���ṩ���ٷ��ʵ�������Set �������ظ�Ԫ�ء� HashSet �ṩ���Ĳ�ѯ�ٶȣ��� TreeSet ����Ԫ�ش�������״̬�� LinkedHashSet ������˳�򱣴���Ԫ�أ���ʹ��ɢ���ṩ���ٷ��ʵ���������Ҫ���´�����ʹ�������� Vector ��Hashtable �� Stack �����һ�� Java ���ϵļ�ͼ����������������������������а����������������һ������»������Ľӿں��ࡣ������ע����ͼΪԭ�� PDF �еĽ�ͼ����������δ֪ԭ��������⡣����ɲο����߻��ư�8���򵥼��Ϸ������Կ�����ʵ����ֻ���ĸ������ļ�������� Map �� List �� Set �� Queue �����Ǹ�����������ʵ�ְ汾��Queue �� java.util.concurrent ʵ��δ�����ڴ�ͼ�У����ʹ�õļ����ú�ɫ�����߿��ʾ�����߿��ʾ�ӿڣ�ʵ�߿��ʾ��ͨ�ģ�����ģ��ࡣ���п��ļ�ͷ�����߱�ʾ�ض�����ʵ����һ���ӿڡ�ʵ�ļ�ͷ��ʾĳ����������ɼ�ͷָ�����Ķ������磬�κ� Collection ���������� Iterator �� List �������� ListIterator ��Ҳ��������ͨ�� Iterator ����Ϊ List �̳��� Collection ���������ʾ��չʾ�˸��ֲ�ͬ�����ڷ����ϵĲ��졣ʵ�ʴ������������½ڣ�������ֻ�ǵ��������������������������չʾ����ÿ�����ӿ�����ʵ�ֵĽӿڣ�xxxxxxxxxx// collections/CollectionDifferences.javaimport onjava.*; public class CollectionDifferences { &nbsp;public static void main(String[] args) { &nbsp; &nbsp;CollectionMethodDifferences.main(args); }}/* Output:Collection: [add, addAll, clear, contains, containsAll,equals, forEach, hashCode, isEmpty, iterator,parallelStream, remove, removeAll, removeIf, retainAll,size, spliterator, stream, toArray]Interfaces in Collection: [Iterable]Set extends Collection, adds: []Interfaces in Set: [Collection]HashSet extends Set, adds: []Interfaces in HashSet: [Set, Cloneable, Serializable]LinkedHashSet extends HashSet, adds: []Interfaces in LinkedHashSet: [Set, Cloneable,Serializable]TreeSet extends Set, adds: [headSet,descendingIterator, descendingSet, pollLast, subSet,floor, tailSet, ceiling, last, lower, comparator,pollFirst, first, higher]Interfaces in TreeSet: [NavigableSet, Cloneable,Serializable]List extends Collection, adds: [replaceAll, get,indexOf, subList, set, sort, lastIndexOf, listIterator]Interfaces in List: [Collection]ArrayList extends List, adds: [trimToSize,ensureCapacity]Interfaces in ArrayList: [List, RandomAccess,Cloneable, Serializable]LinkedList extends List, adds: [offerFirst, poll,getLast, offer, getFirst, removeFirst, element,removeLastOccurrence, peekFirst, peekLast, push,pollFirst, removeFirstOccurrence, descendingIterator,pollLast, removeLast, pop, addLast, peek, offerLast,addFirst]Interfaces in LinkedList: [List, Deque, Cloneable,Serializable]Queue extends Collection, adds: [poll, peek, offer,element]Interfaces in Queue: [Collection]PriorityQueue extends Queue, adds: [comparator]Interfaces in PriorityQueue: [Serializable]Map: [clear, compute, computeIfAbsent,computeIfPresent, containsKey, containsValue, entrySet,equals, forEach, get, getOrDefault, hashCode, isEmpty,keySet, merge, put, putAll, putIfAbsent, remove,replace, replaceAll, size, values]HashMap extends Map, adds: []Interfaces in HashMap: [Map, Cloneable, Serializable]LinkedHashMap extends HashMap, adds: []Interfaces in LinkedHashMap: [Map]SortedMap extends Map, adds: [lastKey, subMap,comparator, firstKey, headMap, tailMap]Interfaces in SortedMap: [Map]TreeMap extends Map, adds: [descendingKeySet,navigableKeySet, higherEntry, higherKey, floorKey,subMap, ceilingKey, pollLastEntry, firstKey, lowerKey,headMap, tailMap, lowerEntry, ceilingEntry,descendingMap, pollFirstEntry, lastKey, firstEntry,floorEntry, comparator, lastEntry]Interfaces in TreeMap: [NavigableMap, Cloneable,Serializable]*/�� TreeSet ֮������� Set �������� Collection ��ȫ��ͬ�Ľӿڡ�List �� Collection ���������ԵĲ�ͬ������ List ��Ҫ��ķ������� Collection �С���һ���棬�� Queue �ӿ��еķ����Ƕ����ģ��ڴ������� Queue ���ܵ�ʵ��ʱ������Ҫʹ�� Collection ��������� Map �� Collection ֮��Ψһ�Ľ����� Map ����ʹ�� entrySet() �� values() ���������� Collection ����ע�⣬��ǽӿ� java.util.RandomAccess ���ӵ��� ArrayList �ϣ��������ӵ� LinkedList �ϡ���Ϊ�����ض� List ��̬�ı�����Ϊ���㷨�ṩ����Ϣ�����������ļ̳в�νṹ������������֯�ṹȷʵ��Щ��֡����ǣ����˽��� java.util �и�����йؼ��ϵ����ݺ��ر�������¼�����������е����ݣ����ͻᷢ�ֳ��˼̳нṹ�е�����⣬���и�������⡣�������һֱ��������������⡪�������Щ�����漰��Ҫȥ���㾭���˴�֮�以Ϊǣ�Ƶĸ�������������Ҫ����׼�����ڸ���������Э�����ܴ�����Щ���⣬�� Java �����������ճ�������ʹ�õĻ������ߣ�������ʹ�������ࡢ��ǿ�󡢸���Ч���������Ҫһ��ʱ�������Ϥ��������ĳЩ���棬��������ܿ�ͻ��ҵ��Լ���·�ӣ�����ú�ʹ���������е��ࡣ 1 ������������顣����˵����һ��ָ�룬����ٶ���һ��Ǳ�ڵ�ʵ�֡����⣬Java ���õ��﷨�������� C++ ���ö���ָ�롣�� ��Thinking in Java�� �ĵ� 1 ���У��ҷ�����һ��������С��������handle������Ϊ C++ ���ú� Java ������һЩ��Ҫ��������Ϊһ���� C++ �Ĺ����ˣ��Ҳ������ Java ���ܵ�������� ���� C++ ����Ա���ڡ�Thinking in Java���ĵ� 2 ���У�����Ϊ�����á���reference���Ǹ����õ������ C++ ת�������˳������õ�����֮�⣬���кܶණ����Ҫ�������������ǲ���˫�Ŷ�����ȥ�����ǣ�Ҳ��Щ��������ͬ�⡰���á�����ĳ�����Ҷ���һ���۵㣺Java ֧�����ô��ݵ�˵������ȫ����ģ���Ϊ Java �����ʶ�������ݸ����ߣ�ʵ�����ǡ��������á���object references��������һ�ж���ֵ���ݡ������㲻��ͨ�����ô��ݣ����ǡ�ͨ��ֵ���ݶ������á����ǿ��������ҵ����ֽ��͵�׼ȷ�ԣ�������Ϊ�ҵķ������˶Ը�����������û����������˺����ţ�����ר�ҿ��ܻ�˵��ƭ�㣬���һ�˵��ֻ�ǶԴ˽������ʵ��ĳ��󡣣� ? ? ? ? 2 �����΢������оƬ���ж���ĸ��ٻ���洢���������ǰ��մ�ͳ�洢�������ǼĴ����� ? ? ? ? 3 һ���������ַ��������ء����������ַ������ַ���ֵ��������ʽ�����Զ���������ľ�̬�洢�С� ? ? 4 ��̬���������Ǻܿ���ܽӴ�������������û�ж���������ֱ�ӱ�����á� ? ? 5 ͨ������ǰ���ᵽ�ġ����⡱�������� boolean�� char�� byte�� short�� int�� long�� float �� double��ͨ����˵�����ݶ������ζ�ߴ��ݶ�������á� ? ? 6 ��̬������ʹ��֮ǰ����Ҫ��������������ǲ���ֱ�ӵ��÷Ǿ�̬�ĳ�Ա�򷽷�����Ϊ�Ǿ�̬��Ա�ͷ�������Ҫ��ʵ����Ϊ����ſ��Ա�ʹ�ã��� ? ? 7 ��ĳЩ����£�����Ϊ�������ṩ�˸��õ��Ż����ܡ� ? ? 8 ��ע�⣬���ĵ�δ������ JDK ��;����뵥�����ز��ܻ������ ? ? 9 ���ڱ����б�������������е�ÿ����������ܻ���Ҫ���� CLASSPATH �� ? 10 Ϊ�˱��ֱ���Ĵ����Ű���գ��Ҳ�û��ȫ���ع淶�����Ҿ������������� Java ��׼�� ?","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"日常分享","slug":"日常分享","date":"2022-02-16T12:35:32.000Z","updated":"2022-04-19T15:17:12.336Z","comments":true,"path":"2022/02/16/日常分享/","link":"","permalink":"http://example.com/2022/02/16/%E6%97%A5%E5%B8%B8%E5%88%86%E4%BA%AB/","excerpt":"","text":"虽然说折磨黑苹果是快乐的事情，但是你选择了淘宝120元的服务。说实话，我这台黑苹果 是一体机戴尔optiplex5260，我高中的时候也试过很多个EFI，也没有成功，无奈选择了淘宝的黑苹果服务，师傅花了三四小时换EFI，最后终于弄成半完美。 123456戴尔optiplex5260i58500uhd630三星DDR4 2666hz目前还有麦克风不能用，耳机只能用蓝牙以外都没有太大的问题了，xcode完美使用 链接：https://pan.baidu.com/s/1ofmjPTdfuhRmyOi2owbIyw提取码：yhc1 在mac上敲代码和win的体检不太一样，mac的idea多了些功能比如说符号。 xcode是纯英文，使用起来有些困难。","categories":[],"tags":[{"name":"黑苹果","slug":"黑苹果","permalink":"http://example.com/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"},{"name":"闲谈","slug":"闲谈","permalink":"http://example.com/tags/%E9%97%B2%E8%B0%88/"}]},{"title":"swift学习笔记","slug":"swift学习笔记","date":"2022-01-21T13:16:51.000Z","updated":"2022-04-19T14:59:40.293Z","comments":true,"path":"2022/01/21/swift学习笔记/","link":"","permalink":"http://example.com/2022/01/21/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"乐，swift确实是一门好的语言，但是我恐怕没有时间学它","text":"乐，swift确实是一门好的语言，但是我恐怕没有时间学它","categories":[],"tags":[{"name":"swift","slug":"swift","permalink":"http://example.com/tags/swift/"},{"name":"ios","slug":"ios","permalink":"http://example.com/tags/ios/"}]},{"title":"2021review","slug":"2021Review","date":"2022-01-17T15:35:02.000Z","updated":"2022-04-28T03:39:04.474Z","comments":true,"path":"2022/01/17/2021Review/","link":"","permalink":"http://example.com/2022/01/17/2021Review/","excerpt":"创建了自己的博客这么久，对于大一上学期自己学习生活做一个简单的总结和记录学习和生活。","text":"创建了自己的博客这么久，对于大一上学期自己学习生活做一个简单的总结和记录学习和生活。 高考-&gt;被录取-&gt;入学-&gt;健翔桥两个月-&gt;沙河 高考我在高中的时候最渴望的事情就是摆脱高中的各种约束和奇怪的规则，现在我确实离开了我的母校，但现在又有些怀念起我的母校了。 记得初入学的我是那么有朝气，对美好的高中生活有着很强烈的渴望。但是在疫情后被改变了。 后来疫情缓解后，再次回到母校，一些原因让我对它，有些失望。直到我毕业典礼那天，我知道以往后我不会再次来到这熟悉的教室和操场了，不仅仅有些怀念起来了，这或许就是斯德哥尔摩效应吧。 高考我是在西城护国寺考的老实说吧，这几天给我留下了相当深刻的印象，忘不掉我和父亲在老旧街道走行，他为我讲述过往的荣誉与血泪。忘不掉亲自看见北京四中长什么样子。忘不掉的是那156中学。说起来也巧，我隔壁班就一位和我一起在156中学考试的小语种考生。 录取高考后等成绩是最焦虑的，老实说吧我看到成绩单那时候，真的傻了，考的是我我有史以来最差的一次（21北京数学和化学历年最难，而且日语也出现了十年未有的书信类） 本来信息科大是我的铺底学校，但为了保护志愿不被调剂，被迫将信息科大放到了志愿置顶。等录取是很漫长焦虑，当我拿到录取通知书那天，就像碇シンジ和渚カヲル在海边相遇那天。我万分惊喜，珍惜地拿着属于我荣誉。高中的血与泪在那天化为灰烬。 我们的情人不过是随便借个名字，用幻想吹出来的肥皂泡…… 好了，收下吧！ 你可以假戏真做。 我本来是无病呻吟，漫无目的地吐露爱情……但你是可以让漂泊不定的鸟儿于此的人。 好了，收下吧。用毫无实际的雄辩 你总有一天也会明白的…… 《西哈诺 德 贝热拉克》 健翔桥漫长的暑假过去了，我来到了健翔桥校区，它很小但是却很温馨。 我很喜欢盘古大厦，每当我迷失在北四环的时候永远是它，作为了我们回到学校指路的灯塔。有时候在浓雾中，盘古大厦若隐若现，就像随时崩塌的样子。 从学二走到教学楼，不到三两分钟。 我在健翔桥印象最深的是学哥学姐日日夜夜在阶梯教室奋斗自习，计算机学院拿着笔记本用着编译器敲代码的样子可以说是健翔桥的一道美丽的风景线了 后来我等到了心中早已期待很久的iFlab社团的招新，记得面试那天是北京入冬来第一场大雪!我是第一位面试的，面对学长的提问我确实慌张了，同时也对未来更加充满了期望。 入社后，我接触了不少厉害的CS大佬，以及各种新生CS卷王。我还编了个笑话，我在电信二班认识的人，还不如未来转入计科班人多。（现在我已经没有转CS的想法了） 两个月很快就过去了，老实说吧，健翔桥虽然是八人间，但是我依然恋恋不舍，不想和优秀的学哥学姐离开。这一天还是来了。 沙河昌平是神奇的地方，我姑姑在这里上学，我父亲第一份工作就在这里，未来几年我也继续在昌平上学，每天的龙泽地铁总是会被挤满北漂和上班族，还记得一次做昌58来的学校，经过某一站的时候，人突然满了，这是比在北四环座公交车从来没有的感觉。 我在沙河又认识到了不少专业的强者，以及有思想的人。 2021年对我来说是挑战是机遇，虽然有很多失望的事情。 但是我希望我在2022年，尽量不让自己留下太多的遗憾。 2022年我的期望的目标 交女朋友 自己用ARDUINO做个闹钟 学自己真正喜欢的 一定要学好英语！！！！ 我的朋友，如果你对2021年留有遗憾，对2022年充满期待，那么我会祝福你，在2022不留遗憾，成为自己所期待的那样。我们会在下一年的年终问题里，寻找你的答案。 人よ、幸福たれ！ ——《素晴らしき日々》","categories":[],"tags":[{"name":"年度总结","slug":"年度总结","permalink":"http://example.com/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"}]},{"title":"数据结构学习笔记","slug":"数据结构","date":"2022-01-15T06:11:27.000Z","updated":"2022-05-23T10:45:25.231Z","comments":true,"path":"2022/01/15/数据结构/","link":"","permalink":"http://example.com/2022/01/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"Algorithms + Data Structures = Programs","text":"Algorithms + Data Structures = Programs 数据结构与算法 严蔚敏 王卓_哔哩哔哩_bilibili 一.导论1.基本概念和术语Data 数据Data Element 数据元素node节点Data Ltem 数据项Data Object数据对象 2数据结构 Data Structure数据结构包括以下三个部分 数据结构之间的逻辑关系 也叫逻辑结构 数据元素关系在计算机内存中的表示 也叫数据结构的物理结构或者数据的存储结构 数据的运算和实现 即对数据结构元素可以施加操作也i及在对应存储结构的实现 逻辑结构 3.数据类型一些基本的数据结构可以用数据类型实现，如数组字符串等而另一些常用的数据结构如栈队列 树图不能直接用数据类型表示 抽象数据类型可以用DSP三元组表示出来 D是数据对象 S是D上的关系集 P是对D的基本操作集 定义格式 12345678910111213Abstract Data Type 抽象数据类型名&#123;数据对象数据关系基本操作&#125;Abstract Data Type抽象数据名基本操作定义格式为基本操作名（参数表）初始条件《初始条件描述》操作结果《操作结果描述》参数表：赋值参数 职位操作提供输入值 引入参数&amp;打头 除可提供输入值外 还将返回操作结果 4算法 有穷性 确定性 可行性 输入 输出 算法的设计和要求 正确性 可读性 健壮性 高效性（鲁棒性） 5.算法的分析1.时间效率算法的时间效率的度量 算法运行时间＝每条语句频度语句执行一次时间 123456789n*n矩阵相乘的算法for(i=1;i&lt;=n,i++)//n+1次 for(j=1;j&lt;=n;j++)//n（n+1） c[i][j]=0;//n*n for(k=0;k&lt;=n;k++)//n*n*（n+1） c[i][j]=c[i][j]+a[i][k]*b[k][j];//n*n*n执行n*n*n T（n）为2n^3+3n^2+2n+1 算法时间复杂度的渐进表示法 比较算法比较我们仅仅比较数量级 T1(n)=10*n^2和T2(n)=5n^3 O 前者好 有一个辅助的f（n）使得当n无限大，T(N)/F(N)极限为不同为零的常熟 则称f（n）是t（n）的同数级函数 记作T(n)=O（f(n)） 称O（f(n)）为算法的渐进时间复杂度简称为时间复杂度 F(n)=n^m+n^m-1…….则T(N)=o(N^M) 算法基本操作次数也和问题输入而不同 12345678910比如说 for(i=0;i&lt;n,i++) if(a[i]==e)return i+1; return 0;最好只有一次执行最坏要执行n次 最坏时间复杂度：最坏情况下最好时间复杂度：最好情况下平均时间复杂度为O(n) 复杂的算法，可以分成几部分利用O的加乘法则 加法T(n)=T1(n)+T2(n)=O(f(n))+O(g(n))=O(max(f(n),g(n))) 乘法T(n)=T1(n)xT2(n)=O(f(n))xO(g(n))=O((f(n)xg(n)) 2空间复杂度算法所要的存储空间度量 S（n）=O（f（n）） n为为问题的规模 123456789101112将一维数组a的n个数逆序放到元素组for(i=0;i&lt;n/2;i++)&#123; t=a[i]; a[i]=a[n-i-1]; a[n-1-i]=t;&#125;//空间复杂度为O（1）for(i=0;i&lt;n;i++)b[i]=a[n-1-i];for(i=0;i&lt;n;i++) a[i]=b[i];//空间复杂度为O（n） 二.线性表linear list1线性表的定义和特点 例子 如26英文字母 数据元素都是字母为线性 线性表的逻辑特征在非空中有且仅有一个开始或者终端的结点，他没有前趋而仅有一个后续a2 或者没有后趋，而仅有一个直接前趋an-1 案例引入一元多项式 2.线性表的类型定义 基本操作 lnitlist（&amp;L）构造一个空的线性表L DestroyList（&amp;L）初始条件线性表已经有了 操作结果摧毁线性表 ClearList（&amp;L）初始条件线性表存在了 操作结果重置为空表 ListEmpty（L）初始条件 线性表存在 操作结果如果为空表为ture ListLength（L）初始条件 线性表存在 操作结果返回L中数据元素个数 GetElem（L，i，&amp;e）初始太久存在 操作结果用e返回L中第i哥元素值 LocateElem（L，e，compare（））初始线性表存在，compare是数据元素判定函数 操作结果返回L中第一个与e满足compare的数据元素的位序若这样的数据元素不存在返回0 PriorElem(L,cur_e,&amp;pre_e)初始为L存在 操作结果cur_e为L的元素，不是第一个，则pre_e返回他的前驱，否则操作失败 pre_e没有意义 NextElem(L,cur_e,&amp;next_e)初始L存在，如果cur存在返回后继 Listinsert（&amp;L，i，e）L存在 L在第i个位置之前插入新的元素e，L的长度加1 ListDelete（&amp;L，i，&amp;e）L存在 删除L的第i个元素，用e返回，L减一。 ListTraversr（&amp;L，visited（））L存在 操作结果依次对线性表中每个元素调用visited（） 3.线性表的顺序表示和实现12345678910111213141516171819//顺序表的类型定义typedef struct&#123; ElemType data[];//*data为动态分配 int length;&#125;SqList;//SqList L;L.data=(ElemType*)malloc(sizeof(ElemTAype)*M)////#define LIST_INTI_SIZE 100typedef struct &#123; int elem[LIST_INTI_SIZE]; int length;&#125;Sqlist; 12345678910111213141516171819202122//多项式的顺序存储结构类型定义#define MAXSIZE 1000//最大长度typedef struct &#123; float p; int e;&#125;Polynomial;typedef struct &#123; Polynomial* elem;//存储基地址//数组 int length;//当前的项个数&#125;SqList;//图书表的顺序存储#define MAXSIZE 1000typedef struct &#123; char no[20]; char name[50]; float price;&#125;book;typedef struct &#123; book* elem; int length;&#125;SqList; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &quot;stdio.h&quot; #include &quot;stdlib.h&quot; #include &quot;math.h&quot; #include &quot;time.h&quot;#define OK 1#define ERROR 0#define TRUE 1#define FALSE 0//#define OVERFLOW -2#define INFEASIBLE -1#define MAXSIZE 20 typedef char ElemType;typedef int Status;typedef struct&#123; ElemType *elem; int length;&#125;SqList;//1.线性表的初始化Status InitList_Sq(SqList* L)&#123; //分配空间 L-&gt;elem = (ElemType*)malloc(sizeof(ElemType) * MAXSIZE); //L-&gt;elem = new ElemType[MAXSIZE]; C++写法 if (!L-&gt;elem)exit(OVERFLOW);//分配失败 L-&gt;length = 0; return OK;//空表长度为零&#125;//2.摧毁线性表Lvoid DestroyList(SqList* L)&#123; if (L-&gt;elem) free(L-&gt;elem);//delete L-&gt;elem;释放空间&#125;//3.清空线性表void ClearList(SqList* L)&#123; L-&gt;length = 0;//将线性表长度为0&#125;int GetLength(SqList* L)&#123; return (L-&gt;length);&#125;//4判断线性表为空int IsEmpty(SqList L)&#123; if (L.length == 0) return 1; else return 0;&#125;//5顺序表的取值int GetElem(SqList L, int i, ElemType&amp; e)&#123; if (i&lt;1 || i&gt;L.length) return ERROR; e = L.elem[i - 1]; return OK;&#125;//6插入Status Listlnsert_Sq(SqList* L, int i, ElemType e)&#123; int j; if (i&lt;1 || i&gt;L-&gt;length + 1)return ERROR; if (L-&gt;length == MAXSIZE) return ERROR; for (j = L-&gt;length; j &gt;= i - 1; j--) L-&gt;elem[j+1] = L-&gt;elem[j]; L-&gt;elem[i - 1] = e; L-&gt;length++; return OK;&#125;//7删除Status ListDelete_Sq(SqList* L, int i)&#123; int j; if (i&lt;1 || i&gt;L-&gt;length) return ERROR; for (j = i; j &lt;= L-&gt;length; j++) L-&gt;elem[j - 1] = L-&gt;elem[j]; L-&gt;length--; return OK;&#125;int main()&#123; SqList L; InitList_Sq(&amp;L); GetLength(&amp;L);&#125; 优点 存储量大 可以随机读取表中的元素 缺点 增删要移动大量元素 浪费存储空间 静态 4线性表的链式 结点：数据元素的存储映像。由数据域和指针域 链表：N个结点由指针域组成链表 它是线性表的链式存储映像名称为线性表的链性存储 1.单链表结点只有一个指针域的链表 特点 结点在存储器的位置是任意的，即逻辑上相邻的数据元素，在物理上不一定 访问时只能通过头指针进入链表，并通过每个结点的指针域依次向后，寻找第一个和最后一个结点 栈与队列栈与队列是两个常用的 栈与队列是限定插入和删除只能在表的端点进行的线性表 12Insert(S,n+1,x) Delete(S,n)Insert(Q,n+1,x) Delete(Q,1) 栈—后进先出 使得栈成为有用的工具，数据转换，表达式，函数调用，递归，括号 2队列—先进先出 解决排队问题 脱机打印 多用户系统 等 栈stack特殊的线性表，是限定在一段，通常是表尾，进行插入和删除操作的线性表 相关概念后进an top栈顶 表头a1为base 插入元素到栈顶叫入栈（压）push，反之为入栈（弹出）pop 栈的定义 定义：限定在表的一端进行插入和删除的运算线性表 逻辑结构：通线性表一对一的关系 存储结构：顺序表更常见 只能在栈顶运算 入栈和出栈函数 案例进制转换十进制N想其他进制数d（二八十六） 法则为：除以d倒取余 n=（n div d）*d + n mod d div为整除运算 mod为求余 例子十进制159转八进制 1234159/8=19...719/8=2...32/8=0..2（237）8 括号匹配的验证表达式求值操作数和运算符和界限符 为了实现表达式求值设置两个栈 OPTR寄存运算符 操作数栈OPND用于寄存运算数和运算结果 栈的表示和操作1234567ADK Stack&#123;数据对象D=&#123;ai|ai属于ElemSet&#125;数据关系R1=&#123;&lt;ai-1,ai&gt;&#125;an端为栈顶，a1为栈底初始化 进栈出栈 取栈顶等&#125;ADT Stack 1234567891011121314151617InitStack(&amp;S)初始化操作 构造一个空栈SDestoryStack(&amp;S) 销毁栈操作初始条件S存在，结果销毁StackEmpty 判断是否为空S存在 空true 否为falseStackLength(S)求栈的长度S存在 返回S的个数，即栈长度GetTop(S,&amp;e)去栈顶S存在且为空用e返回S的栈顶元素ClearStack清空Push(&amp;S,e)入栈 顺序栈的实现，同一般线性表的顺序存完全相同 123456#define MAXSIZE 100typedef struct&#123; SElemType *base; SElemType *top; int stacksize&#125;Sqstack; 初始化1234567Status InitStack(SqStack &amp;S)&#123; S.base=(SElemType*)malloc(MAXSIZE*sizeof(SElemType)); if(!S.base)exiu(OBERFLOW); S.top=S.base; S.stacksize=MAXSIZE; return OK;&#125; 判断是否为空 12345Status StackEmpty(SqStack S)&#123; if(S.top==S.base)return TRUE; else return FALSE;&#125; 顺序栈长度 123int StackLength(SqStack S)&#123;return S.top-S.base;&#125; 清空 1234Status ClearStack(Sqstack &amp;S)&#123;if(S.base)S,top=S.base;return OK;&#125; 销毁 12345678Status DestroyStack(Sqstack &amp;S)&#123; if(S.base)&#123; delete S.base; S.stacksize=; S.base=S.top=NULL; &#125; return OK;&#125; 入栈 123456Status Push (SqStack &amp;S,SElemType e)&#123; if(S.top-S.base==S.stacksize)return ERROR; *S.top=e; S.top++; return OK;&#125; 出栈 12345Status Ppo(SqStack &amp;S,SElemType&amp;e)&#123; if(S.top==S.base)return ERROEL; E=*--s.TOP; return OK;&#125; 链栈123456typedef struct StackNode&#123; SElemType data; struct StackNode *next;&#125;StackNode,*LinkStack;LinkStack S; 链表的初始化 1234void InitStack(LinkStack &amp;S)&#123; S=NULL; return ok;&#125; 入栈 1234567Status Push(LinkStack &amp;S,SElemType e)&#123; p=new stacknoode; p-&gt;data=e; p-&gt;newt=S; S=p; return OK;&#125; 出栈 12345678Status Pop(LinkStack&amp;S,SElemTyoe &amp;e)&#123; if(S==NULL)return ERROE; e=s-&gt;data; p=S; S=S-&gt;next; delete p; &#125; 栈与递归递归定义的函数 递归数据结构 递归解法 队列queue先进先出FiFO 表一插入，在另一端表头删除 队列的相关概念 定义 头删尾插 逻辑结构 一对一先信标 循环和链队 之恶能在对手和队尾 入和出 队 树树的定义Tree是由包括零，多个结点的有限集，分为空树","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"C++学习笔记","slug":"CPP学习笔记","date":"2022-01-12T11:52:47.000Z","updated":"2022-04-19T15:09:27.630Z","comments":true,"path":"2022/01/12/CPP学习笔记/","link":"","permalink":"http://example.com/2022/01/12/CPP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"C++的学习笔记，恐怕要22年暑假才能学完吧","text":"C++的学习笔记，恐怕要22年暑假才能学完吧 1.C++认识1.1123456789101112#include&lt;iostream&gt;using namespace std:int main()&#123; cout&lt;&lt;&quot;hello world&quot;&lt; system(&quot;pause&quot;); return 0;&#125;cin&gt;&gt;a&gt;&gt;b;&lt; 因为一些事情，突然有了这样的创意。两人之间如果只用手机而且对方不看手机，来通过震动来传递简单的信息，我想到了用摩斯密码的短长可以用震动来代替，因此可以传达简单的信息，比如说测视力上下左右，就可以用摩斯密码来表示出来。目前我打算学习java，先了解安卓的程序语言基础，然后再研究下。2022/2/21","categories":[{"name":"编程","slug":"编程","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"cpp","slug":"编程/cpp","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/cpp/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://example.com/tags/cpp/"}]},{"title":"通信学院期末C复习题","slug":"期末考试C语言复习题","date":"2021-12-16T08:12:14.000Z","updated":"2022-04-19T15:08:55.114Z","comments":true,"path":"2021/12/16/期末考试C语言复习题/","link":"","permalink":"http://example.com/2021/12/16/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E9%A2%98/","excerpt":"BISTU 通信学院2021C语言期末考试题 每道题一定有多个写法，碍于时间我不能全部写出来，也没有这个能力，所以这些答案仅仅用于参考 因为写的时间紧所以可能有些小的错误请多见谅","text":"BISTU 通信学院2021C语言期末考试题 每道题一定有多个写法，碍于时间我不能全部写出来，也没有这个能力，所以这些答案仅仅用于参考 因为写的时间紧所以可能有些小的错误请多见谅 A易A阶段中大多数都是简单的题 12345主要的知识点为if，math.h里面的函数ASCII%d %fint char float等类型 1.温度转换 12345678910#include&lt;stdio.h&gt;int main()&#123; float f,c; printf(&quot;请输入华氏温度:&quot;); scanf(&quot;%f&quot;,&amp;f); c=(5.0/9)*(f-32); printf(&quot;转换成摄氏度是:%f\\n&quot;,c); return 0;&#125; 2.BMl计算输入身高（米）和体重（千克）计算 BMI 值，其中 BMI 值计算公式为，BMI = 体 重/身高^2。（实验一题目） 12345678#include&lt;stdio.h&gt;int main()&#123; float bmi, h, w; scanf_s(&quot;%f %f&quot;, &amp;h, &amp;w); bmi = w / (h * h); printf(&quot;%f&quot;, bmi);&#125; 3.大写转小写给定一个大写字母，要求用小写字母输出。提示：大写字母比小写字母的 ASCII 码 小 32。（第 3 章例题 123456789#include&lt;stdio.h&gt;int main()&#123; char a; scanf(&quot;%c&quot;,&amp;a); a=a+32;//ASCii中大写在前面 printf(&quot;%c&quot;,a); &#125; 4.由小到大排列输入两个实数，按由小到大的顺序输出这两个数。（第 4 章例题 12345678910#include&lt;stdio.h&gt;int main()&#123; int a,b; scanf(&quot;%d %d&quot;,&amp;a,&amp;b); if(a&lt;b) printf(&quot;%d&lt;%d&quot;,a,b); else printf(&quot;%d&lt;%d&quot;,b,a);&#125; 5.一元二次方程求 ax2+bx+c=0 方程的根。a,b,c 由键盘输入。需要在程序中进行判别，如果 b2- 4ac≥0，就计算并输出方程的两个实根，如果 b2-4ac&lt;0，就输出“此方程无实根” 的信息。（第 4 章例题 1234567891011121314151617181920212223#include&lt;stdio.h&gt;#include&lt;math.h&gt;//提供sqrt函数int main()&#123; float a, b, c; scanf_s(&quot;%f %f %f&quot;, &amp;a, &amp;b, &amp;c); float data; data = (b * b - 4 * a * c); if (data &lt; 0) &#123; printf(&quot;没有实数根&quot;); &#125; else if (data == 0) &#123; printf(&quot;x=%f&quot;, ((-b) / 2 * a)); &#125; else &#123; printf(&quot;x1=%f x2=%f&quot;, (sqrt(data)) - b / 2 * a, (-sqrt(data)) - b / 2 * a); &#125; &#125; 6.计算三角形面积给出三角形的三边长，求三角形面积。这题可以通过海伦公式快速解题 12345678910111213141516#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123; float a, b, c; float p; scanf_s(&quot;%f %f %f&quot;, &amp;a, &amp;b, &amp;c); p = (a + b + c) / 2; if (a + b &gt; c &amp;&amp; a + c &gt; b &amp;&amp; b + c &gt; a) &#123; printf(&quot;%f&quot;, sqrt(p * (p - a) * (p - b) * (p - c))); &#125; else printf(&quot;三角形不存在\\n&quot;);&#125; 7.判断是否为大写输入一个字符，判别它是否为大写字母，如果是，将它转换成小写字母；如果不是， 不转换。然后输出最后得到的字符。（第 4 章例题 12345678910111213// 输入一个字符，判断它是否为大写字母，如果是，将它转换成小写字母，如果不是不转换 #include &lt;stdio.h&gt; int main()&#123; char ch; scanf(&quot;%c&quot;,&amp;ch); if(ch &gt;= &#x27;A&#x27; &amp;&amp; ch &lt;= &#x27;Z&#x27;) ch = ch + 32; printf(&quot;%c\\n&quot;,ch);&#125; 8.成绩等级输入一个学生的成绩，使用 if else 语句输出该同学的成绩属于以下哪个等级。（实 验二） 60 分以下：不及格 60-70 分：及格 70-90 分：良好 90-100 分：优秀 123456789101112#include &lt;stdio.h&gt;int main()&#123; int score; scanf_s(&quot;%d&quot;, &amp;score); if (score &gt;= 90) printf(&quot;优\\n&quot;); if (score &gt;= 80 &amp;&amp; score &lt;= 89) printf(&quot;良\\n&quot;); if (score &gt;= 70 &amp;&amp; score &lt;= 79) printf(&quot;中\\n&quot;); if (score &gt;= 60 &amp;&amp; score &lt; 69) printf(&quot;及格\\n&quot;); if (score&lt;60) printf(&quot;不及格\\n&quot;);&#125; 9国民生产假如我国国民生产总值的年增长率为 7%，计算 10 年后我国国民生产总值与现在 相比增长多少百分比。计算公式为p=(1+r)^n n为年 r为增长率 1234567891011#include &lt;stdio.h&gt;#include &lt;math.h&gt;int main()&#123; float p,r,n; r=0.07; n=10; p=pow(1+r,n); //pow(a,b)a的b次幂 printf(&quot;p=%f\\n&quot;,p);&#125; 10.破解密码请编程序将“China”译成密码，密码规律是：用原来的字母后面的第 4 个字 母代替原来的字母。例如，字母“A”后面第 4 个字母是“E”，用“E”代替“A”。 字母表最后四个字母“WXYZ”，替代为“ABCD”。因此，“China”应译为“Glmre”。 （第 3 章课后习题 123456789101112#include&lt;stdio.h&gt;int main()&#123; char c1=&#x27;C&#x27;,c2=&#x27;h&#x27;,c3=&#x27;i&#x27;,c4=&#x27;n&#x27;,c5=&#x27;a&#x27;; c1 = c1 + 4; c2 = c2 + 4; c3 = c3 + 4; c4 = c4 + 4; c5 = c4 + 4; printf(&quot;%c%c%c%c%c\\n&quot;, c1, c2, c3, c4, c5);&#125; B中12到这里就开始出现if while for switch等函数 11.闰年典中典的题了 判断分两种情况，一个是能被400整除，一个是能被4整数但不能被100整除四年一闰,百年不闰 四百年再闰 1if(a%400==0||a%4==0&amp;&amp;a%100!=0) 12.阶乘用 C 语言求 12!，并画出流程图。（第 5 章课后习题） 123456789#include&lt;stdio.h&gt;int main()&#123; int n, sum = 1; for (int i = 1; i &lt;= 12; i++) sum = sum * i; printf(&quot;%d&quot;, sum);&#125; 13.判断位数使用循环结构设计一个程序，用户从终端输入一个整数，输出其是几位整数。 （实验二） 12345678910111213#include&lt;stdio.h&gt;int main()&#123; int n = 0, a; scanf_s(&quot;%d&quot;, &amp;a); while (a &gt; 0) &#123; a = a / 10; n++; &#125; printf(&quot;%d&quot;, n);&#125; 14.逆转数字从键盘输入一个四位的整数 num，将其个、十、百、千位倒序生成一个数字输 出。例如：输入 1234，输出 4321。（第 4 章课后习题） 123456789101112#include&lt;stdio.h&gt;int main()&#123; int a,b=0; scanf_s(&quot;%d&quot;, &amp;a); while (a&gt;0) &#123; b = b * 10 + a % 10; a = a / 10; &#125; printf(&quot;%d&quot;, b);&#125; 15.分段函数y=x (x","categories":[],"tags":[{"name":"考试","slug":"考试","permalink":"http://example.com/tags/%E8%80%83%E8%AF%95/"},{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"Python基础","slug":"Python基础","date":"2021-12-04T07:22:31.000Z","updated":"2022-04-19T15:17:39.963Z","comments":true,"path":"2021/12/04/Python基础/","link":"","permalink":"http://example.com/2021/12/04/Python%E5%9F%BA%E7%A1%80/","excerpt":"学习笔记","text":"学习笔记 1.Python的基本语法1Python的交互和脚本式交互式是不创建脚本文件，通过解释器的交互模式来编写代码脚本式，为创建.py格式进行执行 2标识符在 Python 里，标识符由字母、数字、下划线组成。 在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。 Python 中的标识符是区分大小写的。 以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。 Python 可以同一行显示多条语句，方法是用分号 ; 运算符 描述 [] [:] 下标，切片 ** 指数 ~ + - 按位取反, 正负号 * / % // 乘，除，模，整除 + - 加，减 &gt;&gt; &lt;&lt; 右移，左移 &amp; 按位与 ^ `\\ ` 按位异或，按位或 &lt;= &lt; &gt; &gt;= 小于等于，小于，大于，大于等于 == != 等于，不等于 is is not 身份运算符 in not in 成员运算符 not or and 逻辑运算符 = += -= *= /= %= //= **= &amp;= ` =`^= &gt;&gt;= &lt;&lt;= （复合）赋值运算符 3.保留字 and exec not assert finally or break for pass class from print continue global raise def if return del import try elif in while else is with except lambda yield 2数据类型1整数python可以写任意大的整数 如果出现很大的数比如说10000000可以写成10000_000 2浮点数浮点数可以用科学计数法来表示比如说1.23*10七次幂可以写1.23e9, 0.0015等于1.5e-3 数值运算函数round12round(11.111,2)这个函数是四舍五入round(x[,d])d为保留位数默认为0// 11.11 abs1abs（x）绝对值 pow1234pow(x,y[,z])幂余pow(2,3,3)//2 divmod123商余divmod(10，3）//（3，1） 3.字符串字符串是以单引号或者双引号写出来的 字符串内部中有”或者‘可以通过\\来表示 12345678910111213141516171819202122232425262728293031323334353637&#x27;I\\&#x27;m \\&quot;OK\\&quot;!&#x27;I&#x27;m &quot;OK&quot;!str1 = &#x27;hello, world!&#x27;# 通过内置函数len计算字符串的长度print(len(str1)) # 13# 获得字符串首字母大写的拷贝print(str1.capitalize()) # Hello, world!# 获得字符串每个单词首字母大写的拷贝print(str1.title()) # Hello, World!# 获得字符串变大写后的拷贝print(str1.upper()) # HELLO, WORLD!# 从字符串中查找子串所在位置print(str1.find(&#x27;or&#x27;)) # 8print(str1.find(&#x27;shit&#x27;)) # -1# 与find类似但找不到子串时会引发异常# print(str1.index(&#x27;or&#x27;))# print(str1.index(&#x27;shit&#x27;))# 检查字符串是否以指定的字符串开头print(str1.startswith(&#x27;He&#x27;)) # Falseprint(str1.startswith(&#x27;hel&#x27;)) # True# 检查字符串是否以指定的字符串结尾print(str1.endswith(&#x27;!&#x27;)) # True# 将字符串以指定的宽度居中并在两侧填充指定的字符print(str1.center(50, &#x27;*&#x27;))# 将字符串以指定的宽度靠右放置左侧填充指定的字符print(str1.rjust(50, &#x27; &#x27;))str2 = &#x27;abc123456&#x27;# 检查字符串是否由数字构成print(str2.isdigit()) # False# 检查字符串是否以字母构成print(str2.isalpha()) # False# 检查字符串是否以数字和字母构成print(str2.isalnum()) # Truestr3 = &#x27; jackfrued@126.com &#x27;print(str3)# 获得字符串修剪左右两侧空格之后的拷贝print(str3.strip()) 字符串函数 find返回从左边第一个指定的字符索引，找不到返回-1 index返回从左边第一个字符索引，找不到报错 123456str = &quot;abcde&quot;print(str.find(&#x27;c&#x27;))//2str = &quot;hello world&quot;a = str.index(&#x27;w&#x27;)print(a)//6 sqlit字符串的拆分 12str = &quot;hello world&quot;print(str.split(&#x27; &#x27;))//[&#x27;hello&#x27;, &#x27;world&#x27;] chr(x) ord(x) 字符串的方法方法必须用.方式 八种重要字符串的方法 str.lower str.upper() 返回字符串的副本，全部为大小写 str.split(sep=None)返回一个列表，由str根据sep被分割的部分组成 12&quot;a,b,c&quot;.split(&quot;,&quot;)# [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] str.count(sub)返回子串sub在str中中出现个数 12&quot;aabbaa&quot;,count(&quot;a&quot;)# 4 str.replace(old,new)返回str的副本，所以old子串被替换为new 12“python&quot;.replace(&quot;n&quot;,&quot;n123.io&quot;)# python123.io 字符串的格式化python用于槽方式以及format方式 1&quot;&#123;&#125;是世界上最好用的语言之一，而&#123;&#125;是效率最高的语言&quot;.format(&quot;python&quot;,&quot;c++&quot;) 4布尔值只有两个True和False 布尔值可以tong过and or not表达 123456789101112&gt;&gt;&gt; True and FalseFalse&gt;&gt;&gt; False and FalseFalse&gt;&gt;&gt; 5 &gt; 3 and 3 &gt; 1True&gt;&gt;&gt; True or TrueTrue&gt;&gt;&gt; True or FalseTrue&gt;&gt;&gt; not FalseTrue 5.空值用None表示，不能单纯理解为0 6变量重点python中 1a=&#x27;abc&#x27; python解释器干了两个事情 在内存中创建了‘abc’的字符串 在内存中创建a的变量指向‘abc’ 7.常量8.listlist是一种有序的集合，可以进行修改或者删除 1classmates=[&#x27;song&#x27;,&#x27;wang&#x27;,&#x27;zhang&#x27;] 使用len可获取list元素的个数 12&gt;&gt;&gt; len(classmates)3 索引 切片[start: end:step]用索引可以访问list的元素 1234567891011121314151617181920212223242526272829303132333435363738&gt;&gt;&gt; classmates[0]&#x27;song&#x27;&gt;&gt;&gt; classmates[1]&#x27;wang&#x27;&gt;&gt;&gt; classmates[2]&#x27;zhang&#x27;&gt;&gt;&gt; classmates[3]Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;IndexError: list index out of range list1 = [1, 3, 5, 7, 100]print(list1) # [1, 3, 5, 7, 100]# 乘号表示列表元素的重复list2 = [&#x27;hello&#x27;] * 3print(list2) # [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]# 计算列表长度(元素个数)print(len(list1)) # 5# 下标(索引)运算print(list1[0]) # 1print(list1[4]) # 100# print(list1[5]) # IndexError: list index out of rangeprint(list1[-1]) # 100print(list1[-3]) # 5list1[2] = 300print(list1) # [1, 3, 300, 7, 100]# 通过循环用下标遍历列表元素for index in range(len(list1)): print(list1[index])# 通过for循环遍历列表元素for elem in list1: print(elem)# 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值for index, elem in enumerate(list1): print(index, elem) 当然我们也可以通过负数来索引 12&gt;&gt;&gt; classmates[-1]&#x27;zhang&#x27; 增删因为list为可变的有序表 append 123&gt;&gt;&gt; classmates.append(&#x27;zhao&#x27;)&gt;&gt;&gt; classmatesclassmates=[&#x27;song&#x27;,&#x27;wang&#x27;,&#x27;zhang&#x27;,&#x27;zhao&#x27;] 元素想插入到指定的位置中.insert 12345&gt;&gt;&gt; classmates.insert(1, &#x27;Jack&#x27;)&gt;&gt;&gt; classmates&gt;&gt;&gt; classmates.append(&#x27;zhao&#x27;)classmates=[&#x27;song&#x27;,&#x27;jack&#x27;,&#x27;wang&#x27;,&#x27;zhang&#x27;,&#x27;zhao&#x27;] 删除末尾用 pop() 1234&gt;&gt;&gt; classmates.pop()&#x27;zhao&#x27;&gt;&gt;&gt; classmates[&#x27;song&#x27;,&#x27;jack&#x27;,&#x27;wang&#x27;,&#x27;zhang&#x27;] 想删除指定的位置用pop(i) 1234&gt;&gt;&gt; classmates.pop(1)&#x27;Jack&#x27;&gt;&gt;&gt; classmates[&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;] 12345678910111213141516171819202122list1 = [1, 3, 5, 7, 100]# 添加元素list1.append(200)list1.insert(1, 400)# 合并两个列表# list1.extend([1000, 2000])list1 += [1000, 2000]print(list1) # [1, 400, 3, 5, 7, 100, 200, 1000, 2000]print(len(list1)) # 9# 先通过成员运算判断元素是否在列表中，如果存在就删除该元素if 3 in list1: list1.remove(3)if 1234 in list1: list1.remove(1234)print(list1) # [1, 400, 5, 7, 100, 200, 1000, 2000]# 从指定的位置删除元素list1.pop(0)list1.pop(len(list1) - 1)print(list1) # [400, 5, 7, 100, 200, 1000]# 清空列表元素list1.clear()print(list1) # [] 生成式和生成器1234f = [x for x in range(1, 10)]print(f)f = [x + y for x in &#x27;ABCDE&#x27; for y in &#x27;1234567&#x27;]print(f) list中可以有不同类型的甚至list 123&gt;&gt;&gt; s = [22141, True, [&#x27;asp&#x27;, &#x27;php&#x27;], &#x27;scheme&#x27;]&gt;&gt;&gt; len(s)4 9.tuple有序的列表叫tuple，tuple不能被修改 不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。 123&gt;&gt;&gt; t = (1, 2)&gt;&gt;&gt; t(1, 2) 如果tuple中出现list也是可以修改的 12345&gt;&gt;&gt; t = (&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;A&#x27;, &#x27;B&#x27;])&gt;&gt;&gt; t[2][0] = &#x27;X&#x27;&gt;&gt;&gt; t[2][1] = &#x27;Y&#x27;&gt;&gt;&gt; t(&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;X&#x27;, &#x27;Y&#x27;]) 10dict（dictionary）其他的语言叫map 使用key-value dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下： 123&gt;&gt;&gt; d = &#123;&#x27;Michael&#x27;: 95, &#x27;Bob&#x27;: 75, &#x27;Tracy&#x27;: 85&#125;&gt;&gt;&gt; d[&#x27;Michael&#x27;]95 必须要有key才能读取value一个key只能有一个valuekey不存在报错 如果想删除只要删除key就可以了 11.setset和dict类型 是存放key的但是不存放value key不能重复 set具有数学上的set性质 比如无序，没有重复元素 1234567891011121314&gt;&gt;&gt; s = set([1, 2, 3])&gt;&gt;&gt; s&#123;1, 2, 3&#125;&gt;&gt;&gt; s.add(4)&gt;&gt;&gt; s&#123;1, 2, 3, 4&#125;&gt;&gt;&gt; s.add(4)&gt;&gt;&gt; s&#123;1, 2, 3, 4&#125;&gt;&gt;&gt; s.remove(4)&gt;&gt;&gt; s&#123;1, 2, 3&#125; 3.基本函数1.判断和c语言基本相似 注意不要少写了冒号 1234567age = 3if age &gt;= 18: print(&#x27;your age is&#x27;, age) print(&#x27;adult&#x27;)else: print(&#x27;your age is&#x27;, age) print(&#x27;teenager&#x27;) 12345678910111213141516age = 3if age &gt;= 18: print(&#x27;adult&#x27;)elif age &gt;= 6: #elif等于else if print(&#x27;teenager&#x27;)else: print(&#x27;kid&#x27;) if &lt;条件判断1&gt;: &lt;执行1&gt;elif &lt;条件判断2&gt;: &lt;执行2&gt;elif &lt;条件判断3&gt;: &lt;执行3&gt;else: &lt;执行4&gt; 2.循环python中的循环分为for in依次将list或者tuple中元素迭代 12345678names = [&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]for name in names: print(name) //MichaelBobTracy 3.输出1234567891011121314print(&quot;hello world&quot;)# 可以输出字符串# 含有运算符的表达式print(88 * 88 - 55)# 将数据输出文件中 主要盘符要存在 使用file=p a+以读写状态，没有就新建fp = open(&#x27;E:/编程/python/text.txt&#x27;, &#x27;a+&#x27;)print(&#x27;hello world&#x27;, file=fp)# 输出到这个文件夹fp.close()# 关闭a, b = 5, 10print(f&#x27;&#123;a&#125; * &#123;b&#125; = &#123;a * b&#125;&#x27;) 4.针对数据类型的特征1.Slice在list或者tuple取元素 range函数 12345678&gt;&gt;&gt;list(range(0, 30, 5))[0, 5, 10, 15, 20, 25]&gt;&gt;&gt; list(range(0, 10, 2))[0, 2, 4, 6, 8]&gt;&gt;&gt; list(range(0, -10, -1))[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]&gt;&gt;&gt; list(range(5))[0, 1, 2, 3, 4] 12345678list中可以通过for来切片&gt;&gt;&gt; r = []&gt;&gt;&gt; n = 3&gt;&gt;&gt; for i in range(n):... r.append(L[i])... &gt;&gt;&gt; r[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;] python有更简单的方法实现切片操作 12345678910111213141516171819&gt;&gt;&gt; L[0:3][&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]&gt;&gt;&gt; L[:3][&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]&gt;&gt;&gt; L[1:3][&#x27;Sarah&#x27;, &#x27;Tracy&#x27;]如果0-99提取前十&gt;&gt;&gt; L=list(rang(100))&gt;&gt;&gt; l[0,1,2....99]&gt;&gt;&gt; l[:10]l [0,1,...9]前十个，每两个取一个l[:10:2]l[::5] 2.lteration在python中通过for循环遍历list或者tuple叫迭送 3.列表生成式5基本库1time库time11648043734.0478468 ctime1Wed Mar 23 21:57:29 2022 gmtine1time.struct_time(tm_year=2022, tm_mon=3, tm_mday=23, tm_hour=13, tm_min=58, tm_sec=1, tm_wday=2, tm_yday=82, tm_isdst=0) 2022天天向上的力量一年365进步与退步千分之一365中工作五天进步百分之一，周末退步百分之一你和365天都在进步百分之一的卷仙一起工作，你工作日学习，但是休息日两天下降百分之一，那么你至少要在工作日学习百分之多少呢？ 123456789101112131415# daydayup.pydef dayUp(df): dayup = 1 for i in range(365): if i % 7 in[6,0]: dayup=dayup*(0.99) else: dayup =dayup*(1+df) return dayupdayfactor = 0.01while dayUp(dayfactor) &lt; 37.78: dayfactor+=0.001print(&quot;他工作日努力参数为&#123;:.3f&#125;&quot;.format(dayfactor))//0.019 文本进度条1234567891011# TextProBar1.pyimport timescale = 10print(&quot;........执行开始........&quot;)for i in range(scale+1): a=&#x27;*&#x27;*i b = &#x27;.&#x27;*(scale-i) c = (i/scale)*100 print(&quot;\\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;.format(c,a,b)) time.sleep(0.1)print(&quot;........结束........&quot;)","categories":[{"name":"编程","slug":"编程","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"编程/Python","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"CSS基础","slug":"CSS基础","date":"2021-12-03T06:46:59.000Z","updated":"2022-04-19T15:09:58.416Z","comments":true,"path":"2021/12/03/CSS基础/","link":"","permalink":"http://example.com/2021/12/03/CSS%E5%9F%BA%E7%A1%80/","excerpt":"CSS前端三剑客的老二","text":"CSS前端三剑客的老二 1.CSS简介1html自身的局限性2CSS选择器css的规则主要由两个部分组成的 选择器和一条或者多条声明 12&lt;选择器 属性 值 coor red这句话是声明&gt;h1 &#123;color:red; font-size:25px;&#125; 简单来说，选择标签用的 选择器分为 基础选择器和复合选择器 基础又分为 标签选择器 类选择器 id选择器 通配符选择器 1.标签选择器html标签名词作为选择器 语法 123标签名&#123;属性1：属性值1；&#125; 123456789&lt;style&gt; p &#123;color: burlywood;&#125;&lt;/style&gt;&lt;body&gt; &lt;p&gt;1234455&lt;/p&gt; &lt;p&gt;1234455&lt;/p&gt; &lt;p&gt;1234455&lt;/p&gt; &lt;/body&gt; 优点为快速为同类型的标签同意设置样态 但是如果是出现多个相同的属性，会一同全部修改 2.类选择器 （常用）1.使用123.类名&#123;属性1:属性值；&#125; 123456789101112&lt;style&gt; p &#123;color: burlywood;&#125; .red&#123; color: red; &#125;&lt;/style&gt;&lt;body&gt; &lt;p&gt;1234455&lt;/p&gt; &lt;p&gt;1234455&lt;/p&gt; &lt;p&gt;1234455&lt;/p&gt; &lt;div class=&quot;red&quot;&gt;我想变成红色&lt;/div&gt;&lt;/body&gt; 盒子 1234567891011121314151617181920212223242526&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .red&#123; width: 100px; height: 100px; /*背景颜色*/ background-color: red; &#125; .green&#123; width: 100px; height: 100px; background-color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;red&quot;&gt;hong&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;绿色&lt;/div&gt; &lt;div class=&quot;red&quot;&gt;hong&lt;/div&gt;&lt;/body&gt; 2.多类名在标签中class文件属性中写多个类名但是类名中间必须要用空格 123456789101112 &lt;style&gt; .red&#123; color:red; &#125; .font35&#123; font-size: 30px; &#125; &lt;/style&gt;&lt;body&gt; &lt;div class=&quot;red font35&quot;&gt;神乐同学&lt;/div&gt;&lt;/body&gt; 3.ID选择器id可以选择特定的属性 123456789 &lt;style&gt; #pink&#123; color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;pink&quot;&gt;dsadasda&lt;/div&gt;&lt;/body&gt; id选择用#定义 只能调用一次 二者区别在于使用次数id选择器一般用于页面唯一的元素，所以一般和JavaScript使用 4通配符选择器用*号定义，它可以表示所有的元素 2属性1.文字1font-family字体可用网络字体等 1234567891011 &lt;style&gt; h2&#123; font-family: &#x27;宋体&#x27;,&#x27;微软雅黑&#x27;; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;我是来自北京信息科技大学的神乐&lt;/h2&gt; &lt;p&gt;我是来自北京信息科技大学的神乐&lt;/p&gt; &lt;p&gt;我是来自北京信息科技大学的神乐&lt;/p&gt;&lt;/body&gt; 2.font-size123&lt;style&gt;font-size:20px;&lt;/style&gt; px像素大小是网页中最常用的单位 谷歌浏览器默认字体问=为16px 不同浏览器字号大小不相同 body指定整个页面字体大小 3.font-weightcss中使用font-weight修改粗细程度 1234&lt;style&gt; .bold&#123;font-weight: bold;&#125;&lt;/style&gt;&lt;p class=&quot;bold&quot;&gt;神乐&lt;/p&gt; bold就是相当于加粗效果 相当于number700属性值 为400等于默认 700等于加粗 4font-style1234&lt;style&gt; .bold&#123;font-style: normal;&#125;&lt;/style&gt;&lt;p class=&quot;bold&quot;&gt;神乐&lt;/p&gt; 属性值中 normal为默认 italic为显示斜体如果em标签和属性为italic的会变正 5.font的复合用法比如说div字体斜体 加粗 字号16 微软雅黑 1234567891011&lt;style&gt; div&#123; font-size:16px; font-family:&#x27;Microsoft yahei&#x27;; font-weight:700; font-style:italic; &#125;&lt;/style&gt;&lt;div&gt; 古道西风瘦马&lt;/div&gt; 或者 位置严格要求不能换 除了size和family不能省略 1234567/*font: font-style font-weight font-size/font-height font-family;*/ 类 粗 大 家div&#123;font: itailc 700 16px &quot;微软雅黑&quot;;&#125; 2.文本文本属性分为 颜色 对齐 装饰文本 缩进 行间距 1.color颜色表示方法分为三种 预定义颜色值 十六进制 RGB代码 123456div&#123;color: deeppink;color: #ff0000;color: rgb(200,0,0);&#125; 2.text-align样态文本属性值分为：left默认,center居中,right右对齐 3.text-decoration属性值为none默认,underline下划线,overlines上划线,line-through删除线 4text-indent文本缩进 通常是首行的缩进 123text-indent:10px;text-indent:2em;/*em的意思为相对单位*/ 5line-height控制行间距离的高度 文本高度默认为16px 所以line-height:16px；就是没有行间距 3.css引入方式1内部样态表单独放在style中 方便 没有完全分离 2.行内样态表直接在标签内部使用 1&lt;p style=&quot;color:red;&quot;&gt;我是内容&lt;/p？ style就是属性 写法要符合css规范 3外部样态表1234这是文件名字为：style.css div&#123;color:red;&#125; 123456&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;syy.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;我是内容&lt;/div&gt;&lt;/body&gt; 4chrome调试工具点我查看 5.Emmet语法6.CSS复合选择器后代选择器,子选择器,并集选择器, 1.后代选择器 主要元素1 元素2{} 1234567891011 &lt;style&gt; ol li a &#123;color:pink&#125; .name li&#123;color: seagreen;&#125; &lt;/style&gt;&lt;ol&gt; &lt;li&gt;我是后代&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;我是孙子&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol class=&quot;name&quot;&gt; &lt;li&gt;我是神乐&lt;/li&gt;&lt;/ol&gt; 2.子选择器 重要3,并集选择器用逗号分隔开了 123456789div,p&#123;&#125;&lt;div&gt; &lt;/div&gt;&lt;p&gt; &lt;/p&gt; 4.伪类选择器用：表示 1.链接伪类有很多种链接伪类 link visited hover active 1234a:hover&#123;color:gray;&#125;鼠标经过显示gray颜色 1234567a&#123;color:gray;&#125;a:hover&#123;color:red;&#125; 2.:focus伪类选择器123input:focus&#123;background-color:yellow;&#125; 7.CSS元素显示模式（重点)html元素分为块元素和行内元素两类型 1.块元素h p div ul ol li等是最常见的div是最典型的 特点独占一行 高度宽度外内边距等可以控制 宽度默认为容器（父级宽度）100% 是一个容器以及盒子 可以放行内以及块级元素 文字类的元素不能使用块级元素 p里面只能放文字 2.行内元素a strong b em i del s ins u span span是最典型的行内元素 高宽无效 一行可以显示多个 默认宽度就是本身内容宽度 3.行内块元素img input td 两个特点都有比较特殊 总结 4.元素显示模式转换display:block;转换块元素 display:inline;转换行内元素 display:inline-block行内块元素 12345&lt;style&gt; a&#123; display:block; &#125;&lt;/style&gt; 5.实例简洁版本侧边档123456789101112131415161718192021&lt;style&gt; a&#123; display: block; height: 20px; width: 100px; background-color: darkgray; font-size: 14px ; color: #fff; text-indent: 2em; text-decoration: none; &#125; a:hover&#123; background-color: coral; &#125;&lt;/style&gt;&lt;body&gt; &lt;a href=&quot;#&quot;&gt;手机&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;电视&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;盒子&lt;/a&gt;&lt;/bod》 6单行文字垂直居中可以通过文字的行高等于盒子的高度，就可以垂直居中 8CSS的背景小图片或者logo大图片 背景颜色图片 平铺 位置 固定等等 1.background-colorbackground-color一般默认为transparent 2.background-image使用方法为 background-image:url (); 123456789101112&lt;head&gt; &lt;style&gt; div&#123; width: 5000px; height: 1500px; background-image: url(![](https://kaguranotamashii-1308648145.cos.ap-beijing.myqcloud.com/202112101445712.png)); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt; 3.background-repeat123456background-repeat:;/*默认平铺*/no-repeatrepeatrepeat-xrepeat-y 4.background-position可以修改图片位置 12345678910111213background-position:x y;/*参数分为两种length 百分数position 方位名词 top center bottom left center right如果都是方位名词，与前后无关如left top和top left在一些情况下 想要精准也可以通过精确坐标 d*/ 5.background-attachment背景固定 背景附着 这个设置设置背景图片是否固定还是滚动 scroll为滚动fixed为固定 6背景属性混合写法前五个复合写法可以像font一样节约代码量 一般没有要求但是，一般习惯写为一下 background:背景颜色 背景图片 背景平铺 背景滚动 位置 1background: red url() no-repeat fixed top; 7.背景色半透明1background:(0,0,0,alpht) 7.综合案例 五彩导航12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;综合案例-五彩导航&lt;/title&gt; &lt;style&gt; .nav a&#123; display:inline-block; width: 120px; height: 58px; background-color: pink; text-align: center; color: #fff; text-decoration: none; line-height: 48px; &#125; .nav .bg1&#123; background-image: url(images/bg1.png); &#125; .nav .bg2&#123; background-image: url(images/bg2.png); &#125; .nav .bg1:hover&#123; background-image: url(images/bg11.png); &#125; .nav .bg2:hover&#123; background-image: url(images/bg22.png); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;nav&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;bg1&quot;&gt;五彩导航&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;bg2&quot;&gt;五彩导航&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;五彩导航&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;五彩导航&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;五彩导航&lt;/a&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 9.CSS三大特征1.层叠性123456789101112131415161718 &lt;style&gt; div&#123; color:red; &#125; div&#123; color: royalblue; font-size: 50px; &#125; div&#123; color:seagreen &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; 大江东去 &lt;/div&gt;&lt;/body&gt; 这里div有三个选择 但是只执行的只有fintsize和最后一个color 就近原则，哪个近就执行哪个 样态不冲突 不会重叠 2.继承性现实的继承 我们继承了父亲的姓 123456789101112 &lt;style&gt; div &#123; color: pink; font-size: 14px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt;龙生龙,凤生凤,老鼠生的孩子会打洞&lt;/p&gt; &lt;/div&gt;&lt;/body&gt; p继承了父div的性质 继承性就是简化代码 降低复杂性text font line 行高的继承123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;行高的继承&lt;/title&gt; &lt;style&gt; body &#123; color: pink; /* font: 12px/24px &#x27;Microsoft YaHei&#x27;; */ font: 12px; &#125; div &#123; /* 子元素继承了父元素 body 的行高 1.5 */ /* 这个1.5 就是当前元素文字大小 font-size 的1.5倍 所以当前div 的行高就是21像素 */ font-size: 14px; &#125; p &#123; /* 1.5 * 16 = 24 当前的行高 */ font-size: 16px; &#125; /* li 么有手动指定文字大小 则会继承父亲的 文字大小 body 12px 所以 li 的文字大小为 12px 当前li 的行高就是 12 * 1.5 = 18 */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;粉红色的回忆&lt;/div&gt; &lt;p&gt;粉红色的回忆&lt;/p&gt; &lt;ul&gt; &lt;li&gt;我没有指定文字大小&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 3.优先性 选择器相同 则执行层叠层 不同 根据选择器权重决定 12345678910111213141516 &lt;style&gt; .test &#123; color: red; &#125; div &#123; color: pink!important; &#125; #demo &#123; color: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;test&quot; id=&quot;demo&quot; style=&quot;color: purple&quot;&gt;你笑起来真好看&lt;/div&gt;&lt;/body&gt; 10.盒子模型（超重点）Box Model学习页面布局有三大模型 盒子 浮动 定位 12345盒子中要有border边框content内容padding内边距margin外边距 1.border边框border中有 宽度 边框样态 颜色 123456789101112131415&lt;style&gt; div&#123; width: 300px; height: 200px; border-style: solid;/*solib实线 dashed 虚线 dotted点线边框*/ border-width: 20px; border-color: red; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617边框的复合写法 没有顺序 &lt;style&gt; div &#123; width: 300px; height: 200px; /* border-width: 5px; border-style: solid; border-color: pink; */ /* 边框的复合写法 简写: */ /* border: 5px solid pink; */ /* 上边框 */ border-top: 5px solid pink; /* 下边框 */ border-bottom: 10px dashed purple; border:red 5px solid; &#125; &lt;/style&gt; 2.padding内边距padding控制内边距 12345678div &#123; width: 300px; height: 160px; background-color: pink; padding-top: 20px; padding-left: 22px; padding-right: 22px; &#125; padding影响了盒子的大小 会撑大盒子 1234567891011121314151617.nav &#123; height: 41px; border-top: 3px solid red; border-bottom: 1px solid beige; background-color: #fcfcfc; line-height: 41px;&#125;.nav a &#123; display: inline-block; font-size: 12px; color: blue; text-decoration: none; padding: 0 20px; height: 41px;&#125; 3.margin外边距两个盒子的距离 还是和内边距相似 top right bottom left 外边距作用为水平居中 指定宽度 盒子左右外边距为auto 123margin-left:auto;margin-right:auto;margin:auto;margin:0 auto; 行内和行内块用text-alignLcenter 11.浮动float传统网页布局三种方式 普通流 浮动 定位 标准流（普通 文档）按照标签规定默认排序 块单独一行 从上香下排序又div hr h1-h6 ui ol form table 行内按照左右排序如 span a i em 3浮动元素具有行内吧块元素特征 123456789101112131415161718192021222324252627282930313233343536 &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; li &#123; list-style: none; &#125; .box &#123; width: 1226px; height: 285px; background-color: pink; margin: 0 auto; &#125; .box li &#123; width: 296px; height: 285px; background-color: purple; float: left; margin-right: 14px; &#125; .box .last &#123; margin-right: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul class=&quot;box&quot;&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li class=&quot;last&quot;&gt;4&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 清除浮动 12定位有些效果无法用标准流和浮动，这时候要用定位 浮动可以让多个块级元素在一行没有空袭 定位用于自由控制盒子 1static静态定位没有边偏移 2relative相对定位 3absolute绝对定位子绝父相","categories":[{"name":"编程","slug":"编程","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"前端","slug":"编程/前端","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"编程/前端/CSS","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"JavaScript入门","slug":"JavaScript入门","date":"2021-12-01T11:19:12.000Z","updated":"2022-04-19T15:11:22.372Z","comments":true,"path":"2021/12/01/JavaScript入门/","link":"","permalink":"http://example.com/2021/12/01/JavaScript%E5%85%A5%E9%97%A8/","excerpt":"前端三剑客的大哥捏","text":"前端三剑客的大哥捏 1.关于JavaScript1.JavaScript是什么？ HTML 定义了网页的内容 CSS 描述了网页的布局 JavaScript 控制了网页的行为 浏览器不会执行js，通过js解释器 js的引入有三种 行内式的内嵌式 输入输出语句12345678JavaScript 显示数据JavaScript 可以通过不同的方式来输出数据：使用 window.alert() 弹出警告框。使用 document.write() 方法将内容写到 HTML 文档中。使用 innerHTML 写入到 HTML 元素。使用 console.log() 写入到浏览器的控制台。 字面量和变量js是一种弱类型或者动态的语言，不用提前声明类型，类型被自动确定 数字（Number）字面量 可以是整数或者是小数，或者是科学计数(e)。 1isNaN来判断是否为非数字，并返回一个值 如果是数字返回false，反之true 字符串（String）字面量 可以使用单引号或双引号:表达式字面量 用于计算： 数组（Array）字面量 定义一个数组： [40, 100, 1, 5, 25, 10] 对象（Object）字面量 定义一个对象： {firstName:”John”, lastName:”Doe”, age:50, eyeColor:”blue”} 函数（Function）字面量 定义一个函数： function myFunction(a, b) { return a * b;} 在编程语言中，变量用于存储数据值。 JavaScript 使用关键字 var 来定义变量， 使用等号来为变量赋值： JavaScript 数据类型JavaScript 有多种数据类型：数字，字符串，数组，对象等等： 12345var length = 16; // Number 通过数字字面量赋值var points = x * 10; // Number 通过表达式字面量赋值var lastName = &quot;Johnson&quot;; // String 通过字符串字面量赋值var cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;]; // Array 通过数组字面量赋值var person = &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;&#125;; // Object 通过对象字面量赋值 var cars = new Array();cars[0] = “Saab”;cars[1] = “Volvo”;cars[2] = “BMW”; 对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔： var person={firstname:”John”, lastname:”Doe”, id:5566}; 上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。 var person={firstname : “John”,lastname : “Doe”,id : 5566}; 12345678var person=&#123; firstname : &quot;John&quot;, lastname : &quot;Doe&quot;, id : 5566&#125;;document.write(person.lastname + &quot;&lt;br&gt;&quot;);document.write(person[&quot;lastname&quot;] + &quot;&lt;br&gt;&quot;); 语句 描述 break 用于跳出循环。 catch 语句块，在 try 语句块执行出错时执行 catch 语句块。 continue 跳过循环中的一个迭代。 do … while 执行一个语句块，在条件语句为 true 时继续执行该语句块。 for 在条件语句为 true 时，可以将代码块执行指定的次数。 for … in 用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。 function 定义一个函数 if … else 用于基于不同的条件来执行不同的动作。 return 退出函数 switch 用于基于不同的条件来执行不同的动作。 throw 抛出（生成）错误 。 try 实现错误处理，与 catch 一同使用。 var 声明一个变量。 while 当条件语句为 true 时，执行语句块。 值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。 引用数据类型（对象类型）：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）。 函数匿名函数123var fun =funtion()&#123;console.log(&quot;hello world&quot;);&#125; 面向对象创建方法1利用对象字面量创建对象123456789var obj-&#123;uname: &quot;songyuran&quot;,age: 18,sayhi: funtion()&#123;console.log(&quot;log&quot;);&#125;&#125; 利用new object创建对象1234var obj=new Object();obj,uname=&#x27;songyiran&#x27;; 构造函数因为一上只能创建一个对象，有了构造函数可以让相同的属性和方法抽象出来封装出来到函数里面 123456funtion Star(uname,age,sex)&#123;this.name=uname;this.age=age;this,sex=sex;&#125;var ldh=new Star(&quot;songyuran&quot;,18,&#x27;nan&#x27;); 遍历对象1234for(var k in obj)&#123;console.log(k);console.log(obj[k]);&#125; 内置对象Mathrandom()*(max-min+1)+min0《=x《1 date DOMDOM树获取元素获取ID1234getElementByld()get element by idconsole.dir打印返回的元素对象，更好查看里面的属性和方法 根据标签名12getElementByTagNameelement.getElementByTagName 根据类名1getElementByClassName 返回指定选择器第一个元素对象1querySelector 返回指定所有的选择器所以元素对象1query.SelectorAll 获取特殊元素body1document.body html1document.documentElemnt 事件基础事件源 事件类型 事件处理程序 三要素 12345var btn =document.getElemnent.byId(&#x27;btn&#x27;)btn.onclick =funtion()&#123;alert(&quot;hello world&quot;)&#125; 修改元素","categories":[{"name":"编程","slug":"编程","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"前端","slug":"编程/前端","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/"},{"name":"javascript","slug":"编程/前端/javascript","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://example.com/tags/javascript/"}]},{"title":"美化博客出现的问题","slug":"美化博客出现的问题","date":"2021-11-25T09:00:41.000Z","updated":"2022-04-19T15:08:47.117Z","comments":true,"path":"2021/11/25/美化博客出现的问题/","link":"","permalink":"http://example.com/2021/11/25/%E7%BE%8E%E5%8C%96%E5%8D%9A%E5%AE%A2%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"总结hexo错误的原因和措施","text":"总结hexo错误的原因和措施 我今天在美化我的博客的时候本地启动的时候出现了奇怪的问题，导致不能添加新的Md文章。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647INFO Validating configINFO Start processingERROR &#123; err: TypeError: Cannot read properties of null (reading &#x27;utcOffset&#x27;) at exports.timezone (E:\\kagura blog\\myblog\\1125错误\\node_modules\\hexo\\lib\\plugins\\processor\\common.js:56:42) at E:\\kagura blog\\myblog\\1125错误\\node_modules\\hexo\\lib\\plugins\\processor\\post.js:81:38 at tryCatcher (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\util.js:16:23) at Promise._settlePromiseFromHandler (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:544:35) at Promise._settlePromise (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:604:18) at Promise._settlePromise0 (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at Promise._fulfill (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:673:18) at PromiseArray._resolve (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19) at PromiseArray._promiseFulfilled (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14) at PromiseArray._iterate (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:115:31) at PromiseArray.init [as _init] (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:79:10) at Promise._settlePromise (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:601:21) at Promise._settlePromise0 (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at Promise._fulfill (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:673:18) at PromiseArray._resolve (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19) at PromiseArray._promiseFulfilled (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14) at Promise._settlePromise (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:609:26) at Promise._settlePromise0 (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at _drainQueueStep (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\async.js:93:12)&#125; Process failed: %s _posts/111.mdERROR &#123; err: TypeError: Cannot read properties of null (reading &#x27;utcOffset&#x27;) at exports.timezone (E:\\kagura blog\\myblog\\1125错误\\node_modules\\hexo\\lib\\plugins\\processor\\common.js:56:42) at E:\\kagura blog\\myblog\\1125错误\\node_modules\\hexo\\lib\\plugins\\processor\\post.js:81:38 at tryCatcher (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\util.js:16:23) at Promise._settlePromiseFromHandler (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:544:35) at Promise._settlePromise (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:604:18) at Promise._settlePromise0 (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at Promise._fulfill (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:673:18) at PromiseArray._resolve (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19) at PromiseArray._promiseFulfilled (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14) at PromiseArray._iterate (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:115:31) at PromiseArray.init [as _init] (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:79:10) at Promise._settlePromise (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:601:21) at Promise._settlePromise0 (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at Promise._fulfill (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:673:18) at PromiseArray._resolve (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19) at PromiseArray._promiseFulfilled (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14) at Promise._settlePromise (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:609:26) at Promise._settlePromise0 (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:649:10) at Promise._settlePromises (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\promise.js:729:18) at _drainQueueStep (E:\\kagura blog\\myblog\\1125错误\\node_modules\\bluebird\\js\\release\\async.js:93:12)&#125; Process failed: %s _posts/博客记录.md 幸亏有备份将我的源文件备份好了，否则恐怕就要重新去配置了。 为了防止下次再出现这种情况 源文件必须要在GitHub备份 历史更新记录描述一定要描述清楚了","categories":[{"name":"个人博客","slug":"个人博客","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"问题","slug":"个人博客/问题","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"踩过的坑","slug":"踩过的坑","permalink":"http://example.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"}]},{"title":"Html基础","slug":"html基础","date":"2021-11-23T15:49:10.000Z","updated":"2022-04-19T15:10:14.788Z","comments":true,"path":"2021/11/23/html基础/","link":"","permalink":"http://example.com/2021/11/23/html%E5%9F%BA%E7%A1%80/","excerpt":"前端三剑客的弟弟","text":"前端三剑客的弟弟 [TOC] 1.HTML入门​ html是创建网页的标准标记语言。网页有很多的格式,html,jsp,asp等 ，html并不是编程语言，因为编程语言具有逻辑能力，html超越了传统的txt文本，具有超文本性，是一种标记语言。 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;//这是文档的声明，声明文档为html&lt;html lang=&quot;zh-CN&quot;&gt;//en zh-CN&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;这是网页标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;这是一段文本&lt;/p&gt; &lt;a href=&quot;http://c.biancheng.net/&quot;&gt;这个一个超链接&lt;/a&gt; &lt;ul&gt; &lt;li&gt;HTML教程&lt;/li&gt; &lt;li&gt;CSS教程&lt;/li&gt; &lt;li&gt;JavaScript教程&lt;/li&gt; &lt;/ul&gt; &lt;input type=&quot;text&quot; placeholder=&quot;请输入内容&quot; /&gt; &lt;h1&gt;这是一个标题&lt;/h1&gt;//h1-h6 &lt;p&gt;这是一个段落&lt;/p&gt; &lt;p&gt;这是另一个段落&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 以上这个就是最基本的网页格式，每个html标签(Tag)都有不同的含义 &lt;.html&gt;当作所有的html代码，可以把它当作外壳 &lt;.head&gt; 标签表示网页的头部，用来设置一些网页的参数 &lt;.meta charset=”UTF-8”&gt; 指明当前网页编码格式 UTF-8； &lt;.title&gt; 网页的标题，它会显示在浏览器的标题栏。&lt;./head&gt; &lt;.body&gt;表示正文 &lt;.p&gt;表示段落，能容纳一段文字 &lt;.a&gt;用来表示一个超链接&lt;.ul&gt;表示一个列表，里面的是子标签 HTML语言中最推荐vscode写 &lt;!DOCTYPE&gt; html小白入门 这是文本标题，下面是一张图片 按钮 d ​ 1234567891011121314&lt;!DOCTYPE&gt;&lt;!--html标记--&gt;&lt;html&gt; &lt;!--html总标记--&gt; &lt;head&gt;&lt;!--头信息标签--&gt; &lt;meta charset=&quot;utf-8&quot;&gt;&lt;!--utf-8编码--&gt; &lt;title&gt;html小白入门&lt;/title&gt;&lt;!--页面标题--&gt; &lt;head&gt; &lt;body&gt;&lt;!--网页显示标签，body标签内的信息都会在页面中显示--&gt; &lt;h1&gt;这是文本标题，下面是一张图片&lt;/h1&gt;&lt;!--文本标题标签--&gt; &lt;h2 href=&quot;baidu.com&quot;&gt;点我百度搜索&lt;/a&gt;&lt;!--超链接--&gt; &lt;imgsrc=&quot;tupian.jpg&quot;&gt;&lt;br&gt;&lt;!--图片标签，br是换行标签--&gt; &lt;input type=&quot;text&quot; value=&quot;这是输入框，请输入内容！&quot;&gt;&lt;br&gt;&lt;!--输入框标签--&gt; &lt;button type=&quot;submit&quot; &gt;按钮&lt;/button&gt;&lt;!--按钮标签--&gt; &lt;/body&gt;&lt;/html&gt; 这个就是最基本的使用方法 2.HMTL的语法1.html标签的语法格式(请忽略.)&lt;.div class=”foo”&gt;我是内容&lt;/div.&gt;foo为属性 前后div为开始结束标签 开始标签可以写除了class的比如id title等 html标签是成对出现的，称之为双标签有些特殊的比如说 div为内容划分元素 是出现最高的 2.标签关系HTML标签包含关系1234567891011 &lt;h1&gt;神楽の魂&lt;font size=&quot;4&quot; color=&quot;#666&quot;&gt;自我介绍&lt;/font&gt;&lt;/h1&gt; &lt;p&gt; 这是北京普通的双非&lt;b&gt;大学生&lt;/b&gt;的个人博客，目前 &lt;font color=&quot;red&quot;&gt;18岁&lt;sup&gt;①&lt;/sup&gt;&lt;/font&gt;，&lt;a href=&quot;https://kaguranotamashii.github.io/&quot; target=&quot;_blank&quot;&gt;猛击这里&lt;/a&gt;查看我的博客&lt;i&gt;C语言&lt;/i&gt;、&lt;i&gt;python&lt;/i&gt;、&lt;i&gt;html&lt;/i&gt; &lt;i&gt;css&lt;/i&gt; &lt;hr /&gt; &lt;small&gt;03年出生&lt;/small&gt; &lt;/p&gt;&lt;!包含关系&gt;&lt;html&gt; &lt;head&gt; &lt;/head&gt;&lt;/html&gt; 对代码的说明 &lt;.font&gt; size改变大小 clor改变颜色 &lt;.b&gt;加粗 &lt;.sup&gt;上方的小标 &lt;.i&gt;斜 &lt;.hr&gt;分割线，它是自闭和标签 &lt;.a&gt;为打开超链接 其中&lt;.target&gt;为打开方式 ——blank表示在新标签打开 并列关系(兄弟关系)&lt;.head&gt;&lt;/.head&gt; 基本标签 html标签 根标签 头部 在head中我们必须要设计的标签是title 标题 属于自己的网页标题 主体 元素包含的所有内容，页面内容基本都是放在body中的 3.HTML属性1.属性1attr=&quot;value&quot; attr为属性名字 value表示属性值 1.专用属性有些属性适合大部分 叫通用属性有些只适合小部分 叫专用属性比如说img中src和alt就是专用属性 a中href和target也是专用属性 1&lt;img src=&quot;xxxx.png&quot; alt=&quot;xxxxx&quot; width=&quot;100&quot; height=&quot;50&quot;&gt; 2.通用属性如id,title,class,style 1.idid属性是用来赋值给某个标签名字，当使用css或者js时候，可以通过id来找到这个标签。 id可以快速找到定位，id可以方便区分，id具有唯一性 123&lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt;&lt;div id=&quot;content&quot;&gt;我的博客&lt;/div&gt;&lt;p id=&quot;url&quot;&gt;kaguranotamashii.github.io/&lt;/p&gt; 2.classclass与id不同在于，class可以定义多个相同值 class=” “ 123&lt;div class=&quot;className1 className2 className3&quot;&gt;&lt;/div&gt;&lt;p class=&quot;content&quot;&gt;神楽の魂的博客&lt;/p&gt;&lt;div class=&quot;content&quot;&gt;kaguranotamashii.github.io&lt;/div&gt; 3.titletitle属性是用来标签内容的描述说明 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;演示文档&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;http://c.biancheng.net/html/&quot; title=&quot;HTML教程&quot;&gt;HTML教程&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; 4.stylestyle属性我们可以在html标签内部定义css样态，比如颜色，字体等等 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;演示文档&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p style=&quot;color:red;&quot;&gt;kaguranotamashii,github.io&lt;/p&gt; &lt;img src=&quot;./logo.png&quot; style=&quot;height:50px;&quot; alt=&quot;C语言中文网LOGO&quot;&gt; &lt;div style=&quot;padding:10px;border:2px solid #999;text-align:center;&quot;&gt;C语言中文网&lt;/div&gt;&lt;!这里做个批注padding表示内边距，内容区与边框之间的区域 border表示设置元素的边框--&gt; &lt;/body&gt;&lt;/html&gt; 4.HTML标题1.&lt;.h1&gt;到&lt;.h6&gt;（head)123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML标题标签演示&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;h1 标题&lt;/h1&gt; &lt;h2&gt;h2 标题&lt;/h2&gt; &lt;h3&gt;h3 标题&lt;/h3&gt; &lt;h4&gt;h4 标题&lt;/h4&gt; &lt;h5&gt;h5 标题&lt;/h5&gt; &lt;h6&gt;h6 标题&lt;/h6&gt;&lt;/body&gt;&lt;/html&gt; 标题标签的使用只能用于定义标签，不能加粗 5.HTML段落标签&lt;.p&gt;paragraph 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; &lt;title&gt;测试&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;这是神楽の魂的博客网站为&lt;a href=&quot;kaguranotamashii.github.io&quot;&gt;点我&lt;/a&gt;&lt;/p&gt; &lt;p&gt;我的博客会写一些技术向的内容&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 1.&lt;.p&gt;的用法段落标签由开始标签&lt;p&gt;和结束标签&lt;/p&gt;组成，开始和结束标签之间的内容会被视为一个段落。段落标签是一个非常基本的标签，我们在网页上发布文章时就会用到 2.段落中的空白符123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML段落中的空白符&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;神 楽の魂 的 博 客&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 如果想要在段落中换行，需要使用专门的换行标签&lt;br /&gt;，&lt;br /&gt;标签属于自闭和标签，因此不需要对应的结束标签`&lt; /br&gt; 文本在一个段落中会根据浏览器窗口大小自动换行 段落与段落有空隙 6.HTML文本格式化突出重要性 比普通文字更重要 标签 描述 &lt; b&gt;…&lt;/b&gt; 加粗标签中的字体 &lt; em&gt;…&lt;/em&gt; 强调标签中的内容，并使标签中的字体倾斜 &lt; i&gt;…&lt;/i&gt; 定义标签中的字体为斜体 &lt; small&gt;…&lt;/small&gt; 定义标签中的字体为小号字体 &lt; strong&gt;…&lt;/strong&gt; 强调标签中的内容，并将字体加粗（推荐） &lt; sub&gt;…&lt;/sub&gt; 定义下标文本 &lt; sup&gt;…&lt;/sup&gt; 定义上标文本 &lt; ins&gt;…&lt;/ins&gt; 下划线 &lt; del&gt;…&lt;/del&gt; 在文本内容上添加删除线 &lt; code&gt;…&lt;/code&gt; 定义一段代码 &lt; kbd&gt;…&lt;/kbd&gt; 用来表示文本是通过键盘输入的(不建议使用) &lt; samp&gt;…&lt;/samp&gt; 定义程序的样本 &lt; var&gt;…&lt;/var&gt; 定义变量 &lt; pre&gt;…&lt;/pre&gt; 定义预格式化的文本，被该标签包裹的文本会保留所有的空格和换行符，字体也会呈现为等宽字体 &lt; abbr&gt;…&lt;/abbr&gt; 用来表示标签中的内容为缩写形式 &lt; address&gt;…&lt;/address&gt; 用来定义文档作者的联系信息，被该标签包裹的文本通常会以斜体呈现，并在文本前面换行 &lt; bdo&gt;…&lt;/bdo&gt; 定义标签中的文字方向 &lt; blockquote&gt;…&lt;/blockquote&gt; 定义一段引用的文本，例如名人名言，文本会换行输出，并在左右两边进行缩进 &lt; q&gt;…&lt;/q&gt; 定义一段短的引用，浏览器会将引用的内容使用双引号包裹起来 &lt; cite&gt;…&lt;/cite&gt; 表示对某个文献的引用，例如书籍或杂志的名称，文本会以斜体显示 &lt; dfn&gt;…&lt;/dfn&gt; 用来定义一个术语，标签中的文本会以斜体呈现 几个相似的格式化文本1.strong和b前者表示加重语气,后者只是单纯的加粗,在无障碍模式中strong会比b的声音更特殊. 2.em和iem也是加重处理,i仅仅是单纯的斜体 7div和span标签两者没有语义，他们就是一个盒子，用来放内容 div division表示分割 分区span表示跨度 跨距 div用来布局 但是一行只能有一个div 大盒子span相反 一行可以放多个span 小盒子 8.特殊的字符 123&amp;nbsp;空格&amp;lt;小于&amp;gt;大于 7.HTML超链接&lt;.a&gt;1.用法1&lt;a href=&quot;url&quot; target=&quot;opentype&quot;&gt;链接文本&lt;/a&gt; 2href的属性anchor 瞄 href 属性指定链接的目标，也就是要跳转到什么位置。href 可以有多种形式，例如： href 可以指向一个网页（.html、.php、.jsp、.asp 等格式），这也是最常见的形式，例如 href=”http://c.biancheng.net/view/1719.html&quot;； href 可以指向图片（.jpg、.gif、.png 等格式）、音频（.mp3、.wav等格式）、视频（.mp4、.mkv格式）等媒体文件，例如 href=”/uploads/allimg/181221/134I32557-0.jpg”； href 可以指向压缩文件（.zip、.rar 等格式）、可执行程序（.exe）等，一些下载网站的链接就可以写成这种形式，例如 href=”./../uploads/data_package/ComputerFoundation.zip”； href 甚至还可以指向本机的文件，只是很少这样使用，例如 href=”D:/Program Files/360/360safe/360Safe.exe”。 你看，href 本质上就是指向一个文件，这个文件几乎可以是任意格式的。如果浏览器支持这种格式，那么它就可以在浏览器上显示，比如常见的图片、音频、视频等，如果浏览器不支持这种格式，那么就提示用户下载。 3.target的属性 属性值 说明 _self 默认，在现有窗口中打开新页面，原窗口将被覆盖。 _blank 在新窗口中打开新页面，原窗口将被保留。 _parent 在当前框架的上一层打开新页面。 _top 在顶层框架中打开新页面。 如果不设置默认为_self 4.href的本地网页跳转1234567&lt;a href=&quot;#sakura&quot;&gt;点我跳转&lt;/a&gt;&lt;p&gt;忽略我&lt;/p&gt;&lt;p&gt;忽略我&lt;/p&gt;&lt;p&gt;忽略我&lt;/p&gt;&lt;p&gt;忽略我&lt;/p&gt;&lt;p&gt;忽略我&lt;/p&gt;&lt;p id=&quot;sakura&quot;&gt;我是sakura&lt;/p&gt; 点我跳转 忽略我 忽略我 忽略我 忽略我 忽略我 我是sakura 8HTML插入图片&lt;.img&gt;1.用法1&lt;img src=&quot;url alt=&quot;text&quot;&gt; src(source)为必选属性,用来指明图片的地址和目录,支持多种图片类型 alt为可选属性,如果遇到图片加载不了,会显示alt的信息 123456&lt;body&gt; &lt;!-- 使用绝对路径插入网络图片 --&gt; &lt;img src=&quot;http://c.biancheng.net/cpp/templets/new/images/logo.jpg?v=3.994&quot; alt=&quot;C语言中文网Logo&quot;&gt; &lt;br&gt; &lt;!-- 在当前 HTML 文档的上层目录中有一个 images 文件夹，该文件夹下有一张图片 html5.png --&gt; &lt;img src=&quot;../images/html5.png&quot; alt=&quot;HTML5 Logo&quot;&gt;&lt;/body&gt; 2.设置图片的宽高度​ 比如这张图片渚薰被吃 1234&lt;img src=&quot;http://r34tujk76.hb-bkt.clouddn.com/blog/20211126/195024889.jpg&quot; alt=&quot;渚薰被吃了&quot;title=&quot;渚薰被吃&quot; style=&quot;width: 200px; height: 100px;&quot;&gt;&lt;img src=&quot;http://r34tujk76.hb-bkt.clouddn.com/blog/20211126/195024889.jpg&quot; alt=&quot;渚薰被吃了&quot; style=&quot;width: 200px; height: 150px;&quot;&gt;&lt;img src=&quot;http://r34tujk76.hb-bkt.clouddn.com/blog/20211126/195024889.jpg&quot; alt=&quot;渚薰被吃了&quot; style=&quot;width: 100px; height: 200px;&quot;&gt;&lt;img src=&quot;http://r34tujk76.hb-bkt.clouddn.com/blog/20211126/195024889.jpg&quot; alt=&quot;渚薰被吃了&quot; style=&quot;width: 150px; height: 200px;&quot;&gt; 3图片映射1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;HTML图片映射&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=&quot;logo.png&quot; usemap=&quot;#objects&quot; alt=&quot;C语言中文网Logo&quot;&gt; &lt;map name=&quot;objects&quot;&gt; &lt;area shape=&quot;rect&quot; coords=&quot;0,0,82,126&quot; href=&quot;http://c.biancheng.net/html/&quot; alt=&quot;HTML教程&quot;&gt; &lt;area shape=&quot;circle&quot; coords=&quot;90,58,3&quot; href=&quot;http://www.biancheng.net/css3/&quot; alt=&quot;CSS教程&quot;&gt; &lt;area shape=&quot;circle&quot; coords=&quot;124,58,8&quot; href=&quot;http://www.biancheng.net/js/&quot; alt=&quot;JavaScript教程&quot;&gt; &lt;/map&gt;&lt;/body&gt;&lt;/html&gt; &lt;.map&gt;标签的name属性对应的是&lt;.img&gt;标签的usemap属性,&lt;.area&gt;用于定义点击图片的坐标shape 和 coords 属性 在 &lt;.area&gt; 标签中可以通过 shape 属性来定义可点击区域的形状，并通过 coords 属性来定义形状所对应的坐标。其中 shape 属性的可选值有三个，分别是 rect（矩形）、circle（圆形）和 poly（多边形），coords 属性中坐标的值则取决于可点击区域的形状。 假如定义一个矩形的可点击区域，示例代码如下： 1&lt;area shape=&quot;rect&quot; coords=&quot;x1, y1, x2, y2&quot; href=&quot;http://c.biancheng.net/&quot; alt=&quot;&quot;&gt; 其中 x1、y1 代表矩形的左上角坐标，x2、y2 代表矩形的右下角坐标。 假如定义一个圆形的可点击区域，示例代码如下： 1&lt;area shape=&quot;circle&quot; coords=&quot;x, y, radius&quot; href=&quot;&quot; alt=&quot;&quot;&gt; 其中 x、y 代表圆心的坐标，而 radius 则是圆的半径。 假如定义一个多边形的可点击区域，示例代码如下： 1&lt;area shape=&quot;poly&quot; coords=&quot;x1, y1, x2, y2, x3, y3, ..., xn, yn&quot; href=&quot;http://c.biancheng.net/&quot; alt=&quot;&quot;&gt; 其中每对 x 和 y 的值都代表一个多边形的顶点坐标。 注意：所有坐标都是相对于图片的左上角来计算的。 属性 属性值 说明 src 图片路径 必须属性 alt 文字 图片显示不出 title 文字 鼠标放在图片上后显示的文字 width 像素 宽度 height 像素 高度 border 像素 边框粗细 1234&lt;a href=&quot;http://baidu.com&quot;&gt; &lt;img src=&quot;http://r34tujk76.hb-bkt.clouddn.com/blog/20211126/195024889.jpg&quot;&gt;&lt;/a&gt; 9HTML&lt;.table&gt;表格1.表格使用代码12345678910111213141516171819202122&lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th&gt;官网&lt;/th&gt; &lt;th&gt;性质&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;b站&lt;/td&gt; &lt;td&gt;bilibili.com&lt;/td&gt; &lt;td&gt;综合&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;百度&lt;/td&gt; &lt;td&gt;http://www.baidu.com/&lt;/td&gt; &lt;td&gt;搜索&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;当当&lt;/td&gt; &lt;td&gt;http://www.dangdang.com/&lt;/td&gt; &lt;td&gt;图书&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 在里面中出现了新的单词table tr td th tr表示table row 表示行数 td表示table datacell 表示表格的单元格 th表示table heading表示表头 2.表格的边框合并如果不进行修改会显示双层边框这时候利用css的border-collapse的属性为collapse 1&lt;table border=&quot;1&quot; style&quot;border-collapse:collapse&quot; 3.表格的标题&lt;.caption&gt;12&lt;table border=&quot;1&quot; style=&quot;border-collapse:collapse;&quot;&gt;&lt;caption&gt;这是标题&lt;/caption&gt; 第一行并且居中显示 4.合并rowspan跨行合并单元格colspan跨列合并单元格 1234567891011121314151617181920&lt;table border=&quot;1&quot; style=&quot;border-collapse: collapse;&quot;&gt; &lt;tr&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th&gt;官网&lt;/th&gt; &lt;th&gt;性质&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C语言中文网&lt;/td&gt; &lt;td&gt;http://c.biancheng.net/&lt;/td&gt; &lt;td&gt;教育&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot;&gt;百度&lt;/td&gt; &lt;td&gt;www.baidu.com&lt;/td&gt; &lt;td&gt;搜索&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot;&gt;http://www.dangdang.com/&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 5.表格的属性 10.HTML列表标签&lt;.ul&gt;&lt;.ol&gt;&lt;.dl&gt; html为我们提功了三个列表表达方式 1.有序列表123456789&lt;body&gt; &lt;p&gt;煮米饭的步骤：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;将水煮沸&lt;/li&gt; &lt;li&gt;加入一勺米&lt;/li&gt; &lt;li&gt;搅拌均匀&lt;/li&gt; &lt;li&gt;继续煮10分钟&lt;/li&gt; &lt;/ol&gt;&lt;/body&gt; ol为order list的意思为有序列表li为 list item的意思为每一项 2.无序列表123456789&lt;body&gt; &lt;p&gt;早餐的种类：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;鸡蛋&lt;/li&gt; &lt;li&gt;牛奶&lt;/li&gt; &lt;li&gt;面包&lt;/li&gt; &lt;li&gt;生菜&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; &lt;.ul&gt; 是 unordered list 的简称，表示无序列表。 &lt;..ul&gt; 和 &lt;.ol&gt; 中的 &lt;.li&gt; 一样，都表示列表中的每一项。默认情况下，无序列表的每一项都使用●符号表示。 3.自定义列表定义如下 12345678&lt;dl&gt; &lt;dt&gt;标题1&lt;dt&gt; &lt;dd&gt;描述文本2&lt;dd&gt; &lt;dt&gt;标题2&lt;dt&gt; &lt;dd&gt;描述文本2&lt;dd&gt; &lt;dt&gt;标题3&lt;dt&gt; &lt;dd&gt;描述文本3&lt;dd&gt;&lt;/dl&gt; dl为定义列表 dt为定义术语 dd为定义描述 12345678910&lt;body&gt; &lt;dl&gt; &lt;dt&gt;HTML&lt;/dt&gt; &lt;dd&gt;HTML 是一种专门用来开发网页的标记语言，您可以转到《&lt;a href=&quot;http://c.biancheng.net/html/&quot; target=&quot;_blank&quot;&gt;HTML教程&lt;/a&gt;》了解更多。&lt;/dd&gt; &lt;dt&gt;CSS&lt;/dt&gt; &lt;dd&gt;CSS 层叠样式表可以控制 HTML 文档的显示样式，用来美化网页，您可以转到《&lt;a href=&quot;http://c.biancheng.net/css3/&quot; target=&quot;_blank&quot;&gt;CSS教程&lt;/a&gt;》了解更多。&lt;/dd&gt; &lt;dt&gt;JavaScript&lt;/dt&gt; &lt;dd&gt;JavaScript 简称 JS，是一种用来开发网站（包括前端和后台）的脚本编程语言，您可以转到《&lt;a href=&quot;http://c.biancheng.net/js/&quot; target=&quot;_blank&quot;&gt;JS教程&lt;/a&gt;》了解更多。&lt;/dd&gt; &lt;/dl&gt;&lt;/body&gt; 4.列表的默认样态1234567891011121314 &lt;ol style=&quot;margin:0px auto; padding-left:20px; list-style:upper-latin;&quot;&gt; &lt;li&gt;将水煮沸&lt;/li&gt; &lt;li&gt;加入一勺米&lt;/li&gt; &lt;li&gt;搅拌均匀&lt;/li&gt; &lt;li&gt;继续煮10分钟&lt;/li&gt; &lt;/ol&gt;对 CSS 样式的说明：margin:0px auto;将上下外边距设置为 0 像素，将左右外边距设置为自动。margin-bottom:0px;将下方外边距设置为 0 像素。margin:auto auto 10px 0px;将上方和右侧外边距设置为自动，将下方外边距设置为 10 像素，将左侧外边距设置为 0 像素。padding-left:20px;将左侧内边距设置为 20 像素。list-style:upper-latin;将列表项标记设置为大写拉丁字母。list-style:square;将列表项标记设置为实心方块。 11.⛤⛤⛤&lt;.form&gt;标签如果想通过网页交互可以通过form实现 123&lt;form action=&quot;URL&quot; method=&quot;GET|POST&quot;&gt; 表单中的其它标签&lt;/form&gt; action属性表示表单交到哪里 method属性表示使用什么方式提交数据 表单属于 HTML 文档的一部分，其中包含了如输入框、复选框、单选按钮、提交按钮等不同的表单控件，用户通过修改表单中的元素（例如输入文本，选择某个选项等）来完成表单，通过表单中的提交按钮将表单数据提交给后端程序。 除了type以外input还有其它的属性 注意这个name，如果说没有name属性，在这里如果没有name属性比如上例，点击male和female都可以单选和复选name应该是相同的值 checked这个是默认勾选的，比如说用户同意这种的 1文字域 账号 密码 1234&lt;form&gt;账号&lt;input type=&quot;text&quot; name=&quot;firstname&quot;&gt;&lt;br&gt;密码&lt;input type=&quot;text&quot; name=&quot;lastname&quot;&gt;&lt;/form&gt; 2密码字段如果想输入密码的话 input type=”password”修改password 这样就输入字符串，会变成星号 123&lt;form&gt;Password: &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/form&gt; Password: 3.按钮1234&lt;form&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;Male&lt;br&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot; checked=&quot;checked&quot;&gt;Female&lt;/form&gt; Male Female 4.复选框checkboxes1234&lt;form&gt;&lt;input type=&quot;checkbox&quot; value&quot;男&quot;&gt;男&lt;br&gt; &lt;input type=&quot;checkbox&quot; value&quot;女&quot;&gt;女&lt;/form&gt; 男 女 5提交按钮1234&lt;form name=&quot;input&quot; action=&quot;html_form_action.php&quot; method=&quot;get&quot;&gt;Username: &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt; Username: Username: 假如您在上面的文本框内键入几个字母，然后点击确认按钮，那么输入数据会传送到 “html_form_action.php” 的页面。该页面将显示出输入的结果。 6.简单的下拉列表1234567&lt;p&gt;你喜欢吃什么&lt;/p&gt;&lt;form&gt;&lt;select name=&quot;cars&quot;&gt;&lt;option value=&quot;volvo&quot;&gt;洋芋&lt;/option&gt;&lt;option value=&quot;saab&quot; selected=&quot;selected&quot;&gt;土豆&lt;/option&gt;&lt;/select&gt;&lt;/form&gt; 你喜欢吃什么 洋芋 土豆 ![mark](https://kaguranotamashii-1308648145.cos.ap-beijing.myqcloud.com/202112051307064.png) ## 7重置reset 123&lt;form&gt; &lt;input type=&quot;reset&quot; value=&quot;点我重新填写&quot;&gt;&lt;/form&gt; 8定义点击按钮1&lt;input type=&quot;button&quot; value=&quot;点我&quot;&gt; 9上传文件1&lt;input type=&quot;file&quot; value=&quot;点我&quot;&gt; 10.label标签12&lt;input type=&quot;radio&quot;name=&quot;sex&quot; id=&quot;nan&quot;&gt;&lt;label for=&quot;nan&quot;&gt;男&lt;/label&gt;&lt;input type=&quot;radio&quot;name=&quot;sex&quot; id=&quot;nv&quot;&gt;&lt;label for=&quot;nv&quot;&gt;女&lt;/label&gt; 11.表单元素textarea表单元素 当用户输入过多的元素的时候不用单纯的text了 1234&lt;form&gt;今日反馈 &lt;textarea cols=&quot;5&quot; rows=&quot;1&quot;&gt; &lt;/textarea&gt;&lt;/form&gt; 今日反馈 13.html综合学习1注册界面","categories":[{"name":"编程","slug":"编程","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"前端","slug":"编程/前端","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"编程/前端/HTML","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"html","slug":"html","permalink":"http://example.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"}]},{"title":"我对程序员的再认知","slug":"我对程序员的再认识","date":"2021-11-22T16:08:12.000Z","updated":"2021-12-05T05:08:33.375Z","comments":true,"path":"2021/11/23/我对程序员的再认识/","link":"","permalink":"http://example.com/2021/11/23/%E6%88%91%E5%AF%B9%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%86%8D%E8%AE%A4%E8%AF%86/","excerpt":"1.接触在高三的时候，和同学讨论志愿报名的时候，一些学物理的男生就表示计算机挣钱多。“我的亲戚学历不高，就自学前端什么什么的，在北京挣了多多少钱”。","text":"1.接触在高三的时候，和同学讨论志愿报名的时候，一些学物理的男生就表示计算机挣钱多。“我的亲戚学历不高，就自学前端什么什么的，在北京挣了多多少钱”。 后来高考考上了信息科大的通信学院的电子信息工程（EE），没有考中我想去的CS（Computer Science），虽然很失望，但是可以尝试转专业。转专业的想法在我心中愈来愈强烈。因此从开始那天到Iflab社团招新那一段时候，我犯了很严重的错误。 2.反思程序员的灵魂是什么？算法？代码？直到加入了iflab社团，导师为新生推荐的书籍中，部分都是哲学类的书籍，一时让我有了进入了文艺社的感觉。后来才明白，我用VS2019写出来的代码虽然有1G大，但是它没有思想，没有灵魂，没有‘生命力’的躯壳。 翁PJ学长的‘做一个天马行空的人’这封给新生的一封信。让我反思起从这几周我的盲目性，单纯为学习而学习的思维是非常不正确的，Hr不会听你的大学当过什么什么，这个感觉太像我在高考后，渴望着明明考不上的大学听到我的故事，而破例录取，但现实是残酷的。 编程是为了什么？钱？自由？其实都有一定的存在。用代码创造出自己的世界。最近在学习前端语言的时候我注意到了一系列课叫应用无障碍。与此同时B站也推出了对聋人帮助的实时字幕。这就是编程给特殊群体带来的便利。再比如苹果以及安卓手机的无障碍模式，都是用代码来为特殊人群的帮助。 3.继续行走自己也是其中之一，我也感受到了代码的”温暖”，计算机中的代码不再是冷冰冰的英文字母和符号了，它变成了照亮迷路的旅途者的灯塔。 大一上半年的我，继续探索吧，寻找属于自己的灯塔吧，自己的方向吧。","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://example.com/tags/%E6%80%9D%E8%80%83/"}]},{"title":"博客的搭建记录.","slug":"博客常用的记录","date":"2021-11-22T06:35:49.000Z","updated":"2022-06-17T17:20:49.833Z","comments":true,"path":"2021/11/22/博客常用的记录/","link":"","permalink":"http://example.com/2021/11/22/%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%B0%E5%BD%95/","excerpt":"对hexo的记录","text":"对hexo的记录 1.hexo的一些指令本地预览 hexo s 配置文件和主题 hexo g清空 hexo g 生成的内容hexo clean 标题名称 hexo new post 标题名称 123categories: -cover: 图标 2.Typora和Hd的使用方法typora的快捷键 1.段落 标题：Ctrl+1/2/3/4/5 段落：Ctrl+0 增大标题级别：Ctrl+= 减少标题级别：Ctrl+- 表格：Ctrl+T 代码块：Ctrl+Shift+K 公式块：Ctrl+Shift+M 引用：Ctrl+Shift+Q 有序列表：Ctrl+Shift+[ 无序列表：Ctrl+Shift+] 增加缩进：Ctrl+] 减少缩进：Ctrl+[ 2.格式 加粗：Ctrl+B 斜体：Ctrl+I 下划线：Ctrl+U 代码：Ctrl+Shift+` 删除线：Alt+Shift+5 超链接：Ctrl+K 图像：Ctrl+Shift+I 清除样式：Ctrl+ 3.部分常用的标题：Ctrl+1、2、3…对应一、二、三…级标题（光标定位到需要设置为标题的行，按快捷键）加粗：Ctrl+B（选中要加粗的文本，按快捷键）斜体：Ctrl+I（选中要设置斜体的文本，按快捷键）下划线：Ctrl+U（选中要加下划线的文本，按快捷键）删除线：Alt+Shift+5（选中要加删除线的文本，按快捷键）代码片段：Ctrl+Shift+`（选中要设置为代码片段的文本，按快捷键）代码块：Ctrl+Shift+K（任意位置按快捷键，选择编程语言然后在代码块中输入代码）切换到下一行：Ctrl+Enter（任意位置按快捷键，在代码块中可以跳出代码块另起一行）链接：Ctrl+K（先复制链接，然后选中要加链接的文本，按快捷键。Ctrl+左键点击文本可跳转到对应链接）取消格式：再次按相同的快捷键即可有序列表：数字+点+空格任务列表：加号或减号+空格切换到列表下一行：Space+Enter嵌套列表：按Tab键退出列表：按 Shift+Tab插入表格：Ctrl+T引用：输入&gt;后面加空格，或者Ctrl+Shift+Q 3.yilia的美化和修改（已经换蝴蝶主题）标签 123456tags: - 小工具 - hexo - yilia---或者tags: [xx,xxxx] 截断点12# 在博客md文件中，设置截断位置&lt;!--more--&gt; 图标1`theme/yilia/source`目录下添加`favicon.ico`图片 文章点击量1234567891011121314themes/yilia/layout/_partial/article.ejs中&lt;%- partial(&#x27;post/title&#x27;, &#123;class_name: &#x27;article-title&#x27;&#125;) %&gt;后面加入&lt;!--显示阅读次数--&gt;&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt; &lt;br/&gt; &lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:gray;font-size:14px;&quot;&gt; &lt;span class=&quot;icon-sort&quot;&gt;&lt;/span&gt; &lt;span id=&quot;busuanzi_container_page_pv&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt; 阅读数: &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次 &amp;nbsp;&amp;nbsp; &lt;/span&gt; &lt;/a&gt;&lt;% &#125; %&gt;&lt;!--显示阅读次数完毕--&gt; 插入图片1npm install hexo-asset-image –save 打开blog的_cofig.yml修改 1post_asset_folder: true 新建文章的时候自动生成文章名字.filenname，将图片放入 总文章数123456789将*themes\\yilia\\layout_partial*left-col.ejs文件的&lt;nav class=&quot;header-menu&quot;&gt; &lt;ul&gt; &lt;% for (var i in theme.menu)&#123; %&gt; &lt;li&gt;&lt;a href=&quot;&lt;%- url_for(theme.menu[i]) %&gt;&quot;&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt; &lt;%&#125;%&gt; &lt;/ul&gt;&lt;/nav&gt; 不蒜子12在 themes\\yilia\\layout_partial\\after-footer.ejs最后添加&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 1234567891011修改 themes\\yilia\\layout\\_partial\\footer.ejs，包括访客数和站点访问总量# PV方式，单个用户连续点击 n 篇，记录 n 次记录值&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;# UV方式，单个用户连续点击 n 篇，记录 1 次记录值&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次&lt;/span&gt;单篇# 使用 pv 记录方式，每访问一次，记录一次&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt; 本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; 4蝴蝶主题12345678npm install hexo-generator-index-pin-top --save安装置顶md文件内部的配置top: 1000//数字越大置顶在前面//这个也是zsticky:comments: true 添加上这个，如果这篇文章不需要评论改为false，默认开启 Butterfly主题美化日记 | Akilarの糖果屋 Hexo+Butterfly主题美化 | 唐先森の博客 (tzy1997.com) Hexo 博客之 butterfly 主题优雅魔改系列 | 小康博客 (antmoe.com) Butterfly主题外挂标签（个人常用） | Hassan’s Blog (hassanwong.top) Search | Font Awesome 图标网站11 2022/6/17 隐藏文章 12345npm install hexo-generator-indexed---title: examplehide: true---","categories":[{"name":"个人博客","slug":"个人博客","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"个人博客/hexo","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo/"}],"tags":[{"name":"搭建博客","slug":"搭建博客","permalink":"http://example.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"name":"指令","slug":"指令","permalink":"http://example.com/tags/%E6%8C%87%E4%BB%A4/"},{"name":"记录","slug":"记录","permalink":"http://example.com/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"最初のBlog「神楽の魂という意味は？」","slug":"神楽の魂という意味は？","date":"2021-11-22T04:57:13.000Z","updated":"2022-04-19T15:18:58.003Z","comments":true,"path":"2021/11/22/神楽の魂という意味は？/","link":"","permalink":"http://example.com/2021/11/22/%E7%A5%9E%E6%A5%BD%E3%81%AE%E9%AD%82%E3%81%A8%E3%81%84%E3%81%86%E6%84%8F%E5%91%B3%E3%81%AF%EF%BC%9F/","excerpt":"关于我的网名","text":"关于我的网名 1.ゲームから初中的时候玩阴阳师，自动推荐的名字就是神乐之魂「かぐらのたましい」，也不知道怎么的就喜欢上了这个网名。 2.激しい后来，高二的时候买了日语网课(因为我是小语种考生),一开始我在群名批注就改为神乐之魂。 那时候我还以为乐这个字读为le，后来小王子老师叫我网名的时候就是读yue，当时我也经常读错。不过随着日语水平的提高我叫它为かぐら。 后来和群友混熟了，他们都叫我神乐老弟（现在退群了），我也习惯了神乐之魂这个网名。 我的GitHub就是以神乐之魂的假名为基础命名的，但是太过于长了（kaguranotamashii），待考虑改为kagura。 3.新しいミライから我的博客主要打算写我的对计算机的学习，以及我的一些思考。 ボクノミライハマダ始まったバカリ！(我的未来才刚开始！)","categories":[],"tags":[]}],"categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"刷题","slug":"算法/刷题","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98/"},{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"},{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"},{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"编程","slug":"编程","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/"},{"name":"cpp","slug":"编程/cpp","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/cpp/"},{"name":"Python","slug":"编程/Python","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/Python/"},{"name":"前端","slug":"编程/前端","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"编程/前端/CSS","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/CSS/"},{"name":"javascript","slug":"编程/前端/javascript","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/javascript/"},{"name":"个人博客","slug":"个人博客","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"问题","slug":"个人博客/问题","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%97%AE%E9%A2%98/"},{"name":"HTML","slug":"编程/前端/HTML","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B/%E5%89%8D%E7%AB%AF/HTML/"},{"name":"hexo","slug":"个人博客/hexo","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://example.com/tags/Algorithm/"},{"name":"踩过的坑","slug":"踩过的坑","permalink":"http://example.com/tags/%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"黑苹果","slug":"黑苹果","permalink":"http://example.com/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"},{"name":"闲谈","slug":"闲谈","permalink":"http://example.com/tags/%E9%97%B2%E8%B0%88/"},{"name":"swift","slug":"swift","permalink":"http://example.com/tags/swift/"},{"name":"ios","slug":"ios","permalink":"http://example.com/tags/ios/"},{"name":"年度总结","slug":"年度总结","permalink":"http://example.com/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"cpp","slug":"cpp","permalink":"http://example.com/tags/cpp/"},{"name":"考试","slug":"考试","permalink":"http://example.com/tags/%E8%80%83%E8%AF%95/"},{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"javascript","slug":"javascript","permalink":"http://example.com/tags/javascript/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"html","slug":"html","permalink":"http://example.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"},{"name":"思考","slug":"思考","permalink":"http://example.com/tags/%E6%80%9D%E8%80%83/"},{"name":"搭建博客","slug":"搭建博客","permalink":"http://example.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"name":"指令","slug":"指令","permalink":"http://example.com/tags/%E6%8C%87%E4%BB%A4/"},{"name":"记录","slug":"记录","permalink":"http://example.com/tags/%E8%AE%B0%E5%BD%95/"}]}